
audio7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fff4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0801017c  0801017c  0002017c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .constdata    00001a48  08010290  08010290  00020290  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08011cd8  08011cd8  00030090  2**0
                  CONTENTS
  5 .ARM          00000008  08011cd8  08011cd8  00021cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08011ce0  08011ce0  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08011ce0  08011ce0  00021ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08011ce4  08011ce4  00021ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000090  20000000  08011ce8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00005b88  20000090  08011d78  00030090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005c18  08011d78  00035c18  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028804  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000544c  00000000  00000000  000588c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f0  00000000  00000000  0005dd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001200  00000000  00000000  0005f100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026946  00000000  00000000  00060300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f9bf  00000000  00000000  00086c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbae9  00000000  00000000  000a6605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000b63  00000000  00000000  001720ee  2**0
                  CONTENTS, READONLY
 21 .arm_vfe_header 00000004  00000000  00000000  00172c54  2**2
                  CONTENTS, READONLY
 22 .debug_frame  00005a60  00000000  00000000  00172c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08010164 	.word	0x08010164

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08010164 	.word	0x08010164

080001c8 <MP3D_SPCORP_Symbol_007>:
 80001c8:	6881      	ldr	r1, [r0, #8]
 80001ca:	1a09      	subs	r1, r1, r0
 80001cc:	6840      	ldr	r0, [r0, #4]
 80001ce:	393e      	subs	r1, #62	; 0x3e
 80001d0:	1049      	asrs	r1, r1, #1
 80001d2:	f1c0 0010 	rsb	r0, r0, #16
 80001d6:	ebc0 1001 	rsb	r0, r0, r1, lsl #4
 80001da:	4770      	bx	lr

080001dc <MP3D_SPCORP_Symbol_011>:
 80001dc:	090a      	lsrs	r2, r1, #4
 80001de:	b510      	push	{r4, lr}
 80001e0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80001e4:	323e      	adds	r2, #62	; 0x3e
 80001e6:	6082      	str	r2, [r0, #8]
 80001e8:	f832 3b02 	ldrh.w	r3, [r2], #2
 80001ec:	f001 010f 	and.w	r1, r1, #15
 80001f0:	ba5b      	rev16	r3, r3
 80001f2:	041b      	lsls	r3, r3, #16
 80001f4:	408b      	lsls	r3, r1
 80001f6:	6003      	str	r3, [r0, #0]
 80001f8:	6082      	str	r2, [r0, #8]
 80001fa:	f832 4b02 	ldrh.w	r4, [r2], #2
 80001fe:	ba64      	rev16	r4, r4
 8000200:	408c      	lsls	r4, r1
 8000202:	4323      	orrs	r3, r4
 8000204:	3910      	subs	r1, #16
 8000206:	6003      	str	r3, [r0, #0]
 8000208:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800020c:	bd10      	pop	{r4, pc}

0800020e <MP3D_SPCORP_Symbol_019>:
 800020e:	0301      	lsls	r1, r0, #12
 8000210:	d507      	bpl.n	8000222 <MP3D_SPCORP_Symbol_019+0x14>
 8000212:	f3c0 4141 	ubfx	r1, r0, #17, #2
 8000216:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800021a:	4aff      	ldr	r2, [pc, #1020]	; (8000618 <MP3D_SPCORP_Symbol_010+0x17a>)
 800021c:	4411      	add	r1, r2
 800021e:	390f      	subs	r1, #15
 8000220:	e006      	b.n	8000230 <MP3D_SPCORP_Symbol_019+0x22>
 8000222:	49fd      	ldr	r1, [pc, #1012]	; (8000618 <MP3D_SPCORP_Symbol_010+0x17a>)
 8000224:	ea6f 4250 	mvn.w	r2, r0, lsr #17
 8000228:	312d      	adds	r1, #45	; 0x2d
 800022a:	0792      	lsls	r2, r2, #30
 800022c:	d100      	bne.n	8000230 <MP3D_SPCORP_Symbol_019+0x22>
 800022e:	310f      	adds	r1, #15
 8000230:	b280      	uxth	r0, r0
 8000232:	eb01 3010 	add.w	r0, r1, r0, lsr #12
 8000236:	7800      	ldrb	r0, [r0, #0]
 8000238:	00c0      	lsls	r0, r0, #3
 800023a:	4770      	bx	lr

0800023c <MP3D_SPCORP_Symbol_021>:
 800023c:	f3c0 4141 	ubfx	r1, r0, #17, #2
 8000240:	2901      	cmp	r1, #1
 8000242:	d002      	beq.n	800024a <MP3D_SPCORP_Symbol_021+0xe>
 8000244:	2903      	cmp	r1, #3
 8000246:	d005      	beq.n	8000254 <MP3D_SPCORP_Symbol_021+0x18>
 8000248:	e007      	b.n	800025a <MP3D_SPCORP_Symbol_021+0x1e>
 800024a:	0300      	lsls	r0, r0, #12
 800024c:	d405      	bmi.n	800025a <MP3D_SPCORP_Symbol_021+0x1e>
 800024e:	f44f 7010 	mov.w	r0, #576	; 0x240
 8000252:	4770      	bx	lr
 8000254:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8000258:	4770      	bx	lr
 800025a:	f44f 6090 	mov.w	r0, #1152	; 0x480
 800025e:	4770      	bx	lr

08000260 <MP3D_SPCORP_Symbol_018>:
 8000260:	b530      	push	{r4, r5, lr}
 8000262:	4603      	mov	r3, r0
 8000264:	4608      	mov	r0, r1
 8000266:	f413 4f70 	tst.w	r3, #61440	; 0xf000
 800026a:	ea6f 4453 	mvn.w	r4, r3, lsr #17
 800026e:	d01e      	beq.n	80002ae <MP3D_SPCORP_Symbol_018+0x4e>
 8000270:	4618      	mov	r0, r3
 8000272:	f7ff ffe3 	bl	800023c <MP3D_SPCORP_Symbol_021>
 8000276:	0945      	lsrs	r5, r0, #5
 8000278:	4618      	mov	r0, r3
 800027a:	f7ff ffc8 	bl	800020e <MP3D_SPCORP_Symbol_019>
 800027e:	ea4f 00d0 	mov.w	r0, r0, lsr #3
 8000282:	4345      	muls	r5, r0
 8000284:	48e4      	ldr	r0, [pc, #912]	; (8000618 <MP3D_SPCORP_Symbol_010+0x17a>)
 8000286:	f3c3 2181 	ubfx	r1, r3, #10, #2
 800028a:	3058      	adds	r0, #88	; 0x58
 800028c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8000290:	4368      	muls	r0, r5
 8000292:	ea4f 2090 	mov.w	r0, r0, lsr #10
 8000296:	02d9      	lsls	r1, r3, #11
 8000298:	d505      	bpl.n	80002a6 <MP3D_SPCORP_Symbol_018+0x46>
 800029a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800029e:	0319      	lsls	r1, r3, #12
 80002a0:	d501      	bpl.n	80002a6 <MP3D_SPCORP_Symbol_018+0x46>
 80002a2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80002a6:	07a1      	lsls	r1, r4, #30
 80002a8:	d101      	bne.n	80002ae <MP3D_SPCORP_Symbol_018+0x4e>
 80002aa:	f020 0003 	bic.w	r0, r0, #3
 80002ae:	0599      	lsls	r1, r3, #22
 80002b0:	d502      	bpl.n	80002b8 <MP3D_SPCORP_Symbol_018+0x58>
 80002b2:	07a1      	lsls	r1, r4, #30
 80002b4:	d001      	beq.n	80002ba <MP3D_SPCORP_Symbol_018+0x5a>
 80002b6:	1c40      	adds	r0, r0, #1
 80002b8:	bd30      	pop	{r4, r5, pc}
 80002ba:	1d00      	adds	r0, r0, #4
 80002bc:	bd30      	pop	{r4, r5, pc}

080002be <MP3D_SPCORP_Symbol_022>:
 80002be:	4601      	mov	r1, r0
 80002c0:	201e      	movs	r0, #30
 80002c2:	030a      	lsls	r2, r1, #12
 80002c4:	d400      	bmi.n	80002c8 <MP3D_SPCORP_Symbol_022+0xa>
 80002c6:	200f      	movs	r0, #15
 80002c8:	f3c1 1181 	ubfx	r1, r1, #6, #2
 80002cc:	2903      	cmp	r1, #3
 80002ce:	d100      	bne.n	80002d2 <MP3D_SPCORP_Symbol_022+0x14>
 80002d0:	1040      	asrs	r0, r0, #1
 80002d2:	1c80      	adds	r0, r0, #2
 80002d4:	4770      	bx	lr

080002d6 <MP3D_SPCORP_Symbol_023>:
 80002d6:	4603      	mov	r3, r0
 80002d8:	b500      	push	{lr}
 80002da:	f3c0 4041 	ubfx	r0, r0, #17, #2
 80002de:	2801      	cmp	r0, #1
 80002e0:	d901      	bls.n	80002e6 <MP3D_SPCORP_Symbol_023+0x10>
 80002e2:	2004      	movs	r0, #4
 80002e4:	e004      	b.n	80002f0 <MP3D_SPCORP_Symbol_023+0x1a>
 80002e6:	4618      	mov	r0, r3
 80002e8:	f7ff ffe9 	bl	80002be <MP3D_SPCORP_Symbol_022>
 80002ec:	f100 0004 	add.w	r0, r0, #4
 80002f0:	03d9      	lsls	r1, r3, #15
 80002f2:	d400      	bmi.n	80002f6 <MP3D_SPCORP_Symbol_023+0x20>
 80002f4:	1c80      	adds	r0, r0, #2
 80002f6:	bd00      	pop	{pc}

080002f8 <MP3D_SPCORP_Symbol_002>:
 80002f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80002fc:	4604      	mov	r4, r0
 80002fe:	6900      	ldr	r0, [r0, #16]
 8000300:	000d      	movs	r5, r1
 8000302:	d023      	beq.n	800034c <MP3D_SPCORP_Symbol_002+0x54>
 8000304:	69e1      	ldr	r1, [r4, #28]
 8000306:	1b4f      	subs	r7, r1, r5
 8000308:	f7ff ffe5 	bl	80002d6 <MP3D_SPCORP_Symbol_023>
 800030c:	69e1      	ldr	r1, [r4, #28]
 800030e:	4606      	mov	r6, r0
 8000310:	180a      	adds	r2, r1, r0
 8000312:	69a0      	ldr	r0, [r4, #24]
 8000314:	1a83      	subs	r3, r0, r2
 8000316:	d002      	beq.n	800031e <MP3D_SPCORP_Symbol_002+0x26>
 8000318:	4620      	mov	r0, r4
 800031a:	f001 f8a7 	bl	800146c <MP3D_SPCORP_Symbol_012>
 800031e:	69a0      	ldr	r0, [r4, #24]
 8000320:	1b80      	subs	r0, r0, r6
 8000322:	61a0      	str	r0, [r4, #24]
 8000324:	69e0      	ldr	r0, [r4, #28]
 8000326:	1b80      	subs	r0, r0, r6
 8000328:	61e0      	str	r0, [r4, #28]
 800032a:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 800032e:	f7ff ff97 	bl	8000260 <MP3D_SPCORP_Symbol_018>
 8000332:	69e1      	ldr	r1, [r4, #28]
 8000334:	4408      	add	r0, r1
 8000336:	61e0      	str	r0, [r4, #28]
 8000338:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800033a:	42a8      	cmp	r0, r5
 800033c:	d30d      	bcc.n	800035a <MP3D_SPCORP_Symbol_002+0x62>
 800033e:	00f9      	lsls	r1, r7, #3
 8000340:	4620      	mov	r0, r4
 8000342:	f7ff ff4b 	bl	80001dc <MP3D_SPCORP_Symbol_011>
 8000346:	2001      	movs	r0, #1
 8000348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800034c:	6961      	ldr	r1, [r4, #20]
 800034e:	f7ff ff87 	bl	8000260 <MP3D_SPCORP_Symbol_018>
 8000352:	69e1      	ldr	r1, [r4, #28]
 8000354:	4408      	add	r0, r1
 8000356:	61e0      	str	r0, [r4, #28]
 8000358:	e7f5      	b.n	8000346 <MP3D_SPCORP_Symbol_002+0x4e>
 800035a:	eb07 0105 	add.w	r1, r7, r5
 800035e:	1a08      	subs	r0, r1, r0
 8000360:	d500      	bpl.n	8000364 <MP3D_SPCORP_Symbol_002+0x6c>
 8000362:	2000      	movs	r0, #0
 8000364:	00c1      	lsls	r1, r0, #3
 8000366:	4620      	mov	r0, r4
 8000368:	f7ff ff38 	bl	80001dc <MP3D_SPCORP_Symbol_011>
 800036c:	2000      	movs	r0, #0
 800036e:	e7eb      	b.n	8000348 <MP3D_SPCORP_Symbol_002+0x50>

08000370 <MP3D_SPCORP_Symbol_003>:
 8000370:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8000372:	e733      	b.n	80001dc <MP3D_SPCORP_Symbol_011>

08000374 <MP3D_SPCORP_Symbol_017>:
 8000374:	b510      	push	{r4, lr}
 8000376:	4604      	mov	r4, r0
 8000378:	4ba8      	ldr	r3, [pc, #672]	; (800061c <MP3D_SPCORP_Symbol_010+0x17e>)
 800037a:	2000      	movs	r0, #0
 800037c:	ea84 0201 	eor.w	r2, r4, r1
 8000380:	421a      	tst	r2, r3
 8000382:	d10c      	bne.n	800039e <MP3D_SPCORP_Symbol_017+0x2a>
 8000384:	2201      	movs	r2, #1
 8000386:	4613      	mov	r3, r2
 8000388:	f414 4f70 	tst.w	r4, #61440	; 0xf000
 800038c:	d000      	beq.n	8000390 <MP3D_SPCORP_Symbol_017+0x1c>
 800038e:	2300      	movs	r3, #0
 8000390:	f411 4f70 	tst.w	r1, #61440	; 0xf000
 8000394:	d000      	beq.n	8000398 <MP3D_SPCORP_Symbol_017+0x24>
 8000396:	2200      	movs	r2, #0
 8000398:	4293      	cmp	r3, r2
 800039a:	d100      	bne.n	800039e <MP3D_SPCORP_Symbol_017+0x2a>
 800039c:	2001      	movs	r0, #1
 800039e:	bd10      	pop	{r4, pc}

080003a0 <MP3D_SPCORP_Symbol_016>:
 80003a0:	4aa0      	ldr	r2, [pc, #640]	; (8000624 <MP3D_SPCORP_Symbol_010+0x186>)
 80003a2:	b510      	push	{r4, lr}
 80003a4:	499e      	ldr	r1, [pc, #632]	; (8000620 <MP3D_SPCORP_Symbol_010+0x182>)
 80003a6:	6011      	str	r1, [r2, #0]
 80003a8:	2100      	movs	r1, #0
 80003aa:	f640 73ff 	movw	r3, #4095	; 0xfff
 80003ae:	ebb3 5f10 	cmp.w	r3, r0, lsr #20
 80003b2:	d004      	beq.n	80003be <MP3D_SPCORP_Symbol_016+0x1e>
 80003b4:	f647 73f1 	movw	r3, #32753	; 0x7ff1
 80003b8:	ebb3 4f50 	cmp.w	r3, r0, lsr #17
 80003bc:	d10c      	bne.n	80003d8 <MP3D_SPCORP_Symbol_016+0x38>
 80003be:	b283      	uxth	r3, r0
 80003c0:	240f      	movs	r4, #15
 80003c2:	ebb4 3f13 	cmp.w	r4, r3, lsr #12
 80003c6:	d007      	beq.n	80003d8 <MP3D_SPCORP_Symbol_016+0x38>
 80003c8:	ea6f 2390 	mvn.w	r3, r0, lsr #10
 80003cc:	079b      	lsls	r3, r3, #30
 80003ce:	d003      	beq.n	80003d8 <MP3D_SPCORP_Symbol_016+0x38>
 80003d0:	0c40      	lsrs	r0, r0, #17
 80003d2:	0780      	lsls	r0, r0, #30
 80003d4:	d000      	beq.n	80003d8 <MP3D_SPCORP_Symbol_016+0x38>
 80003d6:	2101      	movs	r1, #1
 80003d8:	6810      	ldr	r0, [r2, #0]
 80003da:	ea01 70e0 	and.w	r0, r1, r0, asr #31
 80003de:	bd10      	pop	{r4, pc}

080003e0 <MP3D_SPCORP_Symbol_004>:
 80003e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003e4:	4688      	mov	r8, r1
 80003e6:	4604      	mov	r4, r0
 80003e8:	f7ff feee 	bl	80001c8 <MP3D_SPCORP_Symbol_007>
 80003ec:	69a1      	ldr	r1, [r4, #24]
 80003ee:	4606      	mov	r6, r0
 80003f0:	ebc0 07c1 	rsb	r7, r0, r1, lsl #3
 80003f4:	69e1      	ldr	r1, [r4, #28]
 80003f6:	f241 2210 	movw	r2, #4624	; 0x1210
 80003fa:	4440      	add	r0, r8
 80003fc:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8000400:	4288      	cmp	r0, r1
 8000402:	d333      	bcc.n	800046c <MP3D_SPCORP_Symbol_004+0x8c>
 8000404:	f06f 0002 	mvn.w	r0, #2
 8000408:	e79e      	b.n	8000348 <MP3D_SPCORP_Symbol_002+0x50>
 800040a:	69e1      	ldr	r1, [r4, #28]
 800040c:	4630      	mov	r0, r6
 800040e:	ebb6 0fc1 	cmp.w	r6, r1, lsl #3
 8000412:	d300      	bcc.n	8000416 <MP3D_SPCORP_Symbol_004+0x36>
 8000414:	00c8      	lsls	r0, r1, #3
 8000416:	08c5      	lsrs	r5, r0, #3
 8000418:	69a0      	ldr	r0, [r4, #24]
 800041a:	42a8      	cmp	r0, r5
 800041c:	d800      	bhi.n	8000420 <MP3D_SPCORP_Symbol_004+0x40>
 800041e:	4605      	mov	r5, r0
 8000420:	b18d      	cbz	r5, 8000446 <MP3D_SPCORP_Symbol_004+0x66>
 8000422:	1b43      	subs	r3, r0, r5
 8000424:	d004      	beq.n	8000430 <MP3D_SPCORP_Symbol_004+0x50>
 8000426:	462a      	mov	r2, r5
 8000428:	2100      	movs	r1, #0
 800042a:	4620      	mov	r0, r4
 800042c:	f001 f81e 	bl	800146c <MP3D_SPCORP_Symbol_012>
 8000430:	69e0      	ldr	r0, [r4, #28]
 8000432:	1b40      	subs	r0, r0, r5
 8000434:	61e0      	str	r0, [r4, #28]
 8000436:	69a0      	ldr	r0, [r4, #24]
 8000438:	1b40      	subs	r0, r0, r5
 800043a:	61a0      	str	r0, [r4, #24]
 800043c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800043e:	4269      	negs	r1, r5
 8000440:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8000444:	6260      	str	r0, [r4, #36]	; 0x24
 8000446:	4268      	negs	r0, r5
 8000448:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
 800044c:	69a0      	ldr	r0, [r4, #24]
 800044e:	f104 033e 	add.w	r3, r4, #62	; 0x3e
 8000452:	f2a0 2142 	subw	r1, r0, #578	; 0x242
 8000456:	4418      	add	r0, r3
 8000458:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800045c:	4249      	negs	r1, r1
 800045e:	4798      	blx	r3
 8000460:	69a1      	ldr	r1, [r4, #24]
 8000462:	4401      	add	r1, r0
 8000464:	00c0      	lsls	r0, r0, #3
 8000466:	61a1      	str	r1, [r4, #24]
 8000468:	4407      	add	r7, r0
 800046a:	d00a      	beq.n	8000482 <MP3D_SPCORP_Symbol_004+0xa2>
 800046c:	4547      	cmp	r7, r8
 800046e:	dbcc      	blt.n	800040a <MP3D_SPCORP_Symbol_004+0x2a>
 8000470:	4631      	mov	r1, r6
 8000472:	4620      	mov	r0, r4
 8000474:	f7ff feb2 	bl	80001dc <MP3D_SPCORP_Symbol_011>
 8000478:	eb06 0008 	add.w	r0, r6, r8
 800047c:	6260      	str	r0, [r4, #36]	; 0x24
 800047e:	2000      	movs	r0, #0
 8000480:	e762      	b.n	8000348 <MP3D_SPCORP_Symbol_002+0x50>
 8000482:	4631      	mov	r1, r6
 8000484:	4620      	mov	r0, r4
 8000486:	f7ff fea9 	bl	80001dc <MP3D_SPCORP_Symbol_011>
 800048a:	f06f 0001 	mvn.w	r0, #1
 800048e:	e75b      	b.n	8000348 <MP3D_SPCORP_Symbol_002+0x50>

08000490 <MP3D_SPCORP_Symbol_005>:
 8000490:	6802      	ldr	r2, [r0, #0]
 8000492:	408a      	lsls	r2, r1
 8000494:	6002      	str	r2, [r0, #0]
 8000496:	6842      	ldr	r2, [r0, #4]
 8000498:	4411      	add	r1, r2
 800049a:	6041      	str	r1, [r0, #4]
 800049c:	4770      	bx	lr

0800049e <MP3D_SPCORP_Symbol_010>:
 800049e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004a2:	4604      	mov	r4, r0
 80004a4:	485f      	ldr	r0, [pc, #380]	; (8000624 <MP3D_SPCORP_Symbol_010+0x186>)
 80004a6:	2500      	movs	r5, #0
 80004a8:	f04f 0801 	mov.w	r8, #1
 80004ac:	f8c0 8008 	str.w	r8, [r0, #8]
 80004b0:	6801      	ldr	r1, [r0, #0]
 80004b2:	1c49      	adds	r1, r1, #1
 80004b4:	d1fa      	bne.n	80004ac <MP3D_SPCORP_Symbol_010+0xe>
 80004b6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80004b8:	f240 77e1 	movw	r7, #2017	; 0x7e1
 80004bc:	b190      	cbz	r0, 80004e4 <MP3D_SPCORP_Symbol_010+0x46>
 80004be:	f44f 7198 	mov.w	r1, #304	; 0x130
 80004c2:	4620      	mov	r0, r4
 80004c4:	f7ff ff8c 	bl	80003e0 <MP3D_SPCORP_Symbol_004>
 80004c8:	2800      	cmp	r0, #0
 80004ca:	d17e      	bne.n	80005ca <MP3D_SPCORP_Symbol_010+0x12c>
 80004cc:	6961      	ldr	r1, [r4, #20]
 80004ce:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80004d0:	69e0      	ldr	r0, [r4, #28]
 80004d2:	42b9      	cmp	r1, r7
 80004d4:	d101      	bne.n	80004da <MP3D_SPCORP_Symbol_010+0x3c>
 80004d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80004d8:	4408      	add	r0, r1
 80004da:	00c1      	lsls	r1, r0, #3
 80004dc:	4620      	mov	r0, r4
 80004de:	f7ff fe7d 	bl	80001dc <MP3D_SPCORP_Symbol_011>
 80004e2:	e03b      	b.n	800055c <MP3D_SPCORP_Symbol_010+0xbe>
 80004e4:	6860      	ldr	r0, [r4, #4]
 80004e6:	4240      	negs	r0, r0
 80004e8:	f000 0107 	and.w	r1, r0, #7
 80004ec:	4620      	mov	r0, r4
 80004ee:	f7ff ffcf 	bl	8000490 <MP3D_SPCORP_Symbol_005>
 80004f2:	4620      	mov	r0, r4
 80004f4:	f7ff fe68 	bl	80001c8 <MP3D_SPCORP_Symbol_007>
 80004f8:	69e1      	ldr	r1, [r4, #28]
 80004fa:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
 80004fe:	d901      	bls.n	8000504 <MP3D_SPCORP_Symbol_010+0x66>
 8000500:	08c1      	lsrs	r1, r0, #3
 8000502:	61e1      	str	r1, [r4, #28]
 8000504:	6961      	ldr	r1, [r4, #20]
 8000506:	42b9      	cmp	r1, r7
 8000508:	d00f      	beq.n	800052a <MP3D_SPCORP_Symbol_010+0x8c>
 800050a:	69e1      	ldr	r1, [r4, #28]
 800050c:	ebc0 06c1 	rsb	r6, r0, r1, lsl #3
 8000510:	f640 70f8 	movw	r0, #4088	; 0xff8
 8000514:	4286      	cmp	r6, r0
 8000516:	dd06      	ble.n	8000526 <MP3D_SPCORP_Symbol_010+0x88>
 8000518:	4606      	mov	r6, r0
 800051a:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
 800051e:	4620      	mov	r0, r4
 8000520:	f7ff fe5c 	bl	80001dc <MP3D_SPCORP_Symbol_011>
 8000524:	e002      	b.n	800052c <MP3D_SPCORP_Symbol_010+0x8e>
 8000526:	2e00      	cmp	r6, #0
 8000528:	da00      	bge.n	800052c <MP3D_SPCORP_Symbol_010+0x8e>
 800052a:	2600      	movs	r6, #0
 800052c:	17f0      	asrs	r0, r6, #31
 800052e:	eb06 7050 	add.w	r0, r6, r0, lsr #29
 8000532:	10c0      	asrs	r0, r0, #3
 8000534:	f8c4 8020 	str.w	r8, [r4, #32]
 8000538:	6320      	str	r0, [r4, #48]	; 0x30
 800053a:	f506 7198 	add.w	r1, r6, #304	; 0x130
 800053e:	4620      	mov	r0, r4
 8000540:	f7ff ff4e 	bl	80003e0 <MP3D_SPCORP_Symbol_004>
 8000544:	2800      	cmp	r0, #0
 8000546:	d14a      	bne.n	80005de <MP3D_SPCORP_Symbol_010+0x140>
 8000548:	6960      	ldr	r0, [r4, #20]
 800054a:	42b8      	cmp	r0, r7
 800054c:	d114      	bne.n	8000578 <MP3D_SPCORP_Symbol_010+0xda>
 800054e:	4620      	mov	r0, r4
 8000550:	f7ff fe3a 	bl	80001c8 <MP3D_SPCORP_Symbol_007>
 8000554:	08c0      	lsrs	r0, r0, #3
 8000556:	69e1      	ldr	r1, [r4, #28]
 8000558:	61e0      	str	r0, [r4, #28]
 800055a:	1a0d      	subs	r5, r1, r0
 800055c:	2110      	movs	r1, #16
 800055e:	4620      	mov	r0, r4
 8000560:	f000 ff26 	bl	80013b0 <MP3D_SPCORP_Symbol_006>
 8000564:	4606      	mov	r6, r0
 8000566:	2110      	movs	r1, #16
 8000568:	4620      	mov	r0, r4
 800056a:	f000 ff21 	bl	80013b0 <MP3D_SPCORP_Symbol_006>
 800056e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000572:	f04f 0900 	mov.w	r9, #0
 8000576:	e034      	b.n	80005e2 <MP3D_SPCORP_Symbol_010+0x144>
 8000578:	69e0      	ldr	r0, [r4, #28]
 800057a:	e7ae      	b.n	80004da <MP3D_SPCORP_Symbol_010+0x3c>
 800057c:	b16d      	cbz	r5, 800059a <MP3D_SPCORP_Symbol_010+0xfc>
 800057e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000580:	1e6d      	subs	r5, r5, #1
 8000582:	1c40      	adds	r0, r0, #1
 8000584:	6320      	str	r0, [r4, #48]	; 0x30
 8000586:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800058a:	db02      	blt.n	8000592 <MP3D_SPCORP_Symbol_010+0xf4>
 800058c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000590:	e011      	b.n	80005b6 <MP3D_SPCORP_Symbol_010+0x118>
 8000592:	69e0      	ldr	r0, [r4, #28]
 8000594:	1e40      	subs	r0, r0, #1
 8000596:	61e0      	str	r0, [r4, #28]
 8000598:	e00e      	b.n	80005b8 <MP3D_SPCORP_Symbol_010+0x11a>
 800059a:	6960      	ldr	r0, [r4, #20]
 800059c:	42b8      	cmp	r0, r7
 800059e:	d103      	bne.n	80005a8 <MP3D_SPCORP_Symbol_010+0x10a>
 80005a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80005a2:	69e0      	ldr	r0, [r4, #28]
 80005a4:	4408      	add	r0, r1
 80005a6:	61e0      	str	r0, [r4, #28]
 80005a8:	f8c4 9014 	str.w	r9, [r4, #20]
 80005ac:	6921      	ldr	r1, [r4, #16]
 80005ae:	4648      	mov	r0, r9
 80005b0:	b109      	cbz	r1, 80005b6 <MP3D_SPCORP_Symbol_010+0x118>
 80005b2:	6220      	str	r0, [r4, #32]
 80005b4:	6120      	str	r0, [r4, #16]
 80005b6:	6320      	str	r0, [r4, #48]	; 0x30
 80005b8:	2108      	movs	r1, #8
 80005ba:	4620      	mov	r0, r4
 80005bc:	f000 fef8 	bl	80013b0 <MP3D_SPCORP_Symbol_006>
 80005c0:	ea40 2606 	orr.w	r6, r0, r6, lsl #8
 80005c4:	69e0      	ldr	r0, [r4, #28]
 80005c6:	1c40      	adds	r0, r0, #1
 80005c8:	e000      	b.n	80005cc <MP3D_SPCORP_Symbol_010+0x12e>
 80005ca:	e008      	b.n	80005de <MP3D_SPCORP_Symbol_010+0x140>
 80005cc:	61e0      	str	r0, [r4, #28]
 80005ce:	f44f 7188 	mov.w	r1, #272	; 0x110
 80005d2:	4620      	mov	r0, r4
 80005d4:	f7ff ff04 	bl	80003e0 <MP3D_SPCORP_Symbol_004>
 80005d8:	b118      	cbz	r0, 80005e2 <MP3D_SPCORP_Symbol_010+0x144>
 80005da:	e9c4 850a 	strd	r8, r5, [r4, #40]	; 0x28
 80005de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e2:	4630      	mov	r0, r6
 80005e4:	f7ff fedc 	bl	80003a0 <MP3D_SPCORP_Symbol_016>
 80005e8:	2800      	cmp	r0, #0
 80005ea:	d0c7      	beq.n	800057c <MP3D_SPCORP_Symbol_010+0xde>
 80005ec:	6921      	ldr	r1, [r4, #16]
 80005ee:	b319      	cbz	r1, 8000638 <MP3D_SPCORP_Symbol_010+0x19a>
 80005f0:	4630      	mov	r0, r6
 80005f2:	f7ff febf 	bl	8000374 <MP3D_SPCORP_Symbol_017>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d0c0      	beq.n	800057c <MP3D_SPCORP_Symbol_010+0xde>
 80005fa:	6960      	ldr	r0, [r4, #20]
 80005fc:	42b8      	cmp	r0, r7
 80005fe:	d106      	bne.n	800060e <MP3D_SPCORP_Symbol_010+0x170>
 8000600:	eba0 0005 	sub.w	r0, r0, r5
 8000604:	6160      	str	r0, [r4, #20]
 8000606:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000608:	69e0      	ldr	r0, [r4, #28]
 800060a:	4408      	add	r0, r1
 800060c:	61e0      	str	r0, [r4, #28]
 800060e:	6126      	str	r6, [r4, #16]
 8000610:	03f0      	lsls	r0, r6, #15
 8000612:	d40d      	bmi.n	8000630 <MP3D_SPCORP_Symbol_010+0x192>
 8000614:	2110      	movs	r1, #16
 8000616:	e007      	b.n	8000628 <MP3D_SPCORP_Symbol_010+0x18a>
 8000618:	08011390 	.word	0x08011390
 800061c:	fffe0c00 	.word	0xfffe0c00
 8000620:	fff00000 	.word	0xfff00000
 8000624:	40023000 	.word	0x40023000
 8000628:	4620      	mov	r0, r4
 800062a:	f000 fec1 	bl	80013b0 <MP3D_SPCORP_Symbol_006>
 800062e:	87a0      	strh	r0, [r4, #60]	; 0x3c
 8000630:	2000      	movs	r0, #0
 8000632:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
 8000636:	e7d2      	b.n	80005de <MP3D_SPCORP_Symbol_010+0x140>
 8000638:	f416 4f70 	tst.w	r6, #61440	; 0xf000
 800063c:	d1dd      	bne.n	80005fa <MP3D_SPCORP_Symbol_010+0x15c>
 800063e:	6167      	str	r7, [r4, #20]
 8000640:	e7db      	b.n	80005fa <MP3D_SPCORP_Symbol_010+0x15c>

08000642 <MP3D_SPCORP_Symbol_008>:
 8000642:	b500      	push	{lr}
 8000644:	4602      	mov	r2, r0
 8000646:	f7ff fdbf 	bl	80001c8 <MP3D_SPCORP_Symbol_007>
 800064a:	69d1      	ldr	r1, [r2, #28]
 800064c:	ebc0 00c1 	rsb	r0, r0, r1, lsl #3
 8000650:	bd00      	pop	{pc}

08000652 <MP3D_SPCORP_Symbol_009>:
 8000652:	69c1      	ldr	r1, [r0, #28]
 8000654:	1c49      	adds	r1, r1, #1
 8000656:	61c1      	str	r1, [r0, #28]
 8000658:	2100      	movs	r1, #0
 800065a:	6201      	str	r1, [r0, #32]
 800065c:	4770      	bx	lr

0800065e <MP3D_SPCORP_Symbol_020>:
 800065e:	4601      	mov	r1, r0
 8000660:	48f9      	ldr	r0, [pc, #996]	; (8000a48 <MP3D_SPCORP_Symbol_015+0x2e>)
 8000662:	f3c1 2281 	ubfx	r2, r1, #10, #2
 8000666:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800066a:	030a      	lsls	r2, r1, #12
 800066c:	d404      	bmi.n	8000678 <MP3D_SPCORP_Symbol_020+0x1a>
 800066e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8000672:	02c9      	lsls	r1, r1, #11
 8000674:	d400      	bmi.n	8000678 <MP3D_SPCORP_Symbol_020+0x1a>
 8000676:	0840      	lsrs	r0, r0, #1
 8000678:	4770      	bx	lr

0800067a <mp3d_UnpackSfb>:
 800067a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800067e:	468a      	mov	sl, r1
 8000680:	4681      	mov	r9, r0
 8000682:	f100 0166 	add.w	r1, r0, #102	; 0x66
 8000686:	4ef0      	ldr	r6, [pc, #960]	; (8000a48 <MP3D_SPCORP_Symbol_015+0x2e>)
 8000688:	2503      	movs	r5, #3
 800068a:	2000      	movs	r0, #0
 800068c:	3618      	adds	r6, #24
 800068e:	4cef      	ldr	r4, [pc, #956]	; (8000a4c <MP3D_SPCORP_Symbol_015+0x32>)
 8000690:	e008      	b.n	80006a4 <mp3d_UnpackSfb+0x2a>
 8000692:	6822      	ldr	r2, [r4, #0]
 8000694:	f836 7010 	ldrh.w	r7, [r6, r0, lsl #1]
 8000698:	4352      	muls	r2, r2
 800069a:	ea87 4722 	eor.w	r7, r7, r2, asr #16
 800069e:	b2bb      	uxth	r3, r7
 80006a0:	6022      	str	r2, [r4, #0]
 80006a2:	1c40      	adds	r0, r0, #1
 80006a4:	4550      	cmp	r0, sl
 80006a6:	ddf4      	ble.n	8000692 <mp3d_UnpackSfb+0x18>
 80006a8:	0418      	lsls	r0, r3, #16
 80006aa:	eb06 3cd0 	add.w	ip, r6, r0, lsr #15
 80006ae:	2201      	movs	r2, #1
 80006b0:	60a2      	str	r2, [r4, #8]
 80006b2:	6820      	ldr	r0, [r4, #0]
 80006b4:	1c40      	adds	r0, r0, #1
 80006b6:	d1fb      	bne.n	80006b0 <mp3d_UnpackSfb+0x36>
 80006b8:	435b      	muls	r3, r3
 80006ba:	6023      	str	r3, [r4, #0]
 80006bc:	4683      	mov	fp, r0
 80006be:	f44f 7e90 	mov.w	lr, #288	; 0x120
 80006c2:	46a0      	mov	r8, r4
 80006c4:	2000      	movs	r0, #0
 80006c6:	4672      	mov	r2, lr
 80006c8:	f801 b901 	strb.w	fp, [r1], #-1
 80006cc:	f83c 4b02 	ldrh.w	r4, [ip], #2
 80006d0:	f8d8 3000 	ldr.w	r3, [r8]
 80006d4:	4063      	eors	r3, r4
 80006d6:	b29c      	uxth	r4, r3
 80006d8:	1223      	asrs	r3, r4, #8
 80006da:	b2e6      	uxtb	r6, r4
 80006dc:	4370      	muls	r0, r6
 80006de:	3080      	adds	r0, #128	; 0x80
 80006e0:	462c      	mov	r4, r5
 80006e2:	1200      	asrs	r0, r0, #8
 80006e4:	b903      	cbnz	r3, 80006e8 <mp3d_UnpackSfb+0x6e>
 80006e6:	4630      	mov	r0, r6
 80006e8:	b2c7      	uxtb	r7, r0
 80006ea:	1a12      	subs	r2, r2, r0
 80006ec:	f801 7901 	strb.w	r7, [r1], #-1
 80006f0:	1e64      	subs	r4, r4, #1
 80006f2:	d1fa      	bne.n	80006ea <mp3d_UnpackSfb+0x70>
 80006f4:	1e5b      	subs	r3, r3, #1
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	dcf0      	bgt.n	80006dc <mp3d_UnpackSfb+0x62>
 80006fa:	2a00      	cmp	r2, #0
 80006fc:	d1e6      	bne.n	80006cc <mp3d_UnpackSfb+0x52>
 80006fe:	106d      	asrs	r5, r5, #1
 8000700:	d1e0      	bne.n	80006c4 <mp3d_UnpackSfb+0x4a>
 8000702:	2206      	movs	r2, #6
 8000704:	4648      	mov	r0, r9
 8000706:	f1ba 0f05 	cmp.w	sl, #5
 800070a:	dd00      	ble.n	800070e <mp3d_UnpackSfb+0x94>
 800070c:	2208      	movs	r2, #8
 800070e:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8000712:	1e52      	subs	r2, r2, #1
 8000714:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000718:	f800 3b01 	strb.w	r3, [r0], #1
 800071c:	d1f9      	bne.n	8000712 <mp3d_UnpackSfb+0x98>
 800071e:	f109 0148 	add.w	r1, r9, #72	; 0x48
 8000722:	780a      	ldrb	r2, [r1, #0]
 8000724:	f800 2b01 	strb.w	r2, [r0], #1
 8000728:	f811 2b01 	ldrb.w	r2, [r1], #1
 800072c:	2a00      	cmp	r2, #0
 800072e:	d1f8      	bne.n	8000722 <mp3d_UnpackSfb+0xa8>
 8000730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000734 <MP3D_SPCORP_Symbol_025>:
 8000734:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000738:	b085      	sub	sp, #20
 800073a:	461d      	mov	r5, r3
 800073c:	9806      	ldr	r0, [sp, #24]
 800073e:	e9dd 3112 	ldrd	r3, r1, [sp, #72]	; 0x48
 8000742:	6900      	ldr	r0, [r0, #16]
 8000744:	9003      	str	r0, [sp, #12]
 8000746:	f8df a308 	ldr.w	sl, [pc, #776]	; 8000a50 <MP3D_SPCORP_Symbol_015+0x36>
 800074a:	7ad0      	ldrb	r0, [r2, #11]
 800074c:	4614      	mov	r4, r2
 800074e:	b128      	cbz	r0, 800075c <MP3D_SPCORP_Symbol_025+0x28>
 8000750:	7aa0      	ldrb	r0, [r4, #10]
 8000752:	f10a 0a1c 	add.w	sl, sl, #28
 8000756:	b108      	cbz	r0, 800075c <MP3D_SPCORP_Symbol_025+0x28>
 8000758:	f10a 0a1c 	add.w	sl, sl, #28
 800075c:	9803      	ldr	r0, [sp, #12]
 800075e:	0300      	lsls	r0, r0, #12
 8000760:	d510      	bpl.n	8000784 <MP3D_SPCORP_Symbol_025+0x50>
 8000762:	49bb      	ldr	r1, [pc, #748]	; (8000a50 <MP3D_SPCORP_Symbol_015+0x36>)
 8000764:	88a0      	ldrh	r0, [r4, #4]
 8000766:	3910      	subs	r1, #16
 8000768:	5c08      	ldrb	r0, [r1, r0]
 800076a:	ea4f 0190 	mov.w	r1, r0, lsr #2
 800076e:	f88d 1008 	strb.w	r1, [sp, #8]
 8000772:	f88d 1009 	strb.w	r1, [sp, #9]
 8000776:	f000 0003 	and.w	r0, r0, #3
 800077a:	f88d 000a 	strb.w	r0, [sp, #10]
 800077e:	f88d 000b 	strb.w	r0, [sp, #11]
 8000782:	e035      	b.n	80007f0 <MP3D_SPCORP_Symbol_025+0xbc>
 8000784:	9a03      	ldr	r2, [sp, #12]
 8000786:	88a3      	ldrh	r3, [r4, #4]
 8000788:	2000      	movs	r0, #0
 800078a:	06d2      	lsls	r2, r2, #27
 800078c:	d501      	bpl.n	8000792 <MP3D_SPCORP_Symbol_025+0x5e>
 800078e:	b101      	cbz	r1, 8000792 <MP3D_SPCORP_Symbol_025+0x5e>
 8000790:	2001      	movs	r0, #1
 8000792:	f04f 0900 	mov.w	r9, #0
 8000796:	b118      	cbz	r0, 80007a0 <MP3D_SPCORP_Symbol_025+0x6c>
 8000798:	f04f 090c 	mov.w	r9, #12
 800079c:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80007a0:	4fa9      	ldr	r7, [pc, #676]	; (8000a48 <MP3D_SPCORP_Symbol_015+0x2e>)
 80007a2:	f10d 0e08 	add.w	lr, sp, #8
 80007a6:	3f53      	subs	r7, #83	; 0x53
 80007a8:	49a9      	ldr	r1, [pc, #676]	; (8000a50 <MP3D_SPCORP_Symbol_015+0x36>)
 80007aa:	f04f 0801 	mov.w	r8, #1
 80007ae:	315e      	adds	r1, #94	; 0x5e
 80007b0:	eb01 0b09 	add.w	fp, r1, r9
 80007b4:	4618      	mov	r0, r3
 80007b6:	f04f 0103 	mov.w	r1, #3
 80007ba:	4ea3      	ldr	r6, [pc, #652]	; (8000a48 <MP3D_SPCORP_Symbol_015+0x2e>)
 80007bc:	f81b 2001 	ldrb.w	r2, [fp, r1]
 80007c0:	3e5a      	subs	r6, #90	; 0x5a
 80007c2:	fb08 f802 	mul.w	r8, r8, r2
 80007c6:	5cb6      	ldrb	r6, [r6, r2]
 80007c8:	f817 c002 	ldrb.w	ip, [r7, r2]
 80007cc:	4346      	muls	r6, r0
 80007ce:	fa46 f60c 	asr.w	r6, r6, ip
 80007d2:	fb06 0012 	mls	r0, r6, r2, r0
 80007d6:	f80e 0001 	strb.w	r0, [lr, r1]
 80007da:	4630      	mov	r0, r6
 80007dc:	1e49      	subs	r1, r1, #1
 80007de:	d5ec      	bpl.n	80007ba <MP3D_SPCORP_Symbol_025+0x86>
 80007e0:	f109 0904 	add.w	r9, r9, #4
 80007e4:	ebb3 0308 	subs.w	r3, r3, r8
 80007e8:	d5de      	bpl.n	80007a8 <MP3D_SPCORP_Symbol_025+0x74>
 80007ea:	44ca      	add	sl, r9
 80007ec:	f06f 030f 	mvn.w	r3, #15
 80007f0:	9a06      	ldr	r2, [sp, #24]
 80007f2:	e9cd 2300 	strd	r2, r3, [sp]
 80007f6:	4653      	mov	r3, sl
 80007f8:	aa02      	add	r2, sp, #8
 80007fa:	4628      	mov	r0, r5
 80007fc:	9905      	ldr	r1, [sp, #20]
 80007fe:	f000 fc13 	bl	8001028 <ReadScaleFactors>
 8000802:	7d20      	ldrb	r0, [r4, #20]
 8000804:	2302      	movs	r3, #2
 8000806:	0781      	lsls	r1, r0, #30
 8000808:	d400      	bmi.n	800080c <MP3D_SPCORP_Symbol_025+0xd8>
 800080a:	2301      	movs	r3, #1
 800080c:	7ae1      	ldrb	r1, [r4, #11]
 800080e:	b319      	cbz	r1, 8000858 <MP3D_SPCORP_Symbol_025+0x124>
 8000810:	8a60      	ldrh	r0, [r4, #18]
 8000812:	b300      	cbz	r0, 8000856 <MP3D_SPCORP_Symbol_025+0x122>
 8000814:	7aa0      	ldrb	r0, [r4, #10]
 8000816:	f1c3 0203 	rsb	r2, r3, #3
 800081a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800081e:	8a66      	ldrh	r6, [r4, #18]
 8000820:	6807      	ldr	r7, [r0, #0]
 8000822:	f3c6 1682 	ubfx	r6, r6, #6, #3
 8000826:	fa06 f602 	lsl.w	r6, r6, r2
 800082a:	443e      	add	r6, r7
 800082c:	6006      	str	r6, [r0, #0]
 800082e:	8a66      	ldrh	r6, [r4, #18]
 8000830:	6847      	ldr	r7, [r0, #4]
 8000832:	f3c6 06c2 	ubfx	r6, r6, #3, #3
 8000836:	fa06 f602 	lsl.w	r6, r6, r2
 800083a:	443e      	add	r6, r7
 800083c:	6046      	str	r6, [r0, #4]
 800083e:	8a66      	ldrh	r6, [r4, #18]
 8000840:	6887      	ldr	r7, [r0, #8]
 8000842:	f006 0607 	and.w	r6, r6, #7
 8000846:	fa06 f602 	lsl.w	r6, r6, r2
 800084a:	443e      	add	r6, r7
 800084c:	6086      	str	r6, [r0, #8]
 800084e:	f100 000c 	add.w	r0, r0, #12
 8000852:	1ec9      	subs	r1, r1, #3
 8000854:	d1e3      	bne.n	800081e <MP3D_SPCORP_Symbol_025+0xea>
 8000856:	e00d      	b.n	8000874 <MP3D_SPCORP_Symbol_025+0x140>
 8000858:	0740      	lsls	r0, r0, #29
 800085a:	d50b      	bpl.n	8000874 <MP3D_SPCORP_Symbol_025+0x140>
 800085c:	4a7c      	ldr	r2, [pc, #496]	; (8000a50 <MP3D_SPCORP_Symbol_015+0x36>)
 800085e:	2000      	movs	r0, #0
 8000860:	3254      	adds	r2, #84	; 0x54
 8000862:	eb05 0180 	add.w	r1, r5, r0, lsl #2
 8000866:	5c17      	ldrb	r7, [r2, r0]
 8000868:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 800086a:	1c40      	adds	r0, r0, #1
 800086c:	443e      	add	r6, r7
 800086e:	62ce      	str	r6, [r1, #44]	; 0x2c
 8000870:	280a      	cmp	r0, #10
 8000872:	d3f6      	bcc.n	8000862 <MP3D_SPCORP_Symbol_025+0x12e>
 8000874:	79a1      	ldrb	r1, [r4, #6]
 8000876:	9803      	ldr	r0, [sp, #12]
 8000878:	396e      	subs	r1, #110	; 0x6e
 800087a:	f3c0 1042 	ubfx	r0, r0, #5, #3
 800087e:	2803      	cmp	r0, #3
 8000880:	d100      	bne.n	8000884 <MP3D_SPCORP_Symbol_025+0x150>
 8000882:	1e89      	subs	r1, r1, #2
 8000884:	2000      	movs	r0, #0
 8000886:	e004      	b.n	8000892 <MP3D_SPCORP_Symbol_025+0x15e>
 8000888:	682a      	ldr	r2, [r5, #0]
 800088a:	409a      	lsls	r2, r3
 800088c:	1a8a      	subs	r2, r1, r2
 800088e:	c504      	stmia	r5!, {r2}
 8000890:	1c40      	adds	r0, r0, #1
 8000892:	7aa2      	ldrb	r2, [r4, #10]
 8000894:	7ae6      	ldrb	r6, [r4, #11]
 8000896:	4432      	add	r2, r6
 8000898:	4282      	cmp	r2, r0
 800089a:	dcf5      	bgt.n	8000888 <MP3D_SPCORP_Symbol_025+0x154>
 800089c:	b009      	add	sp, #36	; 0x24
 800089e:	e747      	b.n	8000730 <mp3d_UnpackSfb+0xb6>

080008a0 <MP3D_SPCORP_Symbol_026>:
 80008a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008a4:	2500      	movs	r5, #0
 80008a6:	2601      	movs	r6, #1
 80008a8:	f3c2 1b81 	ubfx	fp, r2, #6, #2
 80008ac:	b082      	sub	sp, #8
 80008ae:	4682      	mov	sl, r0
 80008b0:	4604      	mov	r4, r0
 80008b2:	f1bb 0f03 	cmp.w	fp, #3
 80008b6:	d000      	beq.n	80008ba <MP3D_SPCORP_Symbol_026+0x1a>
 80008b8:	2602      	movs	r6, #2
 80008ba:	0310      	lsls	r0, r2, #12
 80008bc:	d50d      	bpl.n	80008da <MP3D_SPCORP_Symbol_026+0x3a>
 80008be:	0076      	lsls	r6, r6, #1
 80008c0:	2109      	movs	r1, #9
 80008c2:	9803      	ldr	r0, [sp, #12]
 80008c4:	f000 fd74 	bl	80013b0 <MP3D_SPCORP_Symbol_006>
 80008c8:	9000      	str	r0, [sp, #0]
 80008ca:	1df1      	adds	r1, r6, #7
 80008cc:	9803      	ldr	r0, [sp, #12]
 80008ce:	f000 fd6f 	bl	80013b0 <MP3D_SPCORP_Symbol_006>
 80008d2:	4605      	mov	r5, r0
 80008d4:	f240 4083 	movw	r0, #1155	; 0x483
 80008d8:	e008      	b.n	80008ec <MP3D_SPCORP_Symbol_026+0x4c>
 80008da:	f106 0108 	add.w	r1, r6, #8
 80008de:	9803      	ldr	r0, [sp, #12]
 80008e0:	f000 fd66 	bl	80013b0 <MP3D_SPCORP_Symbol_006>
 80008e4:	40f0      	lsrs	r0, r6
 80008e6:	9000      	str	r0, [sp, #0]
 80008e8:	f640 1062 	movw	r0, #2402	; 0x962
 80008ec:	4680      	mov	r8, r0
 80008ee:	f04f 0900 	mov.w	r9, #0
 80008f2:	f1bb 0f03 	cmp.w	fp, #3
 80008f6:	d100      	bne.n	80008fa <MP3D_SPCORP_Symbol_026+0x5a>
 80008f8:	012d      	lsls	r5, r5, #4
 80008fa:	210c      	movs	r1, #12
 80008fc:	9803      	ldr	r0, [sp, #12]
 80008fe:	f000 fd57 	bl	80013b0 <MP3D_SPCORP_Symbol_006>
 8000902:	8020      	strh	r0, [r4, #0]
 8000904:	2109      	movs	r1, #9
 8000906:	9803      	ldr	r0, [sp, #12]
 8000908:	f000 fd52 	bl	80013b0 <MP3D_SPCORP_Symbol_006>
 800090c:	f5b0 7f90 	cmp.w	r0, #288	; 0x120
 8000910:	dc2c      	bgt.n	800096c <MP3D_SPCORP_Symbol_026+0xcc>
 8000912:	8060      	strh	r0, [r4, #2]
 8000914:	2108      	movs	r1, #8
 8000916:	9803      	ldr	r0, [sp, #12]
 8000918:	f000 fd4a 	bl	80013b0 <MP3D_SPCORP_Symbol_006>
 800091c:	71a0      	strb	r0, [r4, #6]
 800091e:	f3c8 2103 	ubfx	r1, r8, #8, #4
 8000922:	9803      	ldr	r0, [sp, #12]
 8000924:	f000 fd44 	bl	80013b0 <MP3D_SPCORP_Symbol_006>
 8000928:	80a0      	strh	r0, [r4, #4]
 800092a:	ebaa 0704 	sub.w	r7, sl, r4
 800092e:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8000932:	7260      	strb	r0, [r4, #9]
 8000934:	2016      	movs	r0, #22
 8000936:	72a0      	strb	r0, [r4, #10]
 8000938:	f884 900b 	strb.w	r9, [r4, #11]
 800093c:	2101      	movs	r1, #1
 800093e:	9803      	ldr	r0, [sp, #12]
 8000940:	f000 fd36 	bl	80013b0 <MP3D_SPCORP_Symbol_006>
 8000944:	b3a0      	cbz	r0, 80009b0 <MP3D_SPCORP_Symbol_026+0x110>
 8000946:	2103      	movs	r1, #3
 8000948:	9803      	ldr	r0, [sp, #12]
 800094a:	f000 fd31 	bl	80013b0 <MP3D_SPCORP_Symbol_006>
 800094e:	f000 0101 	and.w	r1, r0, #1
 8000952:	7221      	strb	r1, [r4, #8]
 8000954:	1040      	asrs	r0, r0, #1
 8000956:	71e0      	strb	r0, [r4, #7]
 8000958:	f04f 0207 	mov.w	r2, #7
 800095c:	73e2      	strb	r2, [r4, #15]
 800095e:	f04f 023f 	mov.w	r2, #63	; 0x3f
 8000962:	7422      	strb	r2, [r4, #16]
 8000964:	d002      	beq.n	800096c <MP3D_SPCORP_Symbol_026+0xcc>
 8000966:	2802      	cmp	r0, #2
 8000968:	d004      	beq.n	8000974 <MP3D_SPCORP_Symbol_026+0xd4>
 800096a:	e00e      	b.n	800098a <MP3D_SPCORP_Symbol_026+0xea>
 800096c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000970:	b005      	add	sp, #20
 8000972:	e6dd      	b.n	8000730 <mp3d_UnpackSfb+0xb6>
 8000974:	f640 700f 	movw	r0, #3855	; 0xf0f
 8000978:	4005      	ands	r5, r0
 800097a:	b189      	cbz	r1, 80009a0 <MP3D_SPCORP_Symbol_026+0x100>
 800097c:	3758      	adds	r7, #88	; 0x58
 800097e:	7267      	strb	r7, [r4, #9]
 8000980:	f3c8 1003 	ubfx	r0, r8, #4, #4
 8000984:	72a0      	strb	r0, [r4, #10]
 8000986:	201e      	movs	r0, #30
 8000988:	72e0      	strb	r0, [r4, #11]
 800098a:	210a      	movs	r1, #10
 800098c:	9803      	ldr	r0, [sp, #12]
 800098e:	f000 fd0f 	bl	80013b0 <MP3D_SPCORP_Symbol_006>
 8000992:	0147      	lsls	r7, r0, #5
 8000994:	2109      	movs	r1, #9
 8000996:	9803      	ldr	r0, [sp, #12]
 8000998:	f000 fd0a 	bl	80013b0 <MP3D_SPCORP_Symbol_006>
 800099c:	8260      	strh	r0, [r4, #18]
 800099e:	e01d      	b.n	80009dc <MP3D_SPCORP_Symbol_026+0x13c>
 80009a0:	2008      	movs	r0, #8
 80009a2:	73e0      	strb	r0, [r4, #15]
 80009a4:	3797      	adds	r7, #151	; 0x97
 80009a6:	7267      	strb	r7, [r4, #9]
 80009a8:	f884 900a 	strb.w	r9, [r4, #10]
 80009ac:	2027      	movs	r0, #39	; 0x27
 80009ae:	e7eb      	b.n	8000988 <MP3D_SPCORP_Symbol_026+0xe8>
 80009b0:	e7ff      	b.n	80009b2 <MP3D_SPCORP_Symbol_026+0x112>
 80009b2:	f884 9007 	strb.w	r9, [r4, #7]
 80009b6:	f884 9008 	strb.w	r9, [r4, #8]
 80009ba:	210f      	movs	r1, #15
 80009bc:	9803      	ldr	r0, [sp, #12]
 80009be:	f000 fcf7 	bl	80013b0 <MP3D_SPCORP_Symbol_006>
 80009c2:	4607      	mov	r7, r0
 80009c4:	2104      	movs	r1, #4
 80009c6:	9803      	ldr	r0, [sp, #12]
 80009c8:	f000 fcf2 	bl	80013b0 <MP3D_SPCORP_Symbol_006>
 80009cc:	73e0      	strb	r0, [r4, #15]
 80009ce:	2103      	movs	r1, #3
 80009d0:	9803      	ldr	r0, [sp, #12]
 80009d2:	f000 fced 	bl	80013b0 <MP3D_SPCORP_Symbol_006>
 80009d6:	7420      	strb	r0, [r4, #16]
 80009d8:	203f      	movs	r0, #63	; 0x3f
 80009da:	7460      	strb	r0, [r4, #17]
 80009dc:	0ab8      	lsrs	r0, r7, #10
 80009de:	7320      	strb	r0, [r4, #12]
 80009e0:	f3c7 1044 	ubfx	r0, r7, #5, #5
 80009e4:	7360      	strb	r0, [r4, #13]
 80009e6:	f007 001f 	and.w	r0, r7, #31
 80009ea:	73a0      	strb	r0, [r4, #14]
 80009ec:	88a0      	ldrh	r0, [r4, #4]
 80009ee:	2704      	movs	r7, #4
 80009f0:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80009f4:	d200      	bcs.n	80009f8 <MP3D_SPCORP_Symbol_026+0x158>
 80009f6:	2700      	movs	r7, #0
 80009f8:	f008 010f 	and.w	r1, r8, #15
 80009fc:	9803      	ldr	r0, [sp, #12]
 80009fe:	f000 fcd7 	bl	80013b0 <MP3D_SPCORP_Symbol_006>
 8000a02:	4438      	add	r0, r7
 8000a04:	7520      	strb	r0, [r4, #20]
 8000a06:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8000a0a:	7560      	strb	r0, [r4, #21]
 8000a0c:	012d      	lsls	r5, r5, #4
 8000a0e:	3416      	adds	r4, #22
 8000a10:	1e76      	subs	r6, r6, #1
 8000a12:	f47f af6e 	bne.w	80008f2 <MP3D_SPCORP_Symbol_026+0x52>
 8000a16:	9800      	ldr	r0, [sp, #0]
 8000a18:	e7aa      	b.n	8000970 <MP3D_SPCORP_Symbol_026+0xd0>

08000a1a <MP3D_SPCORP_Symbol_015>:
 8000a1a:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000a1e:	f500 57ef 	add.w	r7, r0, #7648	; 0x1de0
 8000a22:	4604      	mov	r4, r0
 8000a24:	f850 1bd8 	ldr.w	r1, [r0], #216
 8000a28:	46bb      	mov	fp, r7
 8000a2a:	9002      	str	r0, [sp, #8]
 8000a2c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8000a30:	da39      	bge.n	8000aa6 <MP3D_SPCORP_Symbol_015+0x8c>
 8000a32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a36:	f7ff fcd3 	bl	80003e0 <MP3D_SPCORP_Symbol_004>
 8000a3a:	b158      	cbz	r0, 8000a54 <MP3D_SPCORP_Symbol_015+0x3a>
 8000a3c:	f06f 0001 	mvn.w	r0, #1
 8000a40:	b004      	add	sp, #16
 8000a42:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 8000a46:	0000      	.short	0x0000
 8000a48:	080113dc 	.word	0x080113dc
 8000a4c:	40023000 	.word	0x40023000
 8000a50:	08011616 	.word	0x08011616
 8000a54:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 8000a58:	f3c0 41c0 	ubfx	r1, r0, #19, #1
 8000a5c:	f3c0 5200 	ubfx	r2, r0, #20, #1
 8000a60:	4411      	add	r1, r2
 8000a62:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000a66:	f3c0 2081 	ubfx	r0, r0, #10, #2
 8000a6a:	180d      	adds	r5, r1, r0
 8000a6c:	f994 00d7 	ldrsb.w	r0, [r4, #215]	; 0xd7
 8000a70:	42a8      	cmp	r0, r5
 8000a72:	d006      	beq.n	8000a82 <MP3D_SPCORP_Symbol_015+0x68>
 8000a74:	4629      	mov	r1, r5
 8000a76:	f104 0070 	add.w	r0, r4, #112	; 0x70
 8000a7a:	f7ff fdfe 	bl	800067a <mp3d_UnpackSfb>
 8000a7e:	f884 50d7 	strb.w	r5, [r4, #215]	; 0xd7
 8000a82:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
 8000a86:	f104 0018 	add.w	r0, r4, #24
 8000a8a:	9902      	ldr	r1, [sp, #8]
 8000a8c:	f7ff ff08 	bl	80008a0 <MP3D_SPCORP_Symbol_026>
 8000a90:	1e01      	subs	r1, r0, #0
 8000a92:	da02      	bge.n	8000a9a <MP3D_SPCORP_Symbol_015+0x80>
 8000a94:	f06f 0002 	mvn.w	r0, #2
 8000a98:	e7d2      	b.n	8000a40 <MP3D_SPCORP_Symbol_015+0x26>
 8000a9a:	9802      	ldr	r0, [sp, #8]
 8000a9c:	f7ff fc2c 	bl	80002f8 <MP3D_SPCORP_Symbol_002>
 8000aa0:	b1f8      	cbz	r0, 8000ae2 <MP3D_SPCORP_Symbol_015+0xc8>
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	6020      	str	r0, [r4, #0]
 8000aa6:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
 8000aaa:	2001      	movs	r0, #1
 8000aac:	f3c1 1181 	ubfx	r1, r1, #6, #2
 8000ab0:	2903      	cmp	r1, #3
 8000ab2:	d000      	beq.n	8000ab6 <MP3D_SPCORP_Symbol_015+0x9c>
 8000ab4:	2002      	movs	r0, #2
 8000ab6:	4680      	mov	r8, r0
 8000ab8:	6820      	ldr	r0, [r4, #0]
 8000aba:	f8df 9620 	ldr.w	r9, [pc, #1568]	; 80010dc <L12_GetSubBandAllocTable+0x2e>
 8000abe:	ea4f 0a60 	mov.w	sl, r0, asr #1
 8000ac2:	f000 0501 	and.w	r5, r0, #1
 8000ac6:	fb0a 5008 	mla	r0, sl, r8, r5
 8000aca:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8000ace:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8000ad2:	eb04 0640 	add.w	r6, r4, r0, lsl #1
 8000ad6:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 8000ada:	3618      	adds	r6, #24
 8000adc:	eb07 2700 	add.w	r7, r7, r0, lsl #8
 8000ae0:	e042      	b.n	8000b68 <MP3D_SPCORP_Symbol_015+0x14e>
 8000ae2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ae6:	e7ab      	b.n	8000a40 <MP3D_SPCORP_Symbol_015+0x26>
 8000ae8:	7ab0      	ldrb	r0, [r6, #10]
 8000aea:	7af1      	ldrb	r1, [r6, #11]
 8000aec:	4408      	add	r0, r1
 8000aee:	eba7 0080 	sub.w	r0, r7, r0, lsl #2
 8000af2:	f600 00fc 	addw	r0, r0, #2300	; 0x8fc
 8000af6:	9003      	str	r0, [sp, #12]
 8000af8:	8831      	ldrh	r1, [r6, #0]
 8000afa:	9802      	ldr	r0, [sp, #8]
 8000afc:	f7ff fc70 	bl	80003e0 <MP3D_SPCORP_Symbol_004>
 8000b00:	2800      	cmp	r0, #0
 8000b02:	d19d      	bne.n	8000a40 <MP3D_SPCORP_Symbol_015+0x26>
 8000b04:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
 8000b08:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 8000b0c:	7d72      	ldrb	r2, [r6, #21]
 8000b0e:	4420      	add	r0, r4
 8000b10:	f642 71e4 	movw	r1, #12260	; 0x2fe4
 8000b14:	4408      	add	r0, r1
 8000b16:	e9cd 2500 	strd	r2, r5, [sp]
 8000b1a:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8000b1e:	4632      	mov	r2, r6
 8000b20:	f7ff fe08 	bl	8000734 <MP3D_SPCORP_Symbol_025>
 8000b24:	2101      	movs	r1, #1
 8000b26:	f8c9 1008 	str.w	r1, [r9, #8]
 8000b2a:	f8d9 0000 	ldr.w	r0, [r9]
 8000b2e:	1c40      	adds	r0, r0, #1
 8000b30:	d1f9      	bne.n	8000b26 <MP3D_SPCORP_Symbol_015+0x10c>
 8000b32:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8000b36:	4632      	mov	r2, r6
 8000b38:	4638      	mov	r0, r7
 8000b3a:	f000 feaf 	bl	800189c <MP3D_SPCORP_Symbol_027>
 8000b3e:	1bc0      	subs	r0, r0, r7
 8000b40:	eb04 0145 	add.w	r1, r4, r5, lsl #1
 8000b44:	1080      	asrs	r0, r0, #2
 8000b46:	8208      	strh	r0, [r1, #16]
 8000b48:	9802      	ldr	r0, [sp, #8]
 8000b4a:	f7ff fc11 	bl	8000370 <MP3D_SPCORP_Symbol_003>
 8000b4e:	f5c8 7110 	rsb	r1, r8, #576	; 0x240
 8000b52:	f8c9 1000 	str.w	r1, [r9]
 8000b56:	6821      	ldr	r1, [r4, #0]
 8000b58:	f1c8 0003 	rsb	r0, r8, #3
 8000b5c:	4408      	add	r0, r1
 8000b5e:	1c6d      	adds	r5, r5, #1
 8000b60:	3616      	adds	r6, #22
 8000b62:	f507 6710 	add.w	r7, r7, #2304	; 0x900
 8000b66:	6020      	str	r0, [r4, #0]
 8000b68:	4545      	cmp	r5, r8
 8000b6a:	dbbd      	blt.n	8000ae8 <MP3D_SPCORP_Symbol_015+0xce>
 8000b6c:	f8d9 0000 	ldr.w	r0, [r9]
 8000b70:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8000b74:	f000 0603 	and.w	r6, r0, #3
 8000b78:	fb0a f008 	mul.w	r0, sl, r8
 8000b7c:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8000b80:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8000b84:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8000b88:	3518      	adds	r5, #24
 8000b8a:	f3c3 1081 	ubfx	r0, r3, #6, #2
 8000b8e:	2801      	cmp	r0, #1
 8000b90:	d117      	bne.n	8000bc2 <MP3D_SPCORP_Symbol_015+0x1a8>
 8000b92:	f013 0f30 	tst.w	r3, #48	; 0x30
 8000b96:	d014      	beq.n	8000bc2 <MP3D_SPCORP_Symbol_015+0x1a8>
 8000b98:	8a21      	ldrh	r1, [r4, #16]
 8000b9a:	8a60      	ldrh	r0, [r4, #18]
 8000b9c:	4281      	cmp	r1, r0
 8000b9e:	d800      	bhi.n	8000ba2 <MP3D_SPCORP_Symbol_015+0x188>
 8000ba0:	4601      	mov	r1, r0
 8000ba2:	8261      	strh	r1, [r4, #18]
 8000ba4:	8221      	strh	r1, [r4, #16]
 8000ba6:	b161      	cbz	r1, 8000bc2 <MP3D_SPCORP_Symbol_015+0x1a8>
 8000ba8:	06d8      	lsls	r0, r3, #27
 8000baa:	d507      	bpl.n	8000bbc <MP3D_SPCORP_Symbol_015+0x1a2>
 8000bac:	f243 000b 	movw	r0, #12299	; 0x300b
 8000bb0:	1821      	adds	r1, r4, r0
 8000bb2:	462a      	mov	r2, r5
 8000bb4:	4658      	mov	r0, fp
 8000bb6:	f001 fcc5 	bl	8002544 <MP3D_SPCORP_Symbol_029>
 8000bba:	e002      	b.n	8000bc2 <MP3D_SPCORP_Symbol_015+0x1a8>
 8000bbc:	4658      	mov	r0, fp
 8000bbe:	f001 fc73 	bl	80024a8 <MP3D_SPCORP_Symbol_031>
 8000bc2:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
 8000bc6:	e9cd 6001 	strd	r6, r0, [sp, #4]
 8000bca:	f04f 0900 	mov.w	r9, #0
 8000bce:	e067      	b.n	8000ca0 <MP3D_SPCORP_Symbol_015+0x286>
 8000bd0:	7a28      	ldrb	r0, [r5, #8]
 8000bd2:	2600      	movs	r6, #0
 8000bd4:	b128      	cbz	r0, 8000be2 <MP3D_SPCORP_Symbol_015+0x1c8>
 8000bd6:	f894 00d7 	ldrb.w	r0, [r4, #215]	; 0xd7
 8000bda:	2602      	movs	r6, #2
 8000bdc:	2802      	cmp	r0, #2
 8000bde:	d100      	bne.n	8000be2 <MP3D_SPCORP_Symbol_015+0x1c8>
 8000be0:	2604      	movs	r6, #4
 8000be2:	7ae8      	ldrb	r0, [r5, #11]
 8000be4:	b1c8      	cbz	r0, 8000c1a <MP3D_SPCORP_Symbol_015+0x200>
 8000be6:	eb04 0849 	add.w	r8, r4, r9, lsl #1
 8000bea:	4270      	negs	r0, r6
 8000bec:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8000bf0:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8000bf4:	eb01 0240 	add.w	r2, r1, r0, lsl #1
 8000bf8:	7a68      	ldrb	r0, [r5, #9]
 8000bfa:	7aa9      	ldrb	r1, [r5, #10]
 8000bfc:	eb06 07c6 	add.w	r7, r6, r6, lsl #3
 8000c00:	4408      	add	r0, r1
 8000c02:	1941      	adds	r1, r0, r5
 8000c04:	f1a6 0a01 	sub.w	sl, r6, #1
 8000c08:	eb0b 00c7 	add.w	r0, fp, r7, lsl #3
 8000c0c:	f001 fbf2 	bl	80023f4 <MP3D_SPCORP_Symbol_032>
 8000c10:	eb00 0147 	add.w	r1, r0, r7, lsl #1
 8000c14:	f8a8 1010 	strh.w	r1, [r8, #16]
 8000c18:	e001      	b.n	8000c1e <MP3D_SPCORP_Symbol_015+0x204>
 8000c1a:	f04f 0a1f 	mov.w	sl, #31
 8000c1e:	eb04 0049 	add.w	r0, r4, r9, lsl #1
 8000c22:	8a01      	ldrh	r1, [r0, #16]
 8000c24:	8a82      	ldrh	r2, [r0, #20]
 8000c26:	4291      	cmp	r1, r2
 8000c28:	d900      	bls.n	8000c2c <MP3D_SPCORP_Symbol_015+0x212>
 8000c2a:	460a      	mov	r2, r1
 8000c2c:	8281      	strh	r1, [r0, #20]
 8000c2e:	3211      	adds	r2, #17
 8000c30:	f640 6039 	movw	r0, #3641	; 0xe39
 8000c34:	4342      	muls	r2, r0
 8000c36:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000c3a:	45d0      	cmp	r8, sl
 8000c3c:	da00      	bge.n	8000c40 <MP3D_SPCORP_Symbol_015+0x226>
 8000c3e:	46c2      	mov	sl, r8
 8000c40:	9802      	ldr	r0, [sp, #8]
 8000c42:	f8d0 7d94 	ldr.w	r7, [r0, #3476]	; 0xd94
 8000c46:	b14f      	cbz	r7, 8000c5c <MP3D_SPCORP_Symbol_015+0x242>
 8000c48:	79e8      	ldrb	r0, [r5, #7]
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8000c50:	2802      	cmp	r0, #2
 8000c52:	d000      	beq.n	8000c56 <MP3D_SPCORP_Symbol_015+0x23c>
 8000c54:	2100      	movs	r1, #0
 8000c56:	464a      	mov	r2, r9
 8000c58:	4658      	mov	r0, fp
 8000c5a:	47b8      	blx	r7
 8000c5c:	f1ba 0000 	subs.w	r0, sl, #0
 8000c60:	dd03      	ble.n	8000c6a <MP3D_SPCORP_Symbol_015+0x250>
 8000c62:	4601      	mov	r1, r0
 8000c64:	4658      	mov	r0, fp
 8000c66:	f000 fd25 	bl	80016b4 <MP3D_SPCORP_Symbol_001>
 8000c6a:	4640      	mov	r0, r8
 8000c6c:	f1b8 0f20 	cmp.w	r8, #32
 8000c70:	da01      	bge.n	8000c76 <MP3D_SPCORP_Symbol_015+0x25c>
 8000c72:	1c40      	adds	r0, r0, #1
 8000c74:	4680      	mov	r8, r0
 8000c76:	45b0      	cmp	r8, r6
 8000c78:	dc00      	bgt.n	8000c7c <MP3D_SPCORP_Symbol_015+0x262>
 8000c7a:	1c70      	adds	r0, r6, #1
 8000c7c:	9000      	str	r0, [sp, #0]
 8000c7e:	eb09 00c9 	add.w	r0, r9, r9, lsl #3
 8000c82:	eb04 11c0 	add.w	r1, r4, r0, lsl #7
 8000c86:	79eb      	ldrb	r3, [r5, #7]
 8000c88:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8000c8c:	4632      	mov	r2, r6
 8000c8e:	f1ab 0048 	sub.w	r0, fp, #72	; 0x48
 8000c92:	f001 fb7f 	bl	8002394 <MP3D_SPCORP_Symbol_028>
 8000c96:	f109 0901 	add.w	r9, r9, #1
 8000c9a:	3516      	adds	r5, #22
 8000c9c:	f50b 6b10 	add.w	fp, fp, #2304	; 0x900
 8000ca0:	9901      	ldr	r1, [sp, #4]
 8000ca2:	4589      	cmp	r9, r1
 8000ca4:	db94      	blt.n	8000bd0 <MP3D_SPCORP_Symbol_015+0x1b6>
 8000ca6:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 8000caa:	0300      	lsls	r0, r0, #12
 8000cac:	6820      	ldr	r0, [r4, #0]
 8000cae:	d502      	bpl.n	8000cb6 <MP3D_SPCORP_Symbol_015+0x29c>
 8000cb0:	2804      	cmp	r0, #4
 8000cb2:	d002      	beq.n	8000cba <MP3D_SPCORP_Symbol_015+0x2a0>
 8000cb4:	e004      	b.n	8000cc0 <MP3D_SPCORP_Symbol_015+0x2a6>
 8000cb6:	2802      	cmp	r0, #2
 8000cb8:	d102      	bne.n	8000cc0 <MP3D_SPCORP_Symbol_015+0x2a6>
 8000cba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cbe:	6020      	str	r0, [r4, #0]
 8000cc0:	f44f 7010 	mov.w	r0, #576	; 0x240
 8000cc4:	e6bc      	b.n	8000a40 <MP3D_SPCORP_Symbol_015+0x26>

08000cc6 <L12_ReadScaleInfo>:
 8000cc6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cca:	4683      	mov	fp, r0
 8000ccc:	460c      	mov	r4, r1
 8000cce:	6900      	ldr	r0, [r0, #16]
 8000cd0:	f000 f9ed 	bl	80010ae <L12_GetSubBandAllocTable>
 8000cd4:	4605      	mov	r5, r0
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4658      	mov	r0, fp
 8000cda:	f7ff fb0d 	bl	80002f8 <MP3D_SPCORP_Symbol_002>
 8000cde:	f04f 0a00 	mov.w	sl, #0
 8000ce2:	4eff      	ldr	r6, [pc, #1020]	; (80010e0 <L12_GetSubBandAllocTable+0x32>)
 8000ce4:	f894 9000 	ldrb.w	r9, [r4]
 8000ce8:	1ce7      	adds	r7, r4, #3
 8000cea:	46d0      	mov	r8, sl
 8000cec:	f1a8 0801 	sub.w	r8, r8, #1
 8000cf0:	f1b8 0f00 	cmp.w	r8, #0
 8000cf4:	dc06      	bgt.n	8000d04 <L12_ReadScaleInfo+0x3e>
 8000cf6:	f895 8002 	ldrb.w	r8, [r5, #2]
 8000cfa:	f895 a001 	ldrb.w	sl, [r5, #1]
 8000cfe:	f915 0b03 	ldrsb.w	r0, [r5], #3
 8000d02:	4406      	add	r6, r0
 8000d04:	4651      	mov	r1, sl
 8000d06:	4658      	mov	r0, fp
 8000d08:	f000 fb52 	bl	80013b0 <MP3D_SPCORP_Symbol_006>
 8000d0c:	5c30      	ldrb	r0, [r6, r0]
 8000d0e:	f807 0b01 	strb.w	r0, [r7], #1
 8000d12:	78a2      	ldrb	r2, [r4, #2]
 8000d14:	454a      	cmp	r2, r9
 8000d16:	da04      	bge.n	8000d22 <L12_ReadScaleInfo+0x5c>
 8000d18:	4651      	mov	r1, sl
 8000d1a:	4658      	mov	r0, fp
 8000d1c:	f000 fb48 	bl	80013b0 <MP3D_SPCORP_Symbol_006>
 8000d20:	5c30      	ldrb	r0, [r6, r0]
 8000d22:	7861      	ldrb	r1, [r4, #1]
 8000d24:	b901      	cbnz	r1, 8000d28 <L12_ReadScaleInfo+0x62>
 8000d26:	2000      	movs	r0, #0
 8000d28:	f807 0b01 	strb.w	r0, [r7], #1
 8000d2c:	f1b9 0901 	subs.w	r9, r9, #1
 8000d30:	d1dc      	bne.n	8000cec <L12_ReadScaleInfo+0x26>
 8000d32:	7820      	ldrb	r0, [r4, #0]
 8000d34:	f104 0543 	add.w	r5, r4, #67	; 0x43
 8000d38:	0047      	lsls	r7, r0, #1
 8000d3a:	1ce6      	adds	r6, r4, #3
 8000d3c:	46a9      	mov	r9, r5
 8000d3e:	f04f 0802 	mov.w	r8, #2
 8000d42:	f816 1b01 	ldrb.w	r1, [r6], #1
 8000d46:	2006      	movs	r0, #6
 8000d48:	b151      	cbz	r1, 8000d60 <L12_ReadScaleInfo+0x9a>
 8000d4a:	f8db 1010 	ldr.w	r1, [fp, #16]
 8000d4e:	4640      	mov	r0, r8
 8000d50:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8000d54:	0789      	lsls	r1, r1, #30
 8000d56:	d003      	beq.n	8000d60 <L12_ReadScaleInfo+0x9a>
 8000d58:	2102      	movs	r1, #2
 8000d5a:	4658      	mov	r0, fp
 8000d5c:	f000 fb28 	bl	80013b0 <MP3D_SPCORP_Symbol_006>
 8000d60:	f805 0b01 	strb.w	r0, [r5], #1
 8000d64:	1e7f      	subs	r7, r7, #1
 8000d66:	d1ec      	bne.n	8000d42 <L12_ReadScaleInfo+0x7c>
 8000d68:	f104 0384 	add.w	r3, r4, #132	; 0x84
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	7820      	ldrb	r0, [r4, #0]
 8000d70:	464a      	mov	r2, r9
 8000d72:	0043      	lsls	r3, r0, #1
 8000d74:	1ce1      	adds	r1, r4, #3
 8000d76:	4658      	mov	r0, fp
 8000d78:	f000 f9db 	bl	8001132 <L12_ReadScaleFactors>
 8000d7c:	78a1      	ldrb	r1, [r4, #2]
 8000d7e:	1ce0      	adds	r0, r4, #3
 8000d80:	b141      	cbz	r1, 8000d94 <L12_ReadScaleInfo+0xce>
 8000d82:	7862      	ldrb	r2, [r4, #1]
 8000d84:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8000d88:	1c40      	adds	r0, r0, #1
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f800 2b02 	strb.w	r2, [r0], #2
 8000d90:	1e49      	subs	r1, r1, #1
 8000d92:	d1fb      	bne.n	8000d8c <L12_ReadScaleInfo+0xc6>
 8000d94:	2000      	movs	r0, #0
 8000d96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000d9a <MP3D_SPCORP_Symbol_014>:
 8000d9a:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000d9e:	4604      	mov	r4, r0
 8000da0:	f100 08d8 	add.w	r8, r0, #216	; 0xd8
 8000da4:	f500 7756 	add.w	r7, r0, #856	; 0x358
 8000da8:	f641 5098 	movw	r0, #7576	; 0x1d98
 8000dac:	1826      	adds	r6, r4, r0
 8000dae:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8000db2:	2501      	movs	r5, #1
 8000db4:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8000db8:	46b1      	mov	r9, r6
 8000dba:	0780      	lsls	r0, r0, #30
 8000dbc:	d000      	beq.n	8000dc0 <MP3D_SPCORP_Symbol_014+0x26>
 8000dbe:	2503      	movs	r5, #3
 8000dc0:	6820      	ldr	r0, [r4, #0]
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	da11      	bge.n	8000dea <MP3D_SPCORP_Symbol_014+0x50>
 8000dc6:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000dca:	2d01      	cmp	r5, #1
 8000dcc:	d001      	beq.n	8000dd2 <MP3D_SPCORP_Symbol_014+0x38>
 8000dce:	f240 517c 	movw	r1, #1404	; 0x57c
 8000dd2:	4640      	mov	r0, r8
 8000dd4:	f7ff fb04 	bl	80003e0 <MP3D_SPCORP_Symbol_004>
 8000dd8:	2800      	cmp	r0, #0
 8000dda:	d141      	bne.n	8000e60 <MP3D_SPCORP_Symbol_014+0xc6>
 8000ddc:	4639      	mov	r1, r7
 8000dde:	4640      	mov	r0, r8
 8000de0:	f7ff ff71 	bl	8000cc6 <L12_ReadScaleInfo>
 8000de4:	2800      	cmp	r0, #0
 8000de6:	d13b      	bne.n	8000e60 <MP3D_SPCORP_Symbol_014+0xc6>
 8000de8:	6020      	str	r0, [r4, #0]
 8000dea:	2d01      	cmp	r5, #1
 8000dec:	d101      	bne.n	8000df2 <MP3D_SPCORP_Symbol_014+0x58>
 8000dee:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8000df2:	f06f 0b02 	mvn.w	fp, #2
 8000df6:	f44f 5a90 	mov.w	sl, #4608	; 0x1200
 8000dfa:	4640      	mov	r0, r8
 8000dfc:	f7ff fc21 	bl	8000642 <MP3D_SPCORP_Symbol_008>
 8000e00:	2800      	cmp	r0, #0
 8000e02:	db2c      	blt.n	8000e5e <MP3D_SPCORP_Symbol_014+0xc4>
 8000e04:	4651      	mov	r1, sl
 8000e06:	4550      	cmp	r0, sl
 8000e08:	dc00      	bgt.n	8000e0c <MP3D_SPCORP_Symbol_014+0x72>
 8000e0a:	4601      	mov	r1, r0
 8000e0c:	4640      	mov	r0, r8
 8000e0e:	f7ff fae7 	bl	80003e0 <MP3D_SPCORP_Symbol_004>
 8000e12:	2800      	cmp	r0, #0
 8000e14:	d124      	bne.n	8000e60 <MP3D_SPCORP_Symbol_014+0xc6>
 8000e16:	462b      	mov	r3, r5
 8000e18:	463a      	mov	r2, r7
 8000e1a:	4641      	mov	r1, r8
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	f000 f9f9 	bl	8001214 <L12_DequantizeGranule>
 8000e22:	4606      	mov	r6, r0
 8000e24:	6820      	ldr	r0, [r4, #0]
 8000e26:	1d00      	adds	r0, r0, #4
 8000e28:	6020      	str	r0, [r4, #0]
 8000e2a:	280c      	cmp	r0, #12
 8000e2c:	da01      	bge.n	8000e32 <MP3D_SPCORP_Symbol_014+0x98>
 8000e2e:	2d01      	cmp	r5, #1
 8000e30:	d0e3      	beq.n	8000dfa <MP3D_SPCORP_Symbol_014+0x60>
 8000e32:	6821      	ldr	r1, [r4, #0]
 8000e34:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8000e38:	1089      	asrs	r1, r1, #2
 8000e3a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8000e3e:	3908      	subs	r1, #8
 8000e40:	464a      	mov	r2, r9
 8000e42:	4638      	mov	r0, r7
 8000e44:	f000 f9a9 	bl	800119a <L12_ApplyScf384>
 8000e48:	6820      	ldr	r0, [r4, #0]
 8000e4a:	280c      	cmp	r0, #12
 8000e4c:	d102      	bne.n	8000e54 <MP3D_SPCORP_Symbol_014+0xba>
 8000e4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e52:	6020      	str	r0, [r4, #0]
 8000e54:	4640      	mov	r0, r8
 8000e56:	f7ff fbf4 	bl	8000642 <MP3D_SPCORP_Symbol_008>
 8000e5a:	2800      	cmp	r0, #0
 8000e5c:	da01      	bge.n	8000e62 <MP3D_SPCORP_Symbol_014+0xc8>
 8000e5e:	4658      	mov	r0, fp
 8000e60:	e5ef      	b.n	8000a42 <MP3D_SPCORP_Symbol_015+0x28>
 8000e62:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8000e66:	e5ec      	b.n	8000a42 <MP3D_SPCORP_Symbol_015+0x28>

08000e68 <MP3D_SPCORP_Symbol_034>:
 8000e68:	2200      	movs	r2, #0
 8000e6a:	c004      	stmia	r0!, {r2}
 8000e6c:	1e49      	subs	r1, r1, #1
 8000e6e:	d1fc      	bne.n	8000e6a <MP3D_SPCORP_Symbol_034+0x2>
 8000e70:	4770      	bx	lr

08000e72 <OutputInternalPCMBuffer>:
 8000e72:	b570      	push	{r4, r5, r6, lr}
 8000e74:	4605      	mov	r5, r0
 8000e76:	6880      	ldr	r0, [r0, #8]
 8000e78:	460c      	mov	r4, r1
 8000e7a:	4616      	mov	r6, r2
 8000e7c:	4290      	cmp	r0, r2
 8000e7e:	d800      	bhi.n	8000e82 <OutputInternalPCMBuffer+0x10>
 8000e80:	4606      	mov	r6, r0
 8000e82:	1b80      	subs	r0, r0, r6
 8000e84:	60a8      	str	r0, [r5, #8]
 8000e86:	b1b6      	cbz	r6, 8000eb6 <OutputInternalPCMBuffer+0x44>
 8000e88:	f641 5098 	movw	r0, #7576	; 0x1d98
 8000e8c:	4633      	mov	r3, r6
 8000e8e:	4428      	add	r0, r5
 8000e90:	686a      	ldr	r2, [r5, #4]
 8000e92:	f000 fb41 	bl	8001518 <MP3D_SPCORP_Symbol_013>
 8000e96:	6868      	ldr	r0, [r5, #4]
 8000e98:	4430      	add	r0, r6
 8000e9a:	6068      	str	r0, [r5, #4]
 8000e9c:	f8d5 00e8 	ldr.w	r0, [r5, #232]	; 0xe8
 8000ea0:	f3c0 1081 	ubfx	r0, r0, #6, #2
 8000ea4:	2803      	cmp	r0, #3
 8000ea6:	d106      	bne.n	8000eb6 <OutputInternalPCMBuffer+0x44>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e002      	b.n	8000eb2 <OutputInternalPCMBuffer+0x40>
 8000eac:	8821      	ldrh	r1, [r4, #0]
 8000eae:	8061      	strh	r1, [r4, #2]
 8000eb0:	1d24      	adds	r4, r4, #4
 8000eb2:	1e40      	subs	r0, r0, #1
 8000eb4:	d2fa      	bcs.n	8000eac <OutputInternalPCMBuffer+0x3a>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	bd70      	pop	{r4, r5, r6, pc}

08000eba <SpiritMP3DecoderInit>:
 8000eba:	b570      	push	{r4, r5, r6, lr}
 8000ebc:	460d      	mov	r5, r1
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	4616      	mov	r6, r2
 8000ec2:	f640 410e 	movw	r1, #3086	; 0xc0e
 8000ec6:	f7ff ffcf 	bl	8000e68 <MP3D_SPCORP_Symbol_034>
 8000eca:	4884      	ldr	r0, [pc, #528]	; (80010dc <L12_GetSubBandAllocTable+0x2e>)
 8000ecc:	2101      	movs	r1, #1
 8000ece:	6081      	str	r1, [r0, #8]
 8000ed0:	6802      	ldr	r2, [r0, #0]
 8000ed2:	1c52      	adds	r2, r2, #1
 8000ed4:	d1fb      	bne.n	8000ece <SpiritMP3DecoderInit+0x14>
 8000ed6:	f604 4094 	addw	r0, r4, #3220	; 0xc94
 8000eda:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8000ede:	60e0      	str	r0, [r4, #12]
 8000ee0:	f504 708b 	add.w	r0, r4, #278	; 0x116
 8000ee4:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
 8000ee8:	2010      	movs	r0, #16
 8000eea:	f8c4 00dc 	str.w	r0, [r4, #220]	; 0xdc
 8000eee:	1e50      	subs	r0, r2, #1
 8000ef0:	6020      	str	r0, [r4, #0]
 8000ef2:	e9c4 5343 	strd	r5, r3, [r4, #268]	; 0x10c
 8000ef6:	f884 00d7 	strb.w	r0, [r4, #215]	; 0xd7
 8000efa:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8000efe:	f8c4 6d94 	str.w	r6, [r4, #3476]	; 0xd94
 8000f02:	bd70      	pop	{r4, r5, r6, pc}

08000f04 <SpiritMP3Decode>:
 8000f04:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f08:	4604      	mov	r4, r0
 8000f0a:	f8d0 80f8 	ldr.w	r8, [r0, #248]	; 0xf8
 8000f0e:	6880      	ldr	r0, [r0, #8]
 8000f10:	b081      	sub	sp, #4
 8000f12:	460f      	mov	r7, r1
 8000f14:	4691      	mov	r9, r2
 8000f16:	2600      	movs	r6, #0
 8000f18:	b128      	cbz	r0, 8000f26 <SpiritMP3Decode+0x22>
 8000f1a:	4620      	mov	r0, r4
 8000f1c:	f7ff ffa9 	bl	8000e72 <OutputInternalPCMBuffer>
 8000f20:	4606      	mov	r6, r0
 8000f22:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 8000f26:	45b1      	cmp	r9, r6
 8000f28:	d806      	bhi.n	8000f38 <SpiritMP3Decode+0x34>
 8000f2a:	9804      	ldr	r0, [sp, #16]
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	d076      	beq.n	800101e <SpiritMP3Decode+0x11a>
 8000f30:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 8000f34:	2800      	cmp	r0, #0
 8000f36:	d16d      	bne.n	8001014 <SpiritMP3Decode+0x110>
 8000f38:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 8000f3c:	9000      	str	r0, [sp, #0]
 8000f3e:	f641 5098 	movw	r0, #7576	; 0x1d98
 8000f42:	f04f 0b01 	mov.w	fp, #1
 8000f46:	eb04 0a00 	add.w	sl, r4, r0
 8000f4a:	6820      	ldr	r0, [r4, #0]
 8000f4c:	1c40      	adds	r0, r0, #1
 8000f4e:	d106      	bne.n	8000f5e <SpiritMP3Decode+0x5a>
 8000f50:	9800      	ldr	r0, [sp, #0]
 8000f52:	f7ff faa4 	bl	800049e <MP3D_SPCORP_Symbol_010>
 8000f56:	bbe8      	cbnz	r0, 8000fd4 <SpiritMP3Decode+0xd0>
 8000f58:	6820      	ldr	r0, [r4, #0]
 8000f5a:	1e40      	subs	r0, r0, #1
 8000f5c:	6020      	str	r0, [r4, #0]
 8000f5e:	495f      	ldr	r1, [pc, #380]	; (80010dc <L12_GetSubBandAllocTable+0x2e>)
 8000f60:	f8c1 b008 	str.w	fp, [r1, #8]
 8000f64:	6808      	ldr	r0, [r1, #0]
 8000f66:	1c40      	adds	r0, r0, #1
 8000f68:	d1fa      	bne.n	8000f60 <SpiritMP3Decode+0x5c>
 8000f6a:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 8000f6e:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8000f72:	6008      	str	r0, [r1, #0]
 8000f74:	2801      	cmp	r0, #1
 8000f76:	4620      	mov	r0, r4
 8000f78:	d008      	beq.n	8000f8c <SpiritMP3Decode+0x88>
 8000f7a:	f7ff ff0e 	bl	8000d9a <MP3D_SPCORP_Symbol_014>
 8000f7e:	4605      	mov	r5, r0
 8000f80:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 8000f84:	ea00 0808 	and.w	r8, r0, r8
 8000f88:	b118      	cbz	r0, 8000f92 <SpiritMP3Decode+0x8e>
 8000f8a:	e013      	b.n	8000fb4 <SpiritMP3Decode+0xb0>
 8000f8c:	f7ff fd45 	bl	8000a1a <MP3D_SPCORP_Symbol_015>
 8000f90:	e7f5      	b.n	8000f7e <SpiritMP3Decode+0x7a>
 8000f92:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 8000f96:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8000f9a:	2801      	cmp	r0, #1
 8000f9c:	d105      	bne.n	8000faa <SpiritMP3Decode+0xa6>
 8000f9e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000fa2:	f504 7056 	add.w	r0, r4, #856	; 0x358
 8000fa6:	f7ff ff5f 	bl	8000e68 <MP3D_SPCORP_Symbol_034>
 8000faa:	f240 4192 	movw	r1, #1170	; 0x492
 8000fae:	4650      	mov	r0, sl
 8000fb0:	f7ff ff5a 	bl	8000e68 <MP3D_SPCORP_Symbol_034>
 8000fb4:	2d00      	cmp	r5, #0
 8000fb6:	da05      	bge.n	8000fc4 <SpiritMP3Decode+0xc0>
 8000fb8:	1c68      	adds	r0, r5, #1
 8000fba:	d00c      	beq.n	8000fd6 <SpiritMP3Decode+0xd2>
 8000fbc:	1ca8      	adds	r0, r5, #2
 8000fbe:	d027      	beq.n	8001010 <SpiritMP3Decode+0x10c>
 8000fc0:	1ce8      	adds	r0, r5, #3
 8000fc2:	d00c      	beq.n	8000fde <SpiritMP3Decode+0xda>
 8000fc4:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 8000fc8:	465b      	mov	r3, fp
 8000fca:	f3c0 1081 	ubfx	r0, r0, #6, #2
 8000fce:	2803      	cmp	r0, #3
 8000fd0:	d10a      	bne.n	8000fe8 <SpiritMP3Decode+0xe4>
 8000fd2:	e008      	b.n	8000fe6 <SpiritMP3Decode+0xe2>
 8000fd4:	e01c      	b.n	8001010 <SpiritMP3Decode+0x10c>
 8000fd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fda:	6020      	str	r0, [r4, #0]
 8000fdc:	e016      	b.n	800100c <SpiritMP3Decode+0x108>
 8000fde:	9800      	ldr	r0, [sp, #0]
 8000fe0:	f7ff fb37 	bl	8000652 <MP3D_SPCORP_Symbol_009>
 8000fe4:	e7f7      	b.n	8000fd6 <SpiritMP3Decode+0xd2>
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	116a      	asrs	r2, r5, #5
 8000fea:	f104 010c 	add.w	r1, r4, #12
 8000fee:	4650      	mov	r0, sl
 8000ff0:	f002 fa02 	bl	80033f8 <MP3D_SPCORP_Symbol_033>
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	e9c4 0501 	strd	r0, r5, [r4, #4]
 8000ffa:	eba9 0206 	sub.w	r2, r9, r6
 8000ffe:	4639      	mov	r1, r7
 8001000:	4620      	mov	r0, r4
 8001002:	f7ff ff36 	bl	8000e72 <OutputInternalPCMBuffer>
 8001006:	4406      	add	r6, r0
 8001008:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 800100c:	45b1      	cmp	r9, r6
 800100e:	d89c      	bhi.n	8000f4a <SpiritMP3Decode+0x46>
 8001010:	9804      	ldr	r0, [sp, #16]
 8001012:	b120      	cbz	r0, 800101e <SpiritMP3Decode+0x11a>
 8001014:	4642      	mov	r2, r8
 8001016:	4620      	mov	r0, r4
 8001018:	9904      	ldr	r1, [sp, #16]
 800101a:	f000 f979 	bl	8001310 <SpiritMP3GetLastFrameInfo>
 800101e:	4630      	mov	r0, r6
 8001020:	e4a6      	b.n	8000970 <MP3D_SPCORP_Symbol_026+0xd0>

08001022 <SpiritMP3DecoderGetPersistentSize>:
 8001022:	f243 0038 	movw	r0, #12344	; 0x3038
 8001026:	4770      	bx	lr

08001028 <ReadScaleFactors>:
 8001028:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 800102c:	4604      	mov	r4, r0
 800102e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8001030:	460d      	mov	r5, r1
 8001032:	4693      	mov	fp, r2
 8001034:	f04f 0900 	mov.w	r9, #0
 8001038:	9803      	ldr	r0, [sp, #12]
 800103a:	f810 6b01 	ldrb.w	r6, [r0], #1
 800103e:	9003      	str	r0, [sp, #12]
 8001040:	f81b ab01 	ldrb.w	sl, [fp], #1
 8001044:	b30e      	cbz	r6, 800108a <ReadScaleFactors+0x62>
 8001046:	0738      	lsls	r0, r7, #28
 8001048:	d505      	bpl.n	8001056 <ReadScaleFactors+0x2e>
 800104a:	f915 0b01 	ldrsb.w	r0, [r5], #1
 800104e:	1e76      	subs	r6, r6, #1
 8001050:	c401      	stmia	r4!, {r0}
 8001052:	d1fa      	bne.n	800104a <ReadScaleFactors+0x22>
 8001054:	e019      	b.n	800108a <ReadScaleFactors+0x62>
 8001056:	ea5f 000a 	movs.w	r0, sl
 800105a:	d022      	beq.n	80010a2 <ReadScaleFactors+0x7a>
 800105c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8001060:	2f00      	cmp	r7, #0
 8001062:	da04      	bge.n	800106e <ReadScaleFactors+0x46>
 8001064:	2101      	movs	r1, #1
 8001066:	fa01 f10a 	lsl.w	r1, r1, sl
 800106a:	f1a1 0801 	sub.w	r8, r1, #1
 800106e:	4651      	mov	r1, sl
 8001070:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001072:	f000 f99d 	bl	80013b0 <MP3D_SPCORP_Symbol_006>
 8001076:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800107a:	4540      	cmp	r0, r8
 800107c:	d000      	beq.n	8001080 <ReadScaleFactors+0x58>
 800107e:	4601      	mov	r1, r0
 8001080:	f805 1b01 	strb.w	r1, [r5], #1
 8001084:	c401      	stmia	r4!, {r0}
 8001086:	1e76      	subs	r6, r6, #1
 8001088:	d1f1      	bne.n	800106e <ReadScaleFactors+0x46>
 800108a:	f109 0901 	add.w	r9, r9, #1
 800108e:	007f      	lsls	r7, r7, #1
 8001090:	f1b9 0f04 	cmp.w	r9, #4
 8001094:	dbd0      	blt.n	8001038 <ReadScaleFactors+0x10>
 8001096:	2000      	movs	r0, #0
 8001098:	6020      	str	r0, [r4, #0]
 800109a:	6060      	str	r0, [r4, #4]
 800109c:	60a0      	str	r0, [r4, #8]
 800109e:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 80010a2:	c401      	stmia	r4!, {r0}
 80010a4:	f805 0b01 	strb.w	r0, [r5], #1
 80010a8:	1e76      	subs	r6, r6, #1
 80010aa:	d1fa      	bne.n	80010a2 <ReadScaleFactors+0x7a>
 80010ac:	e7ed      	b.n	800108a <ReadScaleFactors+0x62>

080010ae <L12_GetSubBandAllocTable>:
 80010ae:	b570      	push	{r4, r5, r6, lr}
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <L12_GetSubBandAllocTable+0x32>)
 80010b2:	460d      	mov	r5, r1
 80010b4:	4604      	mov	r4, r0
 80010b6:	335c      	adds	r3, #92	; 0x5c
 80010b8:	f7ff f8a9 	bl	800020e <MP3D_SPCORP_Symbol_019>
 80010bc:	f3c4 1181 	ubfx	r1, r4, #6, #2
 80010c0:	f3c4 2681 	ubfx	r6, r4, #10, #2
 80010c4:	2903      	cmp	r1, #3
 80010c6:	d001      	beq.n	80010cc <L12_GetSubBandAllocTable+0x1e>
 80010c8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80010cc:	ea6f 4254 	mvn.w	r2, r4, lsr #17
 80010d0:	0792      	lsls	r2, r2, #30
 80010d2:	d007      	beq.n	80010e4 <L12_GetSubBandAllocTable+0x36>
 80010d4:	0322      	lsls	r2, r4, #12
 80010d6:	d408      	bmi.n	80010ea <L12_GetSubBandAllocTable+0x3c>
 80010d8:	3312      	adds	r3, #18
 80010da:	e015      	b.n	8001108 <L12_GetSubBandAllocTable+0x5a>
 80010dc:	40023000 	.word	0x40023000
 80010e0:	0801158c 	.word	0x0801158c
 80010e4:	331b      	adds	r3, #27
 80010e6:	2220      	movs	r2, #32
 80010e8:	e00f      	b.n	800110a <L12_GetSubBandAllocTable+0x5c>
 80010ea:	b900      	cbnz	r0, 80010ee <L12_GetSubBandAllocTable+0x40>
 80010ec:	20c0      	movs	r0, #192	; 0xc0
 80010ee:	221b      	movs	r2, #27
 80010f0:	2838      	cmp	r0, #56	; 0x38
 80010f2:	d205      	bcs.n	8001100 <L12_GetSubBandAllocTable+0x52>
 80010f4:	330c      	adds	r3, #12
 80010f6:	220c      	movs	r2, #12
 80010f8:	2e02      	cmp	r6, #2
 80010fa:	d006      	beq.n	800110a <L12_GetSubBandAllocTable+0x5c>
 80010fc:	2208      	movs	r2, #8
 80010fe:	e004      	b.n	800110a <L12_GetSubBandAllocTable+0x5c>
 8001100:	2860      	cmp	r0, #96	; 0x60
 8001102:	d302      	bcc.n	800110a <L12_GetSubBandAllocTable+0x5c>
 8001104:	2e01      	cmp	r6, #1
 8001106:	d000      	beq.n	800110a <L12_GetSubBandAllocTable+0x5c>
 8001108:	221e      	movs	r2, #30
 800110a:	2020      	movs	r0, #32
 800110c:	07ce      	lsls	r6, r1, #31
 800110e:	d007      	beq.n	8001120 <L12_GetSubBandAllocTable+0x72>
 8001110:	2000      	movs	r0, #0
 8001112:	2901      	cmp	r1, #1
 8001114:	d104      	bne.n	8001120 <L12_GetSubBandAllocTable+0x72>
 8001116:	f3c4 1001 	ubfx	r0, r4, #4, #2
 800111a:	2104      	movs	r1, #4
 800111c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8001120:	4290      	cmp	r0, r2
 8001122:	db00      	blt.n	8001126 <L12_GetSubBandAllocTable+0x78>
 8001124:	4610      	mov	r0, r2
 8001126:	702a      	strb	r2, [r5, #0]
 8001128:	7068      	strb	r0, [r5, #1]
 800112a:	1a10      	subs	r0, r2, r0
 800112c:	70a8      	strb	r0, [r5, #2]
 800112e:	4618      	mov	r0, r3
 8001130:	bd70      	pop	{r4, r5, r6, pc}

08001132 <L12_ReadScaleFactors>:
 8001132:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8001136:	460f      	mov	r7, r1
 8001138:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800113a:	4690      	mov	r8, r2
 800113c:	469a      	mov	sl, r3
 800113e:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001142:	2013      	movs	r0, #19
 8001144:	40c8      	lsrs	r0, r1
 8001146:	f000 0603 	and.w	r6, r0, #3
 800114a:	2404      	movs	r4, #4
 800114c:	f817 0b01 	ldrb.w	r0, [r7], #1
 8001150:	1d36      	adds	r6, r6, #4
 8001152:	b900      	cbnz	r0, 8001156 <L12_ReadScaleFactors+0x24>
 8001154:	2600      	movs	r6, #0
 8001156:	2100      	movs	r1, #0
 8001158:	f8df b24c 	ldr.w	fp, [pc, #588]	; 80013a8 <SpiritMP3GetLastFrameInfo+0x98>
 800115c:	460a      	mov	r2, r1
 800115e:	eb00 0940 	add.w	r9, r0, r0, lsl #1
 8001162:	4226      	tst	r6, r4
 8001164:	d00f      	beq.n	8001186 <L12_ReadScaleFactors+0x54>
 8001166:	2106      	movs	r1, #6
 8001168:	9800      	ldr	r0, [sp, #0]
 800116a:	f000 f921 	bl	80013b0 <MP3D_SPCORP_Symbol_006>
 800116e:	212b      	movs	r1, #43	; 0x2b
 8001170:	4341      	muls	r1, r0
 8001172:	11c9      	asrs	r1, r1, #7
 8001174:	1d4a      	adds	r2, r1, #5
 8001176:	4448      	add	r0, r9
 8001178:	eba1 0181 	sub.w	r1, r1, r1, lsl #2
 800117c:	4401      	add	r1, r0
 800117e:	eb0b 0081 	add.w	r0, fp, r1, lsl #2
 8001182:	f850 1c18 	ldr.w	r1, [r0, #-24]
 8001186:	4628      	mov	r0, r5
 8001188:	3508      	adds	r5, #8
 800118a:	e9c0 1200 	strd	r1, r2, [r0]
 800118e:	1064      	asrs	r4, r4, #1
 8001190:	d1e7      	bne.n	8001162 <L12_ReadScaleFactors+0x30>
 8001192:	f1ba 0a01 	subs.w	sl, sl, #1
 8001196:	d1d2      	bne.n	800113e <L12_ReadScaleFactors+0xc>
 8001198:	e781      	b.n	800109e <ReadScaleFactors+0x76>

0800119a <L12_ApplyScf384>:
 800119a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800119e:	f04f 0e02 	mov.w	lr, #2
 80011a2:	9800      	ldr	r0, [sp, #0]
 80011a4:	9b00      	ldr	r3, [sp, #0]
 80011a6:	f890 8000 	ldrb.w	r8, [r0]
 80011aa:	785b      	ldrb	r3, [r3, #1]
 80011ac:	f502 6010 	add.w	r0, r2, #2304	; 0x900
 80011b0:	b1d3      	cbz	r3, 80011e8 <L12_ApplyScf384+0x4e>
 80011b2:	e9d1 ab00 	ldrd	sl, fp, [r1]
 80011b6:	f851 9f18 	ldr.w	r9, [r1, #24]!
 80011ba:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80011be:	3118      	adds	r1, #24
 80011c0:	240c      	movs	r4, #12
 80011c2:	c840      	ldmia	r0!, {r6}
 80011c4:	6815      	ldr	r5, [r2, #0]
 80011c6:	fb09 f706 	mul.w	r7, r9, r6
 80011ca:	fa47 f70c 	asr.w	r7, r7, ip
 80011ce:	fb0a f605 	mul.w	r6, sl, r5
 80011d2:	fa46 f60b 	asr.w	r6, r6, fp
 80011d6:	f8c2 7900 	str.w	r7, [r2, #2304]	; 0x900
 80011da:	c240      	stmia	r2!, {r6}
 80011dc:	1e64      	subs	r4, r4, #1
 80011de:	d1f0      	bne.n	80011c2 <L12_ApplyScf384+0x28>
 80011e0:	3218      	adds	r2, #24
 80011e2:	3018      	adds	r0, #24
 80011e4:	1e5b      	subs	r3, r3, #1
 80011e6:	e7e3      	b.n	80011b0 <L12_ApplyScf384+0x16>
 80011e8:	9800      	ldr	r0, [sp, #0]
 80011ea:	f1be 0e01 	subs.w	lr, lr, #1
 80011ee:	7883      	ldrb	r3, [r0, #2]
 80011f0:	4610      	mov	r0, r2
 80011f2:	d1dd      	bne.n	80011b0 <L12_ApplyScf384+0x16>
 80011f4:	2100      	movs	r1, #0
 80011f6:	4640      	mov	r0, r8
 80011f8:	f108 0801 	add.w	r8, r8, #1
 80011fc:	2820      	cmp	r0, #32
 80011fe:	da07      	bge.n	8001210 <L12_ApplyScf384+0x76>
 8001200:	200c      	movs	r0, #12
 8001202:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
 8001206:	c202      	stmia	r2!, {r1}
 8001208:	1e40      	subs	r0, r0, #1
 800120a:	d1fa      	bne.n	8001202 <L12_ApplyScf384+0x68>
 800120c:	3218      	adds	r2, #24
 800120e:	e7f2      	b.n	80011f6 <L12_ApplyScf384+0x5c>
 8001210:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001214 <L12_DequantizeGranule>:
 8001214:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	2004      	movs	r0, #4
 800121c:	9000      	str	r0, [sp, #0]
 800121e:	9803      	ldr	r0, [sp, #12]
 8001220:	9903      	ldr	r1, [sp, #12]
 8001222:	9a03      	ldr	r2, [sp, #12]
 8001224:	6840      	ldr	r0, [r0, #4]
 8001226:	6809      	ldr	r1, [r1, #0]
 8001228:	6894      	ldr	r4, [r2, #8]
 800122a:	f44f 7910 	mov.w	r9, #576	; 0x240
 800122e:	9a04      	ldr	r2, [sp, #16]
 8001230:	f8dd c008 	ldr.w	ip, [sp, #8]
 8001234:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	f108 0803 	add.w	r8, r8, #3
 800123e:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 8001242:	9a05      	ldr	r2, [sp, #20]
 8001244:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 8001248:	9202      	str	r2, [sp, #8]
 800124a:	f818 3b01 	ldrb.w	r3, [r8], #1
 800124e:	4662      	mov	r2, ip
 8001250:	eb0c 0c89 	add.w	ip, ip, r9, lsl #2
 8001254:	b1fb      	cbz	r3, 8001296 <L12_DequantizeGranule+0x82>
 8001256:	9d05      	ldr	r5, [sp, #20]
 8001258:	2b11      	cmp	r3, #17
 800125a:	da1d      	bge.n	8001298 <L12_DequantizeGranule+0x84>
 800125c:	f1a3 0701 	sub.w	r7, r3, #1
 8001260:	f04f 0601 	mov.w	r6, #1
 8001264:	fa06 f607 	lsl.w	r6, r6, r7
 8001268:	f1a6 0b01 	sub.w	fp, r6, #1
 800126c:	f1c3 0a20 	rsb	sl, r3, #32
 8001270:	fa21 f60a 	lsr.w	r6, r1, sl
 8001274:	fa01 f103 	lsl.w	r1, r1, r3
 8001278:	18c0      	adds	r0, r0, r3
 800127a:	d407      	bmi.n	800128c <L12_DequantizeGranule+0x78>
 800127c:	f834 7b02 	ldrh.w	r7, [r4], #2
 8001280:	ba7f      	rev16	r7, r7
 8001282:	fa07 f700 	lsl.w	r7, r7, r0
 8001286:	4339      	orrs	r1, r7
 8001288:	f1a0 0010 	sub.w	r0, r0, #16
 800128c:	eba6 060b 	sub.w	r6, r6, fp
 8001290:	c240      	stmia	r2!, {r6}
 8001292:	1e6d      	subs	r5, r5, #1
 8001294:	d1ec      	bne.n	8001270 <L12_DequantizeGranule+0x5c>
 8001296:	e028      	b.n	80012ea <L12_DequantizeGranule+0xd6>
 8001298:	f1a3 0311 	sub.w	r3, r3, #17
 800129c:	f04f 0701 	mov.w	r7, #1
 80012a0:	4e42      	ldr	r6, [pc, #264]	; (80013ac <SpiritMP3GetLastFrameInfo+0x9c>)
 80012a2:	fa07 fb03 	lsl.w	fp, r7, r3
 80012a6:	eb07 0a4b 	add.w	sl, r7, fp, lsl #1
 80012aa:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80012ae:	9301      	str	r3, [sp, #4]
 80012b0:	ebaa 03ea 	sub.w	r3, sl, sl, asr #3
 80012b4:	f103 0302 	add.w	r3, r3, #2
 80012b8:	f1c3 0720 	rsb	r7, r3, #32
 80012bc:	fa21 f607 	lsr.w	r6, r1, r7
 80012c0:	fa01 f103 	lsl.w	r1, r1, r3
 80012c4:	18c0      	adds	r0, r0, r3
 80012c6:	d405      	bmi.n	80012d4 <L12_DequantizeGranule+0xc0>
 80012c8:	f834 3b02 	ldrh.w	r3, [r4], #2
 80012cc:	ba5b      	rev16	r3, r3
 80012ce:	4083      	lsls	r3, r0
 80012d0:	4319      	orrs	r1, r3
 80012d2:	3810      	subs	r0, #16
 80012d4:	9b01      	ldr	r3, [sp, #4]
 80012d6:	4373      	muls	r3, r6
 80012d8:	0b5b      	lsrs	r3, r3, #13
 80012da:	fb03 671a 	mls	r7, r3, sl, r6
 80012de:	eba7 070b 	sub.w	r7, r7, fp
 80012e2:	c280      	stmia	r2!, {r7}
 80012e4:	461e      	mov	r6, r3
 80012e6:	1e6d      	subs	r5, r5, #1
 80012e8:	d1f4      	bne.n	80012d4 <L12_DequantizeGranule+0xc0>
 80012ea:	f1c9 0912 	rsb	r9, r9, #18
 80012ee:	f1be 0e01 	subs.w	lr, lr, #1
 80012f2:	d1aa      	bne.n	800124a <L12_DequantizeGranule+0x36>
 80012f4:	9a00      	ldr	r2, [sp, #0]
 80012f6:	1e52      	subs	r2, r2, #1
 80012f8:	9200      	str	r2, [sp, #0]
 80012fa:	d198      	bne.n	800122e <L12_DequantizeGranule+0x1a>
 80012fc:	9a03      	ldr	r2, [sp, #12]
 80012fe:	6011      	str	r1, [r2, #0]
 8001300:	9903      	ldr	r1, [sp, #12]
 8001302:	6048      	str	r0, [r1, #4]
 8001304:	9803      	ldr	r0, [sp, #12]
 8001306:	6084      	str	r4, [r0, #8]
 8001308:	9802      	ldr	r0, [sp, #8]
 800130a:	b006      	add	sp, #24
 800130c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001310 <SpiritMP3GetLastFrameInfo>:
 8001310:	b570      	push	{r4, r5, r6, lr}
 8001312:	f8d0 60e8 	ldr.w	r6, [r0, #232]	; 0xe8
 8001316:	4605      	mov	r5, r0
 8001318:	4613      	mov	r3, r2
 800131a:	460c      	mov	r4, r1
 800131c:	b3c6      	cbz	r6, 8001390 <SpiritMP3GetLastFrameInfo+0x80>
 800131e:	4630      	mov	r0, r6
 8001320:	f7fe ff75 	bl	800020e <MP3D_SPCORP_Symbol_019>
 8001324:	60a0      	str	r0, [r4, #8]
 8001326:	2001      	movs	r0, #1
 8001328:	f3c6 1181 	ubfx	r1, r6, #6, #2
 800132c:	2903      	cmp	r1, #3
 800132e:	d000      	beq.n	8001332 <SpiritMP3GetLastFrameInfo+0x22>
 8001330:	2002      	movs	r0, #2
 8001332:	60e0      	str	r0, [r4, #12]
 8001334:	f3c6 4041 	ubfx	r0, r6, #17, #2
 8001338:	f1c0 0004 	rsb	r0, r0, #4
 800133c:	6020      	str	r0, [r4, #0]
 800133e:	4630      	mov	r0, r6
 8001340:	f7ff f98d 	bl	800065e <MP3D_SPCORP_Symbol_020>
 8001344:	6123      	str	r3, [r4, #16]
 8001346:	6060      	str	r0, [r4, #4]
 8001348:	8a28      	ldrh	r0, [r5, #16]
 800134a:	6160      	str	r0, [r4, #20]
 800134c:	8a68      	ldrh	r0, [r5, #18]
 800134e:	61a0      	str	r0, [r4, #24]
 8001350:	4630      	mov	r0, r6
 8001352:	f8d5 10ec 	ldr.w	r1, [r5, #236]	; 0xec
 8001356:	f7fe ff83 	bl	8000260 <MP3D_SPCORP_Symbol_018>
 800135a:	f8d5 10f0 	ldr.w	r1, [r5, #240]	; 0xf0
 800135e:	4408      	add	r0, r1
 8001360:	f8d5 10f4 	ldr.w	r1, [r5, #244]	; 0xf4
 8001364:	00c0      	lsls	r0, r0, #3
 8001366:	4249      	negs	r1, r1
 8001368:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800136c:	61e0      	str	r0, [r4, #28]
 800136e:	4630      	mov	r0, r6
 8001370:	f7fe ff64 	bl	800023c <MP3D_SPCORP_Symbol_021>
 8001374:	4602      	mov	r2, r0
 8001376:	6220      	str	r0, [r4, #32]
 8001378:	6828      	ldr	r0, [r5, #0]
 800137a:	2800      	cmp	r0, #0
 800137c:	db0d      	blt.n	800139a <SpiritMP3GetLastFrameInfo+0x8a>
 800137e:	6821      	ldr	r1, [r4, #0]
 8001380:	2903      	cmp	r1, #3
 8001382:	d006      	beq.n	8001392 <SpiritMP3GetLastFrameInfo+0x82>
 8001384:	2160      	movs	r1, #96	; 0x60
 8001386:	68ab      	ldr	r3, [r5, #8]
 8001388:	441a      	add	r2, r3
 800138a:	fb01 2010 	mls	r0, r1, r0, r2
 800138e:	e005      	b.n	800139c <SpiritMP3GetLastFrameInfo+0x8c>
 8001390:	e006      	b.n	80013a0 <SpiritMP3GetLastFrameInfo+0x90>
 8001392:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001396:	1040      	asrs	r0, r0, #1
 8001398:	e7f5      	b.n	8001386 <SpiritMP3GetLastFrameInfo+0x76>
 800139a:	68a8      	ldr	r0, [r5, #8]
 800139c:	6260      	str	r0, [r4, #36]	; 0x24
 800139e:	bd70      	pop	{r4, r5, r6, pc}
 80013a0:	2000      	movs	r0, #0
 80013a2:	6008      	str	r0, [r1, #0]
 80013a4:	bd70      	pop	{r4, r5, r6, pc}
 80013a6:	0000      	.short	0x0000
 80013a8:	080114b4 	.word	0x080114b4
 80013ac:	0801137c 	.word	0x0801137c

080013b0 <MP3D_SPCORP_Symbol_006>:
 80013b0:	e890 000c 	ldmia.w	r0, {r2, r3}
 80013b4:	185b      	adds	r3, r3, r1
 80013b6:	d508      	bpl.n	80013ca <MP3D_SPCORP_Symbol_006+0x1a>
 80013b8:	f1c1 0c20 	rsb	ip, r1, #32
 80013bc:	fa02 f101 	lsl.w	r1, r2, r1
 80013c0:	e880 000a 	stmia.w	r0, {r1, r3}
 80013c4:	fa22 f00c 	lsr.w	r0, r2, ip
 80013c8:	4770      	bx	lr
 80013ca:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80013ce:	f84d 4d04 	str.w	r4, [sp, #-4]!
 80013d2:	f83c 4b02 	ldrh.w	r4, [ip], #2
 80013d6:	f8c0 c008 	str.w	ip, [r0, #8]
 80013da:	ba64      	rev16	r4, r4
 80013dc:	f1c1 0c20 	rsb	ip, r1, #32
 80013e0:	fa02 f101 	lsl.w	r1, r2, r1
 80013e4:	fa04 f403 	lsl.w	r4, r4, r3
 80013e8:	ea41 0104 	orr.w	r1, r1, r4
 80013ec:	f1a3 0310 	sub.w	r3, r3, #16
 80013f0:	e880 000a 	stmia.w	r0, {r1, r3}
 80013f4:	fa22 f00c 	lsr.w	r0, r2, ip
 80013f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	b510      	push	{r4, lr}
 8001400:	3a20      	subs	r2, #32
 8001402:	d30c      	bcc.n	800141e <MP3D_SPCORP_Symbol_006+0x6e>
 8001404:	bf21      	itttt	cs
 8001406:	e8b1 5018 	ldmiacs.w	r1!, {r3, r4, ip, lr}
 800140a:	e8a0 5018 	stmiacs.w	r0!, {r3, r4, ip, lr}
 800140e:	e8b1 5018 	ldmiacs.w	r1!, {r3, r4, ip, lr}
 8001412:	e8a0 5018 	stmiacs.w	r0!, {r3, r4, ip, lr}
 8001416:	bf28      	it	cs
 8001418:	f1b2 0220 	subscs.w	r2, r2, #32
 800141c:	d2f2      	bcs.n	8001404 <MP3D_SPCORP_Symbol_006+0x54>
 800141e:	ea5f 7c02 	movs.w	ip, r2, lsl #28
 8001422:	bf24      	itt	cs
 8001424:	e8b1 5018 	ldmiacs.w	r1!, {r3, r4, ip, lr}
 8001428:	e8a0 5018 	stmiacs.w	r0!, {r3, r4, ip, lr}
 800142c:	bf44      	itt	mi
 800142e:	c918      	ldmiami	r1!, {r3, r4}
 8001430:	c018      	stmiami	r0!, {r3, r4}
 8001432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001436:	ea5f 7c82 	movs.w	ip, r2, lsl #30
 800143a:	bf24      	itt	cs
 800143c:	f851 3b04 	ldrcs.w	r3, [r1], #4
 8001440:	f840 3b04 	strcs.w	r3, [r0], #4
 8001444:	bf08      	it	eq
 8001446:	4770      	bxeq	lr
 8001448:	07d2      	lsls	r2, r2, #31
 800144a:	bf48      	it	mi
 800144c:	f811 2b01 	ldrbmi.w	r2, [r1], #1
 8001450:	bf24      	itt	cs
 8001452:	f811 3b01 	ldrbcs.w	r3, [r1], #1
 8001456:	f811 cb01 	ldrbcs.w	ip, [r1], #1
 800145a:	bf48      	it	mi
 800145c:	f800 2b01 	strbmi.w	r2, [r0], #1
 8001460:	bf24      	itt	cs
 8001462:	f800 3b01 	strbcs.w	r3, [r0], #1
 8001466:	f800 cb01 	strbcs.w	ip, [r0], #1
 800146a:	4770      	bx	lr

0800146c <MP3D_SPCORP_Symbol_012>:
 800146c:	4694      	mov	ip, r2
 800146e:	461a      	mov	r2, r3
 8001470:	eb00 030c 	add.w	r3, r0, ip
 8001474:	4408      	add	r0, r1
 8001476:	f103 013e 	add.w	r1, r3, #62	; 0x3e
 800147a:	f100 003e 	add.w	r0, r0, #62	; 0x3e
 800147e:	2a03      	cmp	r2, #3
 8001480:	d9e2      	bls.n	8001448 <MP3D_SPCORP_Symbol_006+0x98>
 8001482:	f010 0c03 	ands.w	ip, r0, #3
 8001486:	d014      	beq.n	80014b2 <MP3D_SPCORP_Symbol_012+0x46>
 8001488:	f811 3b01 	ldrb.w	r3, [r1], #1
 800148c:	f1bc 0f02 	cmp.w	ip, #2
 8001490:	4462      	add	r2, ip
 8001492:	bf98      	it	ls
 8001494:	f811 cb01 	ldrbls.w	ip, [r1], #1
 8001498:	f800 3b01 	strb.w	r3, [r0], #1
 800149c:	bf38      	it	cc
 800149e:	f811 3b01 	ldrbcc.w	r3, [r1], #1
 80014a2:	f1a2 0204 	sub.w	r2, r2, #4
 80014a6:	bf98      	it	ls
 80014a8:	f800 cb01 	strbls.w	ip, [r0], #1
 80014ac:	bf38      	it	cc
 80014ae:	f800 3b01 	strbcc.w	r3, [r0], #1
 80014b2:	f011 0303 	ands.w	r3, r1, #3
 80014b6:	d0a2      	beq.n	80013fe <MP3D_SPCORP_Symbol_006+0x4e>
 80014b8:	1f12      	subs	r2, r2, #4
 80014ba:	d3c5      	bcc.n	8001448 <MP3D_SPCORP_Symbol_006+0x98>
 80014bc:	eba1 0103 	sub.w	r1, r1, r3
 80014c0:	f8d1 c000 	ldr.w	ip, [r1]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d00d      	beq.n	80014e4 <MP3D_SPCORP_Symbol_012+0x78>
 80014c8:	d819      	bhi.n	80014fe <MP3D_SPCORP_Symbol_012+0x92>
 80014ca:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80014ce:	f851 cf04 	ldr.w	ip, [r1, #4]!
 80014d2:	1f12      	subs	r2, r2, #4
 80014d4:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 80014d8:	f840 3b04 	str.w	r3, [r0], #4
 80014dc:	d2f5      	bcs.n	80014ca <MP3D_SPCORP_Symbol_012+0x5e>
 80014de:	f101 0101 	add.w	r1, r1, #1
 80014e2:	e7b1      	b.n	8001448 <MP3D_SPCORP_Symbol_006+0x98>
 80014e4:	ea4f 431c 	mov.w	r3, ip, lsr #16
 80014e8:	f851 cf04 	ldr.w	ip, [r1, #4]!
 80014ec:	1f12      	subs	r2, r2, #4
 80014ee:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80014f2:	f840 3b04 	str.w	r3, [r0], #4
 80014f6:	d2f5      	bcs.n	80014e4 <MP3D_SPCORP_Symbol_012+0x78>
 80014f8:	f101 0102 	add.w	r1, r1, #2
 80014fc:	e7a4      	b.n	8001448 <MP3D_SPCORP_Symbol_006+0x98>
 80014fe:	ea4f 631c 	mov.w	r3, ip, lsr #24
 8001502:	f851 cf04 	ldr.w	ip, [r1, #4]!
 8001506:	1f12      	subs	r2, r2, #4
 8001508:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800150c:	f840 3b04 	str.w	r3, [r0], #4
 8001510:	d2f5      	bcs.n	80014fe <MP3D_SPCORP_Symbol_012+0x92>
 8001512:	f101 0103 	add.w	r1, r1, #3
 8001516:	e797      	b.n	8001448 <MP3D_SPCORP_Symbol_006+0x98>

08001518 <MP3D_SPCORP_Symbol_013>:
 8001518:	b510      	push	{r4, lr}
 800151a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800151e:	f000 8095 	beq.w	800164c <MP3D_SPCORP_Symbol_013+0x134>
 8001522:	ea4f 1c62 	mov.w	ip, r2, asr #5
 8001526:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 800152a:	f002 021f 	and.w	r2, r2, #31
 800152e:	f1c2 0c20 	rsb	ip, r2, #32
 8001532:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8001536:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 800153a:	ebb3 030c 	subs.w	r3, r3, ip
 800153e:	bf48      	it	mi
 8001540:	449c      	addmi	ip, r3
 8001542:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8001546:	ea5f 0c5c 	movs.w	ip, ip, lsr #1
 800154a:	bf28      	it	cs
 800154c:	f850 4b48 	ldrcs.w	r4, [r0], #72
 8001550:	f20f 0ed0 	addw	lr, pc, #208	; 0xd0
 8001554:	bf28      	it	cs
 8001556:	f841 4b04 	strcs.w	r4, [r1], #4
 800155a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800155e:	ebae 0c8c 	sub.w	ip, lr, ip, lsl #2
 8001562:	46e7      	mov	pc, ip
 8001564:	f850 4b48 	ldr.w	r4, [r0], #72
 8001568:	f850 cb48 	ldr.w	ip, [r0], #72
 800156c:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 8001570:	f850 4b48 	ldr.w	r4, [r0], #72
 8001574:	f850 cb48 	ldr.w	ip, [r0], #72
 8001578:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 800157c:	f850 4b48 	ldr.w	r4, [r0], #72
 8001580:	f850 cb48 	ldr.w	ip, [r0], #72
 8001584:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 8001588:	f850 4b48 	ldr.w	r4, [r0], #72
 800158c:	f850 cb48 	ldr.w	ip, [r0], #72
 8001590:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 8001594:	f850 4b48 	ldr.w	r4, [r0], #72
 8001598:	f850 cb48 	ldr.w	ip, [r0], #72
 800159c:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 80015a0:	f850 4b48 	ldr.w	r4, [r0], #72
 80015a4:	f850 cb48 	ldr.w	ip, [r0], #72
 80015a8:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 80015ac:	f850 4b48 	ldr.w	r4, [r0], #72
 80015b0:	f850 cb48 	ldr.w	ip, [r0], #72
 80015b4:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 80015b8:	f850 4b48 	ldr.w	r4, [r0], #72
 80015bc:	f850 cb48 	ldr.w	ip, [r0], #72
 80015c0:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 80015c4:	f850 4b48 	ldr.w	r4, [r0], #72
 80015c8:	f850 cb48 	ldr.w	ip, [r0], #72
 80015cc:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 80015d0:	f850 4b48 	ldr.w	r4, [r0], #72
 80015d4:	f850 cb48 	ldr.w	ip, [r0], #72
 80015d8:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 80015dc:	f850 4b48 	ldr.w	r4, [r0], #72
 80015e0:	f850 cb48 	ldr.w	ip, [r0], #72
 80015e4:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 80015e8:	f850 4b48 	ldr.w	r4, [r0], #72
 80015ec:	f850 cb48 	ldr.w	ip, [r0], #72
 80015f0:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 80015f4:	f850 4b48 	ldr.w	r4, [r0], #72
 80015f8:	f850 cb48 	ldr.w	ip, [r0], #72
 80015fc:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 8001600:	f850 4b48 	ldr.w	r4, [r0], #72
 8001604:	f850 cb48 	ldr.w	ip, [r0], #72
 8001608:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 800160c:	f850 4b48 	ldr.w	r4, [r0], #72
 8001610:	f850 cb48 	ldr.w	ip, [r0], #72
 8001614:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 8001618:	f850 4b48 	ldr.w	r4, [r0], #72
 800161c:	f850 cb48 	ldr.w	ip, [r0], #72
 8001620:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 8001624:	eba0 0002 	sub.w	r0, r0, r2
 8001628:	3b20      	subs	r3, #32
 800162a:	da9b      	bge.n	8001564 <MP3D_SPCORP_Symbol_013+0x4c>
 800162c:	f113 0c20 	adds.w	ip, r3, #32
 8001630:	bfd8      	it	le
 8001632:	bd10      	pople	{r4, pc}
 8001634:	ea5f 0c5c 	movs.w	ip, ip, lsr #1
 8001638:	bf24      	itt	cs
 800163a:	f850 4b48 	ldrcs.w	r4, [r0], #72
 800163e:	f841 4b04 	strcs.w	r4, [r1], #4
 8001642:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8001646:	ebae 0c8c 	sub.w	ip, lr, ip, lsl #2
 800164a:	46e7      	mov	pc, ip
 800164c:	e92d 0fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp}
 8001650:	f04f 0e20 	mov.w	lr, #32
 8001654:	e8b0 07fc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl}
 8001658:	600a      	str	r2, [r1, #0]
 800165a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 800165e:	f8c1 4100 	str.w	r4, [r1, #256]	; 0x100
 8001662:	f8c1 5180 	str.w	r5, [r1, #384]	; 0x180
 8001666:	f8c1 6200 	str.w	r6, [r1, #512]	; 0x200
 800166a:	f8c1 7280 	str.w	r7, [r1, #640]	; 0x280
 800166e:	f8c1 8300 	str.w	r8, [r1, #768]	; 0x300
 8001672:	f8c1 9380 	str.w	r9, [r1, #896]	; 0x380
 8001676:	f8c1 a400 	str.w	sl, [r1, #1024]	; 0x400
 800167a:	e8b0 07fc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl}
 800167e:	f8c1 2480 	str.w	r2, [r1, #1152]	; 0x480
 8001682:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8001686:	f8c1 4580 	str.w	r4, [r1, #1408]	; 0x580
 800168a:	f8c1 5600 	str.w	r5, [r1, #1536]	; 0x600
 800168e:	f8c1 6680 	str.w	r6, [r1, #1664]	; 0x680
 8001692:	f8c1 7700 	str.w	r7, [r1, #1792]	; 0x700
 8001696:	f8c1 8780 	str.w	r8, [r1, #1920]	; 0x780
 800169a:	f8c1 9800 	str.w	r9, [r1, #2048]	; 0x800
 800169e:	f8c1 a880 	str.w	sl, [r1, #2176]	; 0x880
 80016a2:	f1be 0e01 	subs.w	lr, lr, #1
 80016a6:	f101 0104 	add.w	r1, r1, #4
 80016aa:	d1d3      	bne.n	8001654 <MP3D_SPCORP_Symbol_013+0x13c>
 80016ac:	e8bd 0fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp}
 80016b0:	bd10      	pop	{r4, pc}
	...

080016b4 <MP3D_SPCORP_Symbol_001>:
 80016b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016b8:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8001770 <MP3D_SPCORP_Symbol_001+0xbc>
 80016bc:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80016c0:	e89e 50fc 	ldmia.w	lr, {r2, r3, r4, r5, r6, r7, ip, lr}
 80016c4:	e950 ab02 	ldrd	sl, fp, [r0, #-8]
 80016c8:	e890 0300 	ldmia.w	r0, {r8, r9}
 80016cc:	fb3b 8802 	smlawb	r8, fp, r2, r8
 80016d0:	fb3a 9903 	smlawb	r9, sl, r3, r9
 80016d4:	fb38 bb12 	smlawt	fp, r8, r2, fp
 80016d8:	fb39 aa13 	smlawt	sl, r9, r3, sl
 80016dc:	44c3      	add	fp, r8
 80016de:	fb3b 8802 	smlawb	r8, fp, r2, r8
 80016e2:	fb3a 9903 	smlawb	r9, sl, r3, r9
 80016e6:	e940 ab02 	strd	sl, fp, [r0, #-8]
 80016ea:	e8a0 0300 	stmia.w	r0!, {r8, r9}
 80016ee:	e950 ab06 	ldrd	sl, fp, [r0, #-24]
 80016f2:	e890 0300 	ldmia.w	r0, {r8, r9}
 80016f6:	fb3b 8804 	smlawb	r8, fp, r4, r8
 80016fa:	fb3a 9905 	smlawb	r9, sl, r5, r9
 80016fe:	fb38 bb14 	smlawt	fp, r8, r4, fp
 8001702:	fb39 aa15 	smlawt	sl, r9, r5, sl
 8001706:	fb3b 8804 	smlawb	r8, fp, r4, r8
 800170a:	fb3a 9905 	smlawb	r9, sl, r5, r9
 800170e:	e940 ab06 	strd	sl, fp, [r0, #-24]
 8001712:	e8a0 0300 	stmia.w	r0!, {r8, r9}
 8001716:	e950 ab0a 	ldrd	sl, fp, [r0, #-40]	; 0x28
 800171a:	e890 0300 	ldmia.w	r0, {r8, r9}
 800171e:	fb3b 8806 	smlawb	r8, fp, r6, r8
 8001722:	fb3a 9907 	smlawb	r9, sl, r7, r9
 8001726:	fb38 bb16 	smlawt	fp, r8, r6, fp
 800172a:	fb39 aa17 	smlawt	sl, r9, r7, sl
 800172e:	fb3b 8806 	smlawb	r8, fp, r6, r8
 8001732:	fb3a 9907 	smlawb	r9, sl, r7, r9
 8001736:	e940 ab0a 	strd	sl, fp, [r0, #-40]	; 0x28
 800173a:	e8a0 0300 	stmia.w	r0!, {r8, r9}
 800173e:	e950 ab0e 	ldrd	sl, fp, [r0, #-56]	; 0x38
 8001742:	e890 0300 	ldmia.w	r0, {r8, r9}
 8001746:	fb3b 880c 	smlawb	r8, fp, ip, r8
 800174a:	fb3a 990e 	smlawb	r9, sl, lr, r9
 800174e:	fb38 bb1c 	smlawt	fp, r8, ip, fp
 8001752:	fb39 aa1e 	smlawt	sl, r9, lr, sl
 8001756:	fb3b 880c 	smlawb	r8, fp, ip, r8
 800175a:	fb3a 990e 	smlawb	r9, sl, lr, r9
 800175e:	e940 ab0e 	strd	sl, fp, [r0, #-56]	; 0x38
 8001762:	e8e0 890c 	strd	r8, r9, [r0], #48	; 0x30
 8001766:	1e49      	subs	r1, r1, #1
 8001768:	d1ac      	bne.n	80016c4 <MP3D_SPCORP_Symbol_001+0x10>
 800176a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800176e:	0000      	.short	0x0000
 8001770:	08011690 	.word	0x08011690
 8001774:	fa25 f10b 	lsr.w	r1, r5, fp
 8001778:	4408      	add	r0, r1
 800177a:	f8df 1560 	ldr.w	r1, [pc, #1376]	; 8001cdc <MP3D_SPCORP_Symbol_000+0x174>
 800177e:	2883      	cmp	r0, #131	; 0x83
 8001780:	bf38      	it	cc
 8001782:	f851 0020 	ldrcc.w	r0, [r1, r0, lsl #2]
 8001786:	d219      	bcs.n	80017bc <MP3D_SPCORP_Symbol_001+0x108>
 8001788:	fba2 1000 	umull	r1, r0, r2, r0
 800178c:	f1a9 0105 	sub.w	r1, r9, #5
 8001790:	fa20 f001 	lsr.w	r0, r0, r1
 8001794:	f1cb 0121 	rsb	r1, fp, #33	; 0x21
 8001798:	408d      	lsls	r5, r1
 800179a:	bf28      	it	cs
 800179c:	4240      	negcs	r0, r0
 800179e:	1876      	adds	r6, r6, r1
 80017a0:	f10e 0e12 	add.w	lr, lr, #18
 80017a4:	bf48      	it	mi
 80017a6:	46f7      	movmi	pc, lr
 80017a8:	f837 1b02 	ldrh.w	r1, [r7], #2
 80017ac:	ba49      	rev16	r1, r1
 80017ae:	fa01 f106 	lsl.w	r1, r1, r6
 80017b2:	ea45 0501 	orr.w	r5, r5, r1
 80017b6:	f1a6 0610 	sub.w	r6, r6, #16
 80017ba:	46f7      	mov	pc, lr
 80017bc:	b430      	push	{r4, r5}
 80017be:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80017c2:	bfb8      	it	lt
 80017c4:	00c0      	lsllt	r0, r0, #3
 80017c6:	f000 053f 	and.w	r5, r0, #63	; 0x3f
 80017ca:	ea4f 1090 	mov.w	r0, r0, lsr #6
 80017ce:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80017d2:	c913      	ldmia	r1, {r0, r1, r4}
 80017d4:	f1c5 0540 	rsb	r5, r5, #64	; 0x40
 80017d8:	4420      	add	r0, r4
 80017da:	eba0 0444 	sub.w	r4, r0, r4, lsl #1
 80017de:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 80017e2:	fb05 f000 	mul.w	r0, r5, r0
 80017e6:	eb04 10a0 	add.w	r0, r4, r0, asr #6
 80017ea:	fb00 f505 	mul.w	r5, r0, r5
 80017ee:	eb01 14e5 	add.w	r4, r1, r5, asr #7
 80017f2:	fba2 5004 	umull	r5, r0, r2, r4
 80017f6:	f1a9 010d 	sub.w	r1, r9, #13
 80017fa:	bfb8      	it	lt
 80017fc:	1d09      	addlt	r1, r1, #4
 80017fe:	fa20 f001 	lsr.w	r0, r0, r1
 8001802:	bc30      	pop	{r4, r5}
 8001804:	f1cb 0121 	rsb	r1, fp, #33	; 0x21
 8001808:	408d      	lsls	r5, r1
 800180a:	bf28      	it	cs
 800180c:	4240      	negcs	r0, r0
 800180e:	1876      	adds	r6, r6, r1
 8001810:	f10e 0e12 	add.w	lr, lr, #18
 8001814:	bf48      	it	mi
 8001816:	4770      	bxmi	lr
 8001818:	f837 1b02 	ldrh.w	r1, [r7], #2
 800181c:	ba49      	rev16	r1, r1
 800181e:	fa01 f106 	lsl.w	r1, r1, r6
 8001822:	ea45 0501 	orr.w	r5, r5, r1
 8001826:	f1a6 0610 	sub.w	r6, r6, #16
 800182a:	4770      	bx	lr
 800182c:	f04f 0000 	mov.w	r0, #0
 8001830:	f04f 0100 	mov.w	r1, #0
 8001834:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8001838:	f1b4 7480 	subs.w	r4, r4, #16777216	; 0x1000000
 800183c:	dcfa      	bgt.n	8001834 <MP3D_SPCORP_Symbol_001+0x180>
 800183e:	e0df      	b.n	8001a00 <MP3D_SPCORP_Symbol_027+0x164>
 8001840:	80000000 	.word	0x80000000
 8001844:	98380000 	.word	0x98380000
 8001848:	b5050000 	.word	0xb5050000
 800184c:	d7450000 	.word	0xd7450000
 8001850:	f8dd a020 	ldr.w	sl, [sp, #32]
 8001854:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8001858:	f10a 0001 	add.w	r0, sl, #1
 800185c:	9008      	str	r0, [sp, #32]
 800185e:	eb0e 030a 	add.w	r3, lr, sl
 8001862:	7bd8      	ldrb	r0, [r3, #15]
 8001864:	7b1b      	ldrb	r3, [r3, #12]
 8001866:	f8df e478 	ldr.w	lr, [pc, #1144]	; 8001ce0 <MP3D_SPCORP_Symbol_000+0x178>
 800186a:	f101 0101 	add.w	r1, r1, #1
 800186e:	ea4f 6ad5 	mov.w	sl, r5, lsr #27
 8001872:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8001876:	4401      	add	r1, r0
 8001878:	9102      	str	r1, [sp, #8]
 800187a:	f013 0b1f 	ands.w	fp, r3, #31
 800187e:	bf0c      	ite	eq
 8001880:	f20f 111a 	addweq	r1, pc, #282	; 0x11a
 8001884:	f20f 2168 	addwne	r1, pc, #616	; 0x268
 8001888:	095b      	lsrs	r3, r3, #5
 800188a:	bf0e      	itee	eq
 800188c:	f2af 0164 	subweq	r1, pc, #100	; 0x64
 8001890:	eb0e 0343 	addne.w	r3, lr, r3, lsl #1
 8001894:	f833 a01a 	ldrhne.w	sl, [r3, sl, lsl #1]
 8001898:	910a      	str	r1, [sp, #40]	; 0x28
 800189a:	e0c1      	b.n	8001a20 <MP3D_SPCORP_Symbol_027+0x184>

0800189c <MP3D_SPCORP_Symbol_027>:
 800189c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018a0:	b08c      	sub	sp, #48	; 0x30
 80018a2:	4680      	mov	r8, r0
 80018a4:	f04f 0000 	mov.w	r0, #0
 80018a8:	9008      	str	r0, [sp, #32]
 80018aa:	8851      	ldrh	r1, [r2, #2]
 80018ac:	7a53      	ldrb	r3, [r2, #9]
 80018ae:	9106      	str	r1, [sp, #24]
 80018b0:	4413      	add	r3, r2
 80018b2:	9305      	str	r3, [sp, #20]
 80018b4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80018b6:	9302      	str	r3, [sp, #8]
 80018b8:	e890 00e0 	ldmia.w	r0, {r5, r6, r7}
 80018bc:	e0a0      	b.n	8001a00 <MP3D_SPCORP_Symbol_027+0x164>
 80018be:	fa05 f501 	lsl.w	r5, r5, r1
 80018c2:	f1ce 0020 	rsb	r0, lr, #32
 80018c6:	fa25 f000 	lsr.w	r0, r5, r0
 80018ca:	eb00 1a5a 	add.w	sl, r0, sl, lsr #5
 80018ce:	1876      	adds	r6, r6, r1
 80018d0:	f833 a01a 	ldrh.w	sl, [r3, sl, lsl #1]
 80018d4:	bf5f      	itttt	pl
 80018d6:	f837 0b02 	ldrhpl.w	r0, [r7], #2
 80018da:	ba40      	rev16pl	r0, r0
 80018dc:	40b0      	lslpl	r0, r6
 80018de:	4305      	orrpl	r5, r0
 80018e0:	bf58      	it	pl
 80018e2:	3e10      	subpl	r6, #16
 80018e4:	ea14 015a 	ands.w	r1, r4, sl, lsr #1
 80018e8:	d25c      	bcs.n	80019a4 <MP3D_SPCORP_Symbol_027+0x108>
 80018ea:	fa05 f50e 	lsl.w	r5, r5, lr
 80018ee:	f1c1 0020 	rsb	r0, r1, #32
 80018f2:	fa25 f000 	lsr.w	r0, r5, r0
 80018f6:	eb00 1a5a 	add.w	sl, r0, sl, lsr #5
 80018fa:	f833 a01a 	ldrh.w	sl, [r3, sl, lsl #1]
 80018fe:	4476      	add	r6, lr
 8001900:	ea14 0e5a 	ands.w	lr, r4, sl, lsr #1
 8001904:	d21c      	bcs.n	8001940 <MP3D_SPCORP_Symbol_027+0xa4>
 8001906:	fa05 f501 	lsl.w	r5, r5, r1
 800190a:	f1ce 0020 	rsb	r0, lr, #32
 800190e:	fa25 f000 	lsr.w	r0, r5, r0
 8001912:	eb00 1a5a 	add.w	sl, r0, sl, lsr #5
 8001916:	f833 a01a 	ldrh.w	sl, [r3, sl, lsl #1]
 800191a:	440e      	add	r6, r1
 800191c:	ea14 015a 	ands.w	r1, r4, sl, lsr #1
 8001920:	d240      	bcs.n	80019a4 <MP3D_SPCORP_Symbol_027+0x108>
 8001922:	ea4f 1545 	mov.w	r5, r5, lsl #5
 8001926:	f1c1 0020 	rsb	r0, r1, #32
 800192a:	fa25 f000 	lsr.w	r0, r5, r0
 800192e:	eb00 106a 	add.w	r0, r0, sl, asr #5
 8001932:	f833 a010 	ldrh.w	sl, [r3, r0, lsl #1]
 8001936:	f106 0605 	add.w	r6, r6, #5
 800193a:	ea14 0e5a 	ands.w	lr, r4, sl, lsr #1
 800193e:	d3be      	bcc.n	80018be <MP3D_SPCORP_Symbol_027+0x22>
 8001940:	eb16 060e 	adds.w	r6, r6, lr
 8001944:	fa05 f50e 	lsl.w	r5, r5, lr
 8001948:	bf5f      	itttt	pl
 800194a:	f837 0b02 	ldrhpl.w	r0, [r7], #2
 800194e:	ba40      	rev16pl	r0, r0
 8001950:	40b0      	lslpl	r0, r6
 8001952:	4305      	orrpl	r5, r0
 8001954:	bf58      	it	pl
 8001956:	3e10      	subpl	r6, #16
 8001958:	ea14 109a 	ands.w	r0, r4, sl, lsr #6
 800195c:	bf1f      	itttt	ne
 800195e:	f85c 0020 	ldrne.w	r0, [ip, r0, lsl #2]
 8001962:	1c76      	addne	r6, r6, #1
 8001964:	fa20 f009 	lsrne.w	r0, r0, r9
 8001968:	ea5f 0545 	movsne.w	r5, r5, lsl #1
 800196c:	bf28      	it	cs
 800196e:	f1d0 0000 	rsbscs	r0, r0, #0
 8001972:	ea14 21da 	ands.w	r1, r4, sl, lsr #11
 8001976:	bf1f      	itttt	ne
 8001978:	f85c 1021 	ldrne.w	r1, [ip, r1, lsl #2]
 800197c:	1c76      	addne	r6, r6, #1
 800197e:	fa21 f109 	lsrne.w	r1, r1, r9
 8001982:	ea5f 0545 	movsne.w	r5, r5, lsl #1
 8001986:	bf28      	it	cs
 8001988:	f1d1 0100 	rsbscs	r1, r1, #0
 800198c:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8001990:	f1b4 7480 	subs.w	r4, r4, #16777216	; 0x1000000
 8001994:	ea4f 6ad5 	mov.w	sl, r5, lsr #27
 8001998:	f833 a01a 	ldrh.w	sl, [r3, sl, lsl #1]
 800199c:	dd30      	ble.n	8001a00 <MP3D_SPCORP_Symbol_027+0x164>
 800199e:	ea14 015a 	ands.w	r1, r4, sl, lsr #1
 80019a2:	d3be      	bcc.n	8001922 <MP3D_SPCORP_Symbol_027+0x86>
 80019a4:	1876      	adds	r6, r6, r1
 80019a6:	fa05 f501 	lsl.w	r5, r5, r1
 80019aa:	bf5f      	itttt	pl
 80019ac:	f837 0b02 	ldrhpl.w	r0, [r7], #2
 80019b0:	ba40      	rev16pl	r0, r0
 80019b2:	40b0      	lslpl	r0, r6
 80019b4:	4305      	orrpl	r5, r0
 80019b6:	bf58      	it	pl
 80019b8:	3e10      	subpl	r6, #16
 80019ba:	ea14 109a 	ands.w	r0, r4, sl, lsr #6
 80019be:	bf1f      	itttt	ne
 80019c0:	f85c 0020 	ldrne.w	r0, [ip, r0, lsl #2]
 80019c4:	1c76      	addne	r6, r6, #1
 80019c6:	fa20 f009 	lsrne.w	r0, r0, r9
 80019ca:	ea5f 0545 	movsne.w	r5, r5, lsl #1
 80019ce:	bf28      	it	cs
 80019d0:	f1d0 0000 	rsbscs	r0, r0, #0
 80019d4:	ea14 21da 	ands.w	r1, r4, sl, lsr #11
 80019d8:	bf1f      	itttt	ne
 80019da:	f85c 1021 	ldrne.w	r1, [ip, r1, lsl #2]
 80019de:	1c76      	addne	r6, r6, #1
 80019e0:	fa21 f109 	lsrne.w	r1, r1, r9
 80019e4:	ea5f 0545 	movsne.w	r5, r5, lsl #1
 80019e8:	bf28      	it	cs
 80019ea:	f1d1 0100 	rsbscs	r1, r1, #0
 80019ee:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 80019f2:	ea4f 6ad5 	mov.w	sl, r5, lsr #27
 80019f6:	f1b4 7480 	subs.w	r4, r4, #16777216	; 0x1000000
 80019fa:	f833 a01a 	ldrh.w	sl, [r3, sl, lsl #1]
 80019fe:	dcce      	bgt.n	800199e <MP3D_SPCORP_Symbol_027+0x102>
 8001a00:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8001a04:	9905      	ldr	r1, [sp, #20]
 8001a06:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8001a0a:	f1d9 0400 	rsbs	r4, r9, #0
 8001a0e:	f280 80ab 	bge.w	8001b68 <MP3D_SPCORP_Symbol_000>
 8001a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001a16:	9802      	ldr	r0, [sp, #8]
 8001a18:	9105      	str	r1, [sp, #20]
 8001a1a:	4281      	cmp	r1, r0
 8001a1c:	f4bf af18 	bcs.w	8001850 <MP3D_SPCORP_Symbol_001+0x19c>
 8001a20:	ebb9 0904 	subs.w	r9, r9, r4
 8001a24:	f8cd 9018 	str.w	r9, [sp, #24]
 8001a28:	bfb8      	it	lt
 8001a2a:	444c      	addlt	r4, r9
 8001a2c:	f1a4 0401 	sub.w	r4, r4, #1
 8001a30:	ea4f 6404 	mov.w	r4, r4, lsl #24
 8001a34:	f104 040f 	add.w	r4, r4, #15
 8001a38:	f85c eb04 	ldr.w	lr, [ip], #4
 8001a3c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8001a40:	f04f 0119 	mov.w	r1, #25
 8001a44:	eba1 09ae 	sub.w	r9, r1, lr, asr #2
 8001a48:	49a6      	ldr	r1, [pc, #664]	; (8001ce4 <MP3D_SPCORP_Symbol_000+0x17c>)
 8001a4a:	f00e 0003 	and.w	r0, lr, #3
 8001a4e:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8001a52:	eb01 1c80 	add.w	ip, r1, r0, lsl #6
 8001a56:	46f7      	mov	pc, lr
 8001a58:	ea4f 1545 	mov.w	r5, r5, lsl #5
 8001a5c:	fa25 f001 	lsr.w	r0, r5, r1
 8001a60:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8001a64:	eb00 105a 	add.w	r0, r0, sl, lsr #5
 8001a68:	f833 a010 	ldrh.w	sl, [r3, r0, lsl #1]
 8001a6c:	1d76      	adds	r6, r6, #5
 8001a6e:	f1c1 0e10 	rsb	lr, r1, #16
 8001a72:	ea14 015a 	ands.w	r1, r4, sl, lsr #1
 8001a76:	d242      	bcs.n	8001afe <MP3D_SPCORP_Symbol_027+0x262>
 8001a78:	fa05 f50e 	lsl.w	r5, r5, lr
 8001a7c:	fa25 f001 	lsr.w	r0, r5, r1
 8001a80:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8001a84:	eb00 105a 	add.w	r0, r0, sl, lsr #5
 8001a88:	f833 a010 	ldrh.w	sl, [r3, r0, lsl #1]
 8001a8c:	eb16 060e 	adds.w	r6, r6, lr
 8001a90:	f1c1 0e10 	rsb	lr, r1, #16
 8001a94:	bf5f      	itttt	pl
 8001a96:	f837 0b02 	ldrhpl.w	r0, [r7], #2
 8001a9a:	ba40      	rev16pl	r0, r0
 8001a9c:	40b0      	lslpl	r0, r6
 8001a9e:	4305      	orrpl	r5, r0
 8001aa0:	bf58      	it	pl
 8001aa2:	3e10      	subpl	r6, #16
 8001aa4:	ea14 015a 	ands.w	r1, r4, sl, lsr #1
 8001aa8:	d229      	bcs.n	8001afe <MP3D_SPCORP_Symbol_027+0x262>
 8001aaa:	fa05 f50e 	lsl.w	r5, r5, lr
 8001aae:	fa25 f001 	lsr.w	r0, r5, r1
 8001ab2:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8001ab6:	eb00 105a 	add.w	r0, r0, sl, lsr #5
 8001aba:	f833 a010 	ldrh.w	sl, [r3, r0, lsl #1]
 8001abe:	eb16 060e 	adds.w	r6, r6, lr
 8001ac2:	f1c1 0e10 	rsb	lr, r1, #16
 8001ac6:	ea14 015a 	ands.w	r1, r4, sl, lsr #1
 8001aca:	d218      	bcs.n	8001afe <MP3D_SPCORP_Symbol_027+0x262>
 8001acc:	fa05 f50e 	lsl.w	r5, r5, lr
 8001ad0:	fa25 f001 	lsr.w	r0, r5, r1
 8001ad4:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8001ad8:	eb00 105a 	add.w	r0, r0, sl, lsr #5
 8001adc:	f833 a010 	ldrh.w	sl, [r3, r0, lsl #1]
 8001ae0:	eb16 060e 	adds.w	r6, r6, lr
 8001ae4:	f1c1 0e10 	rsb	lr, r1, #16
 8001ae8:	ea14 015a 	ands.w	r1, r4, sl, lsr #1
 8001aec:	d207      	bcs.n	8001afe <MP3D_SPCORP_Symbol_027+0x262>
 8001aee:	e006      	b.n	8001afe <MP3D_SPCORP_Symbol_027+0x262>
 8001af0:	f2af 21b4 	subw	r1, pc, #692	; 0x2b4
 8001af4:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 8001af8:	ea14 015a 	ands.w	r1, r4, sl, lsr #1
 8001afc:	d3ac      	bcc.n	8001a58 <MP3D_SPCORP_Symbol_027+0x1bc>
 8001afe:	1876      	adds	r6, r6, r1
 8001b00:	fa05 f501 	lsl.w	r5, r5, r1
 8001b04:	bf5f      	itttt	pl
 8001b06:	f837 0b02 	ldrhpl.w	r0, [r7], #2
 8001b0a:	ba40      	rev16pl	r0, r0
 8001b0c:	40b0      	lslpl	r0, r6
 8001b0e:	4305      	orrpl	r5, r0
 8001b10:	bf58      	it	pl
 8001b12:	3e10      	subpl	r6, #16
 8001b14:	ea14 109a 	ands.w	r0, r4, sl, lsr #6
 8001b18:	d00b      	beq.n	8001b32 <MP3D_SPCORP_Symbol_027+0x296>
 8001b1a:	bf28      	it	cs
 8001b1c:	f7ff fe2a 	blcs	8001774 <MP3D_SPCORP_Symbol_001+0xc0>
 8001b20:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 8001b24:	f106 0601 	add.w	r6, r6, #1
 8001b28:	fa20 f009 	lsr.w	r0, r0, r9
 8001b2c:	006d      	lsls	r5, r5, #1
 8001b2e:	bf28      	it	cs
 8001b30:	4240      	negcs	r0, r0
 8001b32:	f848 0b04 	str.w	r0, [r8], #4
 8001b36:	ea14 20da 	ands.w	r0, r4, sl, lsr #11
 8001b3a:	d00b      	beq.n	8001b54 <MP3D_SPCORP_Symbol_027+0x2b8>
 8001b3c:	bf28      	it	cs
 8001b3e:	f7ff fe19 	blcs	8001774 <MP3D_SPCORP_Symbol_001+0xc0>
 8001b42:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 8001b46:	f106 0601 	add.w	r6, r6, #1
 8001b4a:	fa20 f009 	lsr.w	r0, r0, r9
 8001b4e:	006d      	lsls	r5, r5, #1
 8001b50:	bf28      	it	cs
 8001b52:	4240      	negcs	r0, r0
 8001b54:	f848 0b04 	str.w	r0, [r8], #4
 8001b58:	ea4f 6ad5 	mov.w	sl, r5, lsr #27
 8001b5c:	f1b4 7480 	subs.w	r4, r4, #16777216	; 0x1000000
 8001b60:	f833 a01a 	ldrh.w	sl, [r3, sl, lsl #1]
 8001b64:	dcc8      	bgt.n	8001af8 <MP3D_SPCORP_Symbol_027+0x25c>
 8001b66:	e74b      	b.n	8001a00 <MP3D_SPCORP_Symbol_027+0x164>

08001b68 <MP3D_SPCORP_Symbol_000>:
 8001b68:	bf1c      	itt	ne
 8001b6a:	f20f 0e0e 	addwne	lr, pc, #14
 8001b6e:	f85c 0c04 	ldrne.w	r0, [ip, #-4]
 8001b72:	f040 8095 	bne.w	8001ca0 <MP3D_SPCORP_Symbol_000+0x138>
 8001b76:	f000 f88d 	bl	8001c94 <MP3D_SPCORP_Symbol_000+0x12c>
 8001b7a:	f104 0401 	add.w	r4, r4, #1
 8001b7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001b80:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8001b84:	f8d2 b024 	ldr.w	fp, [r2, #36]	; 0x24
 8001b88:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 8001b8c:	eba7 0202 	sub.w	r2, r7, r2
 8001b90:	ebab 0bc2 	sub.w	fp, fp, r2, lsl #3
 8001b94:	f10b 0a10 	add.w	sl, fp, #16
 8001b98:	4556      	cmp	r6, sl
 8001b9a:	dc5c      	bgt.n	8001c56 <MP3D_SPCORP_Symbol_000+0xee>
 8001b9c:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 8001ba0:	f899 9014 	ldrb.w	r9, [r9, #20]
 8001ba4:	f10a 0a01 	add.w	sl, sl, #1
 8001ba8:	f019 0f01 	tst.w	r9, #1
 8001bac:	bf18      	it	ne
 8001bae:	f20f 0336 	addwne	r3, pc, #54	; 0x36
 8001bb2:	d118      	bne.n	8001be6 <MP3D_SPCORP_Symbol_000+0x7e>
 8001bb4:	bf08      	it	eq
 8001bb6:	f20f 0302 	addweq	r3, pc, #2
 8001bba:	006d      	lsls	r5, r5, #1
 8001bbc:	d304      	bcc.n	8001bc8 <MP3D_SPCORP_Symbol_000+0x60>
 8001bbe:	f04f 0900 	mov.w	r9, #0
 8001bc2:	1c76      	adds	r6, r6, #1
 8001bc4:	d423      	bmi.n	8001c0e <MP3D_SPCORP_Symbol_000+0xa6>
 8001bc6:	e016      	b.n	8001bf6 <MP3D_SPCORP_Symbol_000+0x8e>
 8001bc8:	f20f 0ef0 	addw	lr, pc, #240	; 0xf0
 8001bcc:	ea4f 69d5 	mov.w	r9, r5, lsr #27
 8001bd0:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8001bd4:	086d      	lsrs	r5, r5, #1
 8001bd6:	ea4f 1e19 	mov.w	lr, r9, lsr #4
 8001bda:	fa05 f50e 	lsl.w	r5, r5, lr
 8001bde:	eb16 060e 	adds.w	r6, r6, lr
 8001be2:	d414      	bmi.n	8001c0e <MP3D_SPCORP_Symbol_000+0xa6>
 8001be4:	e007      	b.n	8001bf6 <MP3D_SPCORP_Symbol_000+0x8e>
 8001be6:	ea6f 7915 	mvn.w	r9, r5, lsr #28
 8001bea:	f009 090f 	and.w	r9, r9, #15
 8001bee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8001bf2:	1d36      	adds	r6, r6, #4
 8001bf4:	d40b      	bmi.n	8001c0e <MP3D_SPCORP_Symbol_000+0xa6>
 8001bf6:	f837 eb02 	ldrh.w	lr, [r7], #2
 8001bfa:	fa9e fe9e 	rev16.w	lr, lr
 8001bfe:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
 8001c02:	fa0e fe06 	lsl.w	lr, lr, r6
 8001c06:	ea45 050e 	orr.w	r5, r5, lr
 8001c0a:	f1a6 0610 	sub.w	r6, r6, #16
 8001c0e:	ebb6 4f2a 	cmp.w	r6, sl, asr #16
 8001c12:	dc20      	bgt.n	8001c56 <MP3D_SPCORP_Symbol_000+0xee>
 8001c14:	1e64      	subs	r4, r4, #1
 8001c16:	bfd8      	it	le
 8001c18:	f000 f83c 	blle	8001c94 <MP3D_SPCORP_Symbol_000+0x12c>
 8001c1c:	ea1a 02d9 	ands.w	r2, sl, r9, lsr #3
 8001c20:	bf18      	it	ne
 8001c22:	f000 f82a 	blne	8001c7a <MP3D_SPCORP_Symbol_000+0x112>
 8001c26:	ea1a 0b99 	ands.w	fp, sl, r9, lsr #2
 8001c2a:	bf18      	it	ne
 8001c2c:	f000 f82b 	blne	8001c86 <MP3D_SPCORP_Symbol_000+0x11e>
 8001c30:	e8a8 0804 	stmia.w	r8!, {r2, fp}
 8001c34:	1e64      	subs	r4, r4, #1
 8001c36:	bfd8      	it	le
 8001c38:	f000 f82c 	blle	8001c94 <MP3D_SPCORP_Symbol_000+0x12c>
 8001c3c:	ea1a 0259 	ands.w	r2, sl, r9, lsr #1
 8001c40:	bf18      	it	ne
 8001c42:	f000 f81a 	blne	8001c7a <MP3D_SPCORP_Symbol_000+0x112>
 8001c46:	ea1a 0b09 	ands.w	fp, sl, r9
 8001c4a:	bf18      	it	ne
 8001c4c:	f000 f81b 	blne	8001c86 <MP3D_SPCORP_Symbol_000+0x11e>
 8001c50:	e8a8 0804 	stmia.w	r8!, {r2, fp}
 8001c54:	469f      	mov	pc, r3
 8001c56:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001c58:	b010      	add	sp, #64	; 0x40
 8001c5a:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8001c5e:	4540      	cmp	r0, r8
 8001c60:	bf98      	it	ls
 8001c62:	e8bd 8ff0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c66:	f04f 0100 	mov.w	r1, #0
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	e920 0006 	stmdb	r0!, {r1, r2}
 8001c72:	4540      	cmp	r0, r8
 8001c74:	d1fb      	bne.n	8001c6e <MP3D_SPCORP_Symbol_000+0x106>
 8001c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c7a:	006d      	lsls	r5, r5, #1
 8001c7c:	bf2c      	ite	cs
 8001c7e:	4242      	negcs	r2, r0
 8001c80:	4602      	movcc	r2, r0
 8001c82:	1c76      	adds	r6, r6, #1
 8001c84:	4770      	bx	lr
 8001c86:	006d      	lsls	r5, r5, #1
 8001c88:	bf2c      	ite	cs
 8001c8a:	f1c0 0b00 	rsbcs	fp, r0, #0
 8001c8e:	4683      	movcc	fp, r0
 8001c90:	1c76      	adds	r6, r6, #1
 8001c92:	4770      	bx	lr
 8001c94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c98:	f85c 0b04 	ldr.w	r0, [ip], #4
 8001c9c:	2c00      	cmp	r4, #0
 8001c9e:	d0da      	beq.n	8001c56 <MP3D_SPCORP_Symbol_000+0xee>
 8001ca0:	ea4f 0ba0 	mov.w	fp, r0, asr #2
 8001ca4:	4a10      	ldr	r2, [pc, #64]	; (8001ce8 <MP3D_SPCORP_Symbol_000+0x180>)
 8001ca6:	f000 0003 	and.w	r0, r0, #3
 8001caa:	ea4f 1080 	mov.w	r0, r0, lsl #6
 8001cae:	5810      	ldr	r0, [r2, r0]
 8001cb0:	f1cb 0b19 	rsb	fp, fp, #25
 8001cb4:	fa20 f00b 	lsr.w	r0, r0, fp
 8001cb8:	46f7      	mov	pc, lr
 8001cba:	0000      	.short	0x0000
 8001cbc:	6e6d6f6b 	.word	0x6e6d6f6b
 8001cc0:	59596567 	.word	0x59596567
 8001cc4:	53535656 	.word	0x53535656
 8001cc8:	5c5c5a5a 	.word	0x5c5c5a5a
 8001ccc:	42424242 	.word	0x42424242
 8001cd0:	41414141 	.word	0x41414141
 8001cd4:	44444444 	.word	0x44444444
 8001cd8:	48484848 	.word	0x48484848
 8001cdc:	08011674 	.word	0x08011674
 8001ce0:	08010290 	.word	0x08010290
 8001ce4:	08011880 	.word	0x08011880
 8001ce8:	08011884 	.word	0x08011884

08001cec <IMDCT12>:
 8001cec:	c890      	ldmia	r0!, {r4, r7}
 8001cee:	6905      	ldr	r5, [r0, #16]
 8001cf0:	6946      	ldr	r6, [r0, #20]
 8001cf2:	e9d0 890a 	ldrd	r8, r9, [r0, #40]	; 0x28
 8001cf6:	443d      	add	r5, r7
 8001cf8:	ebc5 0747 	rsb	r7, r5, r7, lsl #1
 8001cfc:	eba8 0806 	sub.w	r8, r8, r6
 8001d00:	eb08 0646 	add.w	r6, r8, r6, lsl #1
 8001d04:	fb35 5302 	smlawb	r3, r5, r2, r5
 8001d08:	eba6 0504 	sub.w	r5, r6, r4
 8001d0c:	eb04 0466 	add.w	r4, r4, r6, asr #1
 8001d10:	eba3 0404 	sub.w	r4, r3, r4
 8001d14:	eba4 0643 	sub.w	r6, r4, r3, lsl #1
 8001d18:	fb38 8302 	smlawb	r3, r8, r2, r8
 8001d1c:	ebc9 0807 	rsb	r8, r9, r7
 8001d20:	eb09 0967 	add.w	r9, r9, r7, asr #1
 8001d24:	eba9 0703 	sub.w	r7, r9, r3
 8001d28:	4499      	add	r9, r3
 8001d2a:	fb34 990c 	smlawb	r9, r4, ip, r9
 8001d2e:	fb35 880b 	smlawb	r8, r5, fp, r8
 8001d32:	fb36 770a 	smlawb	r7, r6, sl, r7
 8001d36:	fb39 441c 	smlawt	r4, r9, ip, r4
 8001d3a:	fb38 551b 	smlawt	r5, r8, fp, r5
 8001d3e:	fb37 661a 	smlawt	r6, r7, sl, r6
 8001d42:	eba4 0409 	sub.w	r4, r4, r9
 8001d46:	fb34 990c 	smlawb	r9, r4, ip, r9
 8001d4a:	fb35 880b 	smlawb	r8, r5, fp, r8
 8001d4e:	fb36 770a 	smlawb	r7, r6, sl, r7
 8001d52:	680b      	ldr	r3, [r1, #0]
 8001d54:	600c      	str	r4, [r1, #0]
 8001d56:	684c      	ldr	r4, [r1, #4]
 8001d58:	604d      	str	r5, [r1, #4]
 8001d5a:	688d      	ldr	r5, [r1, #8]
 8001d5c:	608e      	str	r6, [r1, #8]
 8001d5e:	fb33 990a 	smlawb	r9, r3, sl, r9
 8001d62:	fb34 880b 	smlawb	r8, r4, fp, r8
 8001d66:	fb35 770c 	smlawb	r7, r5, ip, r7
 8001d6a:	fb39 331a 	smlawt	r3, r9, sl, r3
 8001d6e:	fb38 441b 	smlawt	r4, r8, fp, r4
 8001d72:	fb37 551c 	smlawt	r5, r7, ip, r5
 8001d76:	fb33 990a 	smlawb	r9, r3, sl, r9
 8001d7a:	fb34 880b 	smlawb	r8, r4, fp, r8
 8001d7e:	eba5 0507 	sub.w	r5, r5, r7
 8001d82:	fb35 770c 	smlawb	r7, r5, ip, r7
 8001d86:	4770      	bx	lr

08001d88 <IMDCT12_TWICE>:
 8001d88:	f20f 039c 	addw	r3, pc, #156	; 0x9c
 8001d8c:	e893 1c10 	ldmia.w	r3, {r4, sl, fp, ip}
 8001d90:	eb04 4202 	add.w	r2, r4, r2, lsl #16
 8001d94:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
 8001d98:	e8b1 03f0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9}
 8001d9c:	e900 03f0 	stmdb	r0, {r4, r5, r6, r7, r8, r9}
 8001da0:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8001da4:	f7ff ffa2 	bl	8001cec <IMDCT12>
 8001da8:	f1a0 0e38 	sub.w	lr, r0, #56	; 0x38
 8001dac:	e88e 03b8 	stmia.w	lr, {r3, r4, r5, r7, r8, r9}
 8001db0:	f7ff ff9c 	bl	8001cec <IMDCT12>
 8001db4:	f1a0 0e28 	sub.w	lr, r0, #40	; 0x28
 8001db8:	e88e 03b8 	stmia.w	lr, {r3, r4, r5, r7, r8, r9}
 8001dbc:	f7ff ff96 	bl	8001cec <IMDCT12>
 8001dc0:	e901 03b8 	stmdb	r1, {r3, r4, r5, r7, r8, r9}
 8001dc4:	f101 010c 	add.w	r1, r1, #12
 8001dc8:	e8b1 03f0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9}
 8001dcc:	f1c5 0500 	rsb	r5, r5, #0
 8001dd0:	f1c7 0700 	rsb	r7, r7, #0
 8001dd4:	f1c9 0900 	rsb	r9, r9, #0
 8001dd8:	e900 03f0 	stmdb	r0, {r4, r5, r6, r7, r8, r9}
 8001ddc:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8001de0:	f7ff ff84 	bl	8001cec <IMDCT12>
 8001de4:	f1a0 0e38 	sub.w	lr, r0, #56	; 0x38
 8001de8:	f1c4 0400 	rsb	r4, r4, #0
 8001dec:	f1c9 0900 	rsb	r9, r9, #0
 8001df0:	f1c7 0700 	rsb	r7, r7, #0
 8001df4:	e88e 03b8 	stmia.w	lr, {r3, r4, r5, r7, r8, r9}
 8001df8:	f7ff ff78 	bl	8001cec <IMDCT12>
 8001dfc:	f1a0 0e28 	sub.w	lr, r0, #40	; 0x28
 8001e00:	f1c4 0400 	rsb	r4, r4, #0
 8001e04:	f1c9 0900 	rsb	r9, r9, #0
 8001e08:	f1c7 0700 	rsb	r7, r7, #0
 8001e0c:	e88e 03b8 	stmia.w	lr, {r3, r4, r5, r7, r8, r9}
 8001e10:	f7ff ff6c 	bl	8001cec <IMDCT12>
 8001e14:	e901 03b8 	stmdb	r1, {r3, r4, r5, r7, r8, r9}
 8001e18:	f101 010c 	add.w	r1, r1, #12
 8001e1c:	f5b2 3200 	subs.w	r2, r2, #131072	; 0x20000
 8001e20:	d5ba      	bpl.n	8001d98 <IMDCT12_TWICE+0x10>
 8001e22:	f1a0 0018 	sub.w	r0, r0, #24
 8001e26:	e2c3      	b.n	80023b0 <MP3D_SPCORP_Symbol_028+0x1c>
 8001e28:	ffffddb4 	.word	0xffffddb4
 8001e2c:	de9610c7 	.word	0xde9610c7
 8001e30:	9e0832ec 	.word	0x9e0832ec
 8001e34:	642856e6 	.word	0x642856e6

08001e38 <IMDCT36_TWICE>:
 8001e38:	f8df 454c 	ldr.w	r4, [pc, #1356]	; 8002388 <IMDCT36_TWICE+0x550>
 8001e3c:	f84d ed04 	str.w	lr, [sp, #-4]!
 8001e40:	eb04 4e02 	add.w	lr, r4, r2, lsl #16
 8001e44:	ea4e 7e83 	orr.w	lr, lr, r3, lsl #30
 8001e48:	f8df 25a0 	ldr.w	r2, [pc, #1440]	; 80023ec <MP3D_SPCORP_Symbol_028+0x58>
 8001e4c:	f100 0004 	add.w	r0, r0, #4
 8001e50:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 8001e52:	4423      	add	r3, r4
 8001e54:	eba3 0b44 	sub.w	fp, r3, r4, lsl #1
 8001e58:	eba6 0a05 	sub.w	sl, r6, r5
 8001e5c:	ebaa 0c46 	sub.w	ip, sl, r6, lsl #1
 8001e60:	f840 3c10 	str.w	r3, [r0, #-16]
 8001e64:	f840 cc0c 	str.w	ip, [r0, #-12]
 8001e68:	e8b0 1038 	ldmia.w	r0!, {r3, r4, r5, ip}
 8001e6c:	4423      	add	r3, r4
 8001e6e:	eba3 0944 	sub.w	r9, r3, r4, lsl #1
 8001e72:	ebac 0805 	sub.w	r8, ip, r5
 8001e76:	eba8 0c4c 	sub.w	ip, r8, ip, lsl #1
 8001e7a:	f840 3c18 	str.w	r3, [r0, #-24]
 8001e7e:	f840 cc14 	str.w	ip, [r0, #-20]
 8001e82:	c888      	ldmia	r0!, {r3, r7}
 8001e84:	e8b0 1040 	ldmia.w	r0!, {r6, ip}
 8001e88:	443b      	add	r3, r7
 8001e8a:	eba3 0747 	sub.w	r7, r3, r7, lsl #1
 8001e8e:	ebac 0606 	sub.w	r6, ip, r6
 8001e92:	eba6 0c4c 	sub.w	ip, r6, ip, lsl #1
 8001e96:	f840 3c20 	str.w	r3, [r0, #-32]
 8001e9a:	f840 cc1c 	str.w	ip, [r0, #-28]
 8001e9e:	c828      	ldmia	r0!, {r3, r5}
 8001ea0:	e8b0 1010 	ldmia.w	r0!, {r4, ip}
 8001ea4:	442b      	add	r3, r5
 8001ea6:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
 8001eaa:	ebac 0404 	sub.w	r4, ip, r4
 8001eae:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8001eb2:	f840 3c28 	str.w	r3, [r0, #-40]
 8001eb6:	f840 cc24 	str.w	ip, [r0, #-36]
 8001eba:	f850 3944 	ldr.w	r3, [r0], #-68
 8001ebe:	eba4 0c08 	sub.w	ip, r4, r8
 8001ec2:	ebac 0c0a 	sub.w	ip, ip, sl
 8001ec6:	44a0      	add	r8, r4
 8001ec8:	44a2      	add	sl, r4
 8001eca:	eba3 0409 	sub.w	r4, r3, r9
 8001ece:	eb03 0369 	add.w	r3, r3, r9, asr #1
 8001ed2:	eba5 0907 	sub.w	r9, r5, r7
 8001ed6:	eba9 090b 	sub.w	r9, r9, fp
 8001eda:	442f      	add	r7, r5
 8001edc:	44ab      	add	fp, r5
 8001ede:	eb04 0569 	add.w	r5, r4, r9, asr #1
 8001ee2:	eba4 0409 	sub.w	r4, r4, r9
 8001ee6:	f84d 4d10 	str.w	r4, [sp, #-16]!
 8001eea:	fb3c cc0e 	smlawb	ip, ip, lr, ip
 8001eee:	fb36 660e 	smlawb	r6, r6, lr, r6
 8001ef2:	f8df 9498 	ldr.w	r9, [pc, #1176]	; 800238c <IMDCT36_TWICE+0x554>
 8001ef6:	ebac 0505 	sub.w	r5, ip, r5
 8001efa:	eba5 0c4c 	sub.w	ip, r5, ip, lsl #1
 8001efe:	fb37 7419 	smlawt	r4, r7, r9, r7
 8001f02:	fb3b 4409 	smlawb	r4, fp, r9, r4
 8001f06:	ebab 0b07 	sub.w	fp, fp, r7
 8001f0a:	fb3b bb19 	smlawt	fp, fp, r9, fp
 8001f0e:	fb37 f709 	smulwb	r7, r7, r9
 8001f12:	f8df 947c 	ldr.w	r9, [pc, #1148]	; 8002390 <IMDCT36_TWICE+0x558>
 8001f16:	ebab 0b07 	sub.w	fp, fp, r7
 8001f1a:	eba8 070a 	sub.w	r7, r8, sl
 8001f1e:	fb38 8809 	smlawb	r8, r8, r9, r8
 8001f22:	fb3a aa19 	smlawt	sl, sl, r9, sl
 8001f26:	fb37 aa09 	smlawb	sl, r7, r9, sl
 8001f2a:	4433      	add	r3, r6
 8001f2c:	44ba      	add	sl, r7
 8001f2e:	fb37 7719 	smlawt	r7, r7, r9, r7
 8001f32:	eba3 0646 	sub.w	r6, r3, r6, lsl #1
 8001f36:	eba8 0907 	sub.w	r9, r8, r7
 8001f3a:	eb04 070b 	add.w	r7, r4, fp
 8001f3e:	eba9 080a 	sub.w	r8, r9, sl
 8001f42:	4454      	add	r4, sl
 8001f44:	eba4 0a4a 	sub.w	sl, r4, sl, lsl #1
 8001f48:	441c      	add	r4, r3
 8001f4a:	44b2      	add	sl, r6
 8001f4c:	44cb      	add	fp, r9
 8001f4e:	ebab 0949 	sub.w	r9, fp, r9, lsl #1
 8001f52:	44b3      	add	fp, r6
 8001f54:	4499      	add	r9, r3
 8001f56:	4447      	add	r7, r8
 8001f58:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8001f5c:	eba7 0706 	sub.w	r7, r7, r6
 8001f60:	eba8 0803 	sub.w	r8, r8, r3
 8001f64:	e92d 0180 	stmdb	sp!, {r7, r8}
 8001f68:	f84d 9d04 	str.w	r9, [sp, #-4]!
 8001f6c:	f84d bd04 	str.w	fp, [sp, #-4]!
 8001f70:	b420      	push	{r5}
 8001f72:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001f76:	e92d 0410 	stmdb	sp!, {r4, sl}
 8001f7a:	e890 0ff8 	ldmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001f7e:	f1c3 0300 	rsb	r3, r3, #0
 8001f82:	eba4 0c08 	sub.w	ip, r4, r8
 8001f86:	ebac 0c0a 	sub.w	ip, ip, sl
 8001f8a:	44a0      	add	r8, r4
 8001f8c:	44a2      	add	sl, r4
 8001f8e:	eba3 0409 	sub.w	r4, r3, r9
 8001f92:	eb03 0369 	add.w	r3, r3, r9, asr #1
 8001f96:	eba5 0907 	sub.w	r9, r5, r7
 8001f9a:	eba9 090b 	sub.w	r9, r9, fp
 8001f9e:	442f      	add	r7, r5
 8001fa0:	44ab      	add	fp, r5
 8001fa2:	eb04 0569 	add.w	r5, r4, r9, asr #1
 8001fa6:	eba4 0409 	sub.w	r4, r4, r9
 8001faa:	940b      	str	r4, [sp, #44]	; 0x2c
 8001fac:	fb3c cc0e 	smlawb	ip, ip, lr, ip
 8001fb0:	fb36 660e 	smlawb	r6, r6, lr, r6
 8001fb4:	f8df 93d4 	ldr.w	r9, [pc, #980]	; 800238c <IMDCT36_TWICE+0x554>
 8001fb8:	4465      	add	r5, ip
 8001fba:	eba5 0c4c 	sub.w	ip, r5, ip, lsl #1
 8001fbe:	fb37 7419 	smlawt	r4, r7, r9, r7
 8001fc2:	fb3b 4409 	smlawb	r4, fp, r9, r4
 8001fc6:	ebab 0b07 	sub.w	fp, fp, r7
 8001fca:	fb3b bb19 	smlawt	fp, fp, r9, fp
 8001fce:	fb37 f709 	smulwb	r7, r7, r9
 8001fd2:	f8df 93bc 	ldr.w	r9, [pc, #956]	; 8002390 <IMDCT36_TWICE+0x558>
 8001fd6:	ebab 0b07 	sub.w	fp, fp, r7
 8001fda:	eba8 070a 	sub.w	r7, r8, sl
 8001fde:	fb38 8809 	smlawb	r8, r8, r9, r8
 8001fe2:	fb3a aa19 	smlawt	sl, sl, r9, sl
 8001fe6:	fb37 aa09 	smlawb	sl, r7, r9, sl
 8001fea:	4433      	add	r3, r6
 8001fec:	44ba      	add	sl, r7
 8001fee:	fb37 7719 	smlawt	r7, r7, r9, r7
 8001ff2:	eba3 0646 	sub.w	r6, r3, r6, lsl #1
 8001ff6:	eba8 0907 	sub.w	r9, r8, r7
 8001ffa:	eb04 070b 	add.w	r7, r4, fp
 8001ffe:	eba9 080a 	sub.w	r8, r9, sl
 8002002:	4454      	add	r4, sl
 8002004:	eba4 0a4a 	sub.w	sl, r4, sl, lsl #1
 8002008:	441c      	add	r4, r3
 800200a:	44b2      	add	sl, r6
 800200c:	44cb      	add	fp, r9
 800200e:	ebab 0949 	sub.w	r9, fp, r9, lsl #1
 8002012:	44b3      	add	fp, r6
 8002014:	4499      	add	r9, r3
 8002016:	4447      	add	r7, r8
 8002018:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 800201c:	eba6 0707 	sub.w	r7, r6, r7
 8002020:	eba3 0808 	sub.w	r8, r3, r8
 8002024:	9709      	str	r7, [sp, #36]	; 0x24
 8002026:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800202a:	4af1      	ldr	r2, [pc, #964]	; (80023f0 <MP3D_SPCORP_Symbol_028+0x5c>)
 800202c:	f5be 0e01 	subs.w	lr, lr, #8454144	; 0x810000
 8002030:	f100 80ea 	bmi.w	8002208 <IMDCT36_TWICE+0x3d0>
 8002034:	ea5f 284e 	movs.w	r8, lr, lsl #9
 8002038:	bc48      	pop	{r3, r6}
 800203a:	e8b2 0180 	ldmia.w	r2!, {r7, r8}
 800203e:	b500      	push	{lr}
 8002040:	fb34 3307 	smlawb	r3, r4, r7, r3
 8002044:	fb3a 6608 	smlawb	r6, sl, r8, r6
 8002048:	fb33 4417 	smlawt	r4, r3, r7, r4
 800204c:	fb36 aa18 	smlawt	sl, r6, r8, sl
 8002050:	eba4 0403 	sub.w	r4, r4, r3
 8002054:	fb34 3307 	smlawb	r3, r4, r7, r3
 8002058:	fb3a 6608 	smlawb	r6, sl, r8, r6
 800205c:	f8d1 e000 	ldr.w	lr, [r1]
 8002060:	600c      	str	r4, [r1, #0]
 8002062:	4674      	mov	r4, lr
 8002064:	f101 0120 	add.w	r1, r1, #32
 8002068:	f8d1 e000 	ldr.w	lr, [r1]
 800206c:	f8c1 a000 	str.w	sl, [r1]
 8002070:	46f2      	mov	sl, lr
 8002072:	f1a1 011c 	sub.w	r1, r1, #28
 8002076:	fb34 3308 	smlawb	r3, r4, r8, r3
 800207a:	fb3a 6607 	smlawb	r6, sl, r7, r6
 800207e:	fb33 4418 	smlawt	r4, r3, r8, r4
 8002082:	fb36 aa17 	smlawt	sl, r6, r7, sl
 8002086:	fb34 3308 	smlawb	r3, r4, r8, r3
 800208a:	ebaa 0a06 	sub.w	sl, sl, r6
 800208e:	fb3a 6607 	smlawb	r6, sl, r7, r6
 8002092:	bf3c      	itt	cc
 8002094:	425b      	negcc	r3, r3
 8002096:	4276      	negcc	r6, r6
 8002098:	f840 ac28 	str.w	sl, [r0, #-40]
 800209c:	f840 6c24 	str.w	r6, [r0, #-36]
 80020a0:	f840 4c48 	str.w	r4, [r0, #-72]
 80020a4:	f840 3c04 	str.w	r3, [r0, #-4]
 80020a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80020ac:	bc48      	pop	{r3, r6}
 80020ae:	e8b2 0180 	ldmia.w	r2!, {r7, r8}
 80020b2:	fb35 3307 	smlawb	r3, r5, r7, r3
 80020b6:	fb3c 6608 	smlawb	r6, ip, r8, r6
 80020ba:	fb33 5517 	smlawt	r5, r3, r7, r5
 80020be:	fb36 cc18 	smlawt	ip, r6, r8, ip
 80020c2:	eba5 0503 	sub.w	r5, r5, r3
 80020c6:	fb35 3307 	smlawb	r3, r5, r7, r3
 80020ca:	fb3c 6608 	smlawb	r6, ip, r8, r6
 80020ce:	f8d1 a000 	ldr.w	sl, [r1]
 80020d2:	f841 5b18 	str.w	r5, [r1], #24
 80020d6:	680d      	ldr	r5, [r1, #0]
 80020d8:	f841 c914 	str.w	ip, [r1], #-20
 80020dc:	fb3a 3308 	smlawb	r3, sl, r8, r3
 80020e0:	fb35 6607 	smlawb	r6, r5, r7, r6
 80020e4:	fb33 aa18 	smlawt	sl, r3, r8, sl
 80020e8:	fb36 5517 	smlawt	r5, r6, r7, r5
 80020ec:	fb3a 3308 	smlawb	r3, sl, r8, r3
 80020f0:	eba5 0506 	sub.w	r5, r5, r6
 80020f4:	fb35 6607 	smlawb	r6, r5, r7, r6
 80020f8:	bf3c      	itt	cc
 80020fa:	f1ca 0a00 	rsbcc	sl, sl, #0
 80020fe:	426d      	negcc	r5, r5
 8002100:	f840 5c2c 	str.w	r5, [r0, #-44]
 8002104:	f840 6c20 	str.w	r6, [r0, #-32]
 8002108:	f840 ac44 	str.w	sl, [r0, #-68]
 800210c:	f840 3c08 	str.w	r3, [r0, #-8]
 8002110:	bc48      	pop	{r3, r6}
 8002112:	e8b2 0180 	ldmia.w	r2!, {r7, r8}
 8002116:	fb3b 3307 	smlawb	r3, fp, r7, r3
 800211a:	fb39 6608 	smlawb	r6, r9, r8, r6
 800211e:	fb33 bb17 	smlawt	fp, r3, r7, fp
 8002122:	fb36 9918 	smlawt	r9, r6, r8, r9
 8002126:	ebab 0b03 	sub.w	fp, fp, r3
 800212a:	fb3b 3307 	smlawb	r3, fp, r7, r3
 800212e:	fb39 6608 	smlawb	r6, r9, r8, r6
 8002132:	f8d1 a000 	ldr.w	sl, [r1]
 8002136:	f841 bb10 	str.w	fp, [r1], #16
 800213a:	f8d1 b000 	ldr.w	fp, [r1]
 800213e:	f841 990c 	str.w	r9, [r1], #-12
 8002142:	fb3a 3308 	smlawb	r3, sl, r8, r3
 8002146:	fb3b 6607 	smlawb	r6, fp, r7, r6
 800214a:	fb33 aa18 	smlawt	sl, r3, r8, sl
 800214e:	fb36 bb17 	smlawt	fp, r6, r7, fp
 8002152:	fb3a 3308 	smlawb	r3, sl, r8, r3
 8002156:	ebab 0b06 	sub.w	fp, fp, r6
 800215a:	fb3b 6607 	smlawb	r6, fp, r7, r6
 800215e:	bf3c      	itt	cc
 8002160:	425b      	negcc	r3, r3
 8002162:	4276      	negcc	r6, r6
 8002164:	f840 bc30 	str.w	fp, [r0, #-48]
 8002168:	f840 6c1c 	str.w	r6, [r0, #-28]
 800216c:	f840 ac40 	str.w	sl, [r0, #-64]
 8002170:	f840 3c0c 	str.w	r3, [r0, #-12]
 8002174:	e8b2 0118 	ldmia.w	r2!, {r3, r4, r8}
 8002178:	e8bd 1ec0 	ldmia.w	sp!, {r6, r7, r9, sl, fp, ip}
 800217c:	fb3a 6604 	smlawb	r6, sl, r4, r6
 8002180:	fb3b 7708 	smlawb	r7, fp, r8, r7
 8002184:	fb3c 9903 	smlawb	r9, ip, r3, r9
 8002188:	fb36 aa14 	smlawt	sl, r6, r4, sl
 800218c:	fb37 bb18 	smlawt	fp, r7, r8, fp
 8002190:	fb39 cc13 	smlawt	ip, r9, r3, ip
 8002194:	fb3a 6604 	smlawb	r6, sl, r4, r6
 8002198:	fb3b 7708 	smlawb	r7, fp, r8, r7
 800219c:	fb3c 9903 	smlawb	r9, ip, r3, r9
 80021a0:	680d      	ldr	r5, [r1, #0]
 80021a2:	f841 ab08 	str.w	sl, [r1], #8
 80021a6:	f8d1 a000 	ldr.w	sl, [r1]
 80021aa:	f841 b904 	str.w	fp, [r1], #-4
 80021ae:	f8d1 b000 	ldr.w	fp, [r1]
 80021b2:	f841 cb14 	str.w	ip, [r1], #20
 80021b6:	fb35 6608 	smlawb	r6, r5, r8, r6
 80021ba:	fb3a 7704 	smlawb	r7, sl, r4, r7
 80021be:	fb3b 9903 	smlawb	r9, fp, r3, r9
 80021c2:	fb36 5518 	smlawt	r5, r6, r8, r5
 80021c6:	fb37 aa14 	smlawt	sl, r7, r4, sl
 80021ca:	fb39 bb13 	smlawt	fp, r9, r3, fp
 80021ce:	fb35 6608 	smlawb	r6, r5, r8, r6
 80021d2:	fb3a 7704 	smlawb	r7, sl, r4, r7
 80021d6:	fb3b 9903 	smlawb	r9, fp, r3, r9
 80021da:	bf3e      	ittt	cc
 80021dc:	426d      	negcc	r5, r5
 80021de:	f1ca 0a00 	rsbcc	sl, sl, #0
 80021e2:	f1c9 0900 	rsbcc	r9, r9, #0
 80021e6:	f840 ac34 	str.w	sl, [r0, #-52]
 80021ea:	f840 7c18 	str.w	r7, [r0, #-24]
 80021ee:	f840 5c3c 	str.w	r5, [r0, #-60]
 80021f2:	f840 6c10 	str.w	r6, [r0, #-16]
 80021f6:	f840 bc38 	str.w	fp, [r0, #-56]
 80021fa:	f840 9c14 	str.w	r9, [r0, #-20]
 80021fe:	f100 004c 	add.w	r0, r0, #76	; 0x4c
 8002202:	f53f ae25 	bmi.w	8001e50 <IMDCT36_TWICE+0x18>
 8002206:	bd00      	pop	{pc}
 8002208:	ea5f 284e 	movs.w	r8, lr, lsl #9
 800220c:	f1a0 0048 	sub.w	r0, r0, #72	; 0x48
 8002210:	e8b1 01c8 	ldmia.w	r1!, {r3, r6, r7, r8}
 8002214:	bf3c      	itt	cc
 8002216:	4276      	negcc	r6, r6
 8002218:	f1c8 0800 	rsbcc	r8, r8, #0
 800221c:	e8a0 01c8 	stmia.w	r0!, {r3, r6, r7, r8}
 8002220:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002224:	f851 7910 	ldr.w	r7, [r1], #-16
 8002228:	bf38      	it	cc
 800222a:	f1c8 0800 	rsbcc	r8, r8, #0
 800222e:	f8c0 8004 	str.w	r8, [r0, #4]
 8002232:	f840 7b38 	str.w	r7, [r0], #56
 8002236:	bc48      	pop	{r3, r6}
 8002238:	e8b2 0180 	ldmia.w	r2!, {r7, r8}
 800223c:	fb34 3307 	smlawb	r3, r4, r7, r3
 8002240:	fb3a 6608 	smlawb	r6, sl, r8, r6
 8002244:	fb33 4417 	smlawt	r4, r3, r7, r4
 8002248:	fb36 aa18 	smlawt	sl, r6, r8, sl
 800224c:	eba4 0403 	sub.w	r4, r4, r3
 8002250:	fb34 3307 	smlawb	r3, r4, r7, r3
 8002254:	fb3a 6608 	smlawb	r6, sl, r8, r6
 8002258:	e8b2 0180 	ldmia.w	r2!, {r7, r8}
 800225c:	f841 4b20 	str.w	r4, [r1], #32
 8002260:	680c      	ldr	r4, [r1, #0]
 8002262:	f8c1 a000 	str.w	sl, [r1]
 8002266:	46a2      	mov	sl, r4
 8002268:	bf38      	it	cc
 800226a:	425b      	negcc	r3, r3
 800226c:	fb3a 6607 	smlawb	r6, sl, r7, r6
 8002270:	f1a1 011c 	sub.w	r1, r1, #28
 8002274:	fb36 aa17 	smlawt	sl, r6, r7, sl
 8002278:	f840 3c04 	str.w	r3, [r0, #-4]
 800227c:	ebaa 0a06 	sub.w	sl, sl, r6
 8002280:	fb3a 6607 	smlawb	r6, sl, r7, r6
 8002284:	f840 ac28 	str.w	sl, [r0, #-40]
 8002288:	bf38      	it	cc
 800228a:	4276      	negcc	r6, r6
 800228c:	f840 6c24 	str.w	r6, [r0, #-36]
 8002290:	bc48      	pop	{r3, r6}
 8002292:	fb35 3307 	smlawb	r3, r5, r7, r3
 8002296:	fb3c 6608 	smlawb	r6, ip, r8, r6
 800229a:	fb33 5517 	smlawt	r5, r3, r7, r5
 800229e:	fb36 cc18 	smlawt	ip, r6, r8, ip
 80022a2:	eba5 0503 	sub.w	r5, r5, r3
 80022a6:	fb35 3307 	smlawb	r3, r5, r7, r3
 80022aa:	fb3c 6608 	smlawb	r6, ip, r8, r6
 80022ae:	6897      	ldr	r7, [r2, #8]
 80022b0:	f841 5b18 	str.w	r5, [r1], #24
 80022b4:	680d      	ldr	r5, [r1, #0]
 80022b6:	f8c1 c000 	str.w	ip, [r1]
 80022ba:	46ac      	mov	ip, r5
 80022bc:	fb3c 6607 	smlawb	r6, ip, r7, r6
 80022c0:	f1a1 0114 	sub.w	r1, r1, #20
 80022c4:	fb36 cc17 	smlawt	ip, r6, r7, ip
 80022c8:	f840 3c08 	str.w	r3, [r0, #-8]
 80022cc:	fb3c 6607 	smlawb	r6, ip, r7, r6
 80022d0:	bf38      	it	cc
 80022d2:	f1cc 0c00 	rsbcc	ip, ip, #0
 80022d6:	f840 cc2c 	str.w	ip, [r0, #-44]
 80022da:	f840 6c20 	str.w	r6, [r0, #-32]
 80022de:	bc48      	pop	{r3, r6}
 80022e0:	e8b2 0180 	ldmia.w	r2!, {r7, r8}
 80022e4:	fb3b 3307 	smlawb	r3, fp, r7, r3
 80022e8:	fb39 6608 	smlawb	r6, r9, r8, r6
 80022ec:	fb33 bb17 	smlawt	fp, r3, r7, fp
 80022f0:	fb36 9918 	smlawt	r9, r6, r8, r9
 80022f4:	ebab 0b03 	sub.w	fp, fp, r3
 80022f8:	fb3b 3307 	smlawb	r3, fp, r7, r3
 80022fc:	fb39 6608 	smlawb	r6, r9, r8, r6
 8002300:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 8002304:	f841 bb10 	str.w	fp, [r1], #16
 8002308:	f8d1 b000 	ldr.w	fp, [r1]
 800230c:	f8c1 9000 	str.w	r9, [r1]
 8002310:	46d9      	mov	r9, fp
 8002312:	bf38      	it	cc
 8002314:	425b      	negcc	r3, r3
 8002316:	fb39 6607 	smlawb	r6, r9, r7, r6
 800231a:	f1a1 010c 	sub.w	r1, r1, #12
 800231e:	fb36 9917 	smlawt	r9, r6, r7, r9
 8002322:	f840 3c0c 	str.w	r3, [r0, #-12]
 8002326:	fb39 6607 	smlawb	r6, r9, r7, r6
 800232a:	f840 9c30 	str.w	r9, [r0, #-48]
 800232e:	bf38      	it	cc
 8002330:	4276      	negcc	r6, r6
 8002332:	f840 6c1c 	str.w	r6, [r0, #-28]
 8002336:	e8b2 0118 	ldmia.w	r2!, {r3, r4, r8}
 800233a:	e8bd 1ec0 	ldmia.w	sp!, {r6, r7, r9, sl, fp, ip}
 800233e:	fb3a 6604 	smlawb	r6, sl, r4, r6
 8002342:	fb3b 7708 	smlawb	r7, fp, r8, r7
 8002346:	fb3c 9903 	smlawb	r9, ip, r3, r9
 800234a:	fb36 aa14 	smlawt	sl, r6, r4, sl
 800234e:	fb37 bb18 	smlawt	fp, r7, r8, fp
 8002352:	fb39 cc13 	smlawt	ip, r9, r3, ip
 8002356:	fb3a 6604 	smlawb	r6, sl, r4, r6
 800235a:	fb3b 7708 	smlawb	r7, fp, r8, r7
 800235e:	fb3c 9903 	smlawb	r9, ip, r3, r9
 8002362:	e8a1 1400 	stmia.w	r1!, {sl, ip}
 8002366:	f841 bb10 	str.w	fp, [r1], #16
 800236a:	bf38      	it	cc
 800236c:	f1c9 0900 	rsbcc	r9, r9, #0
 8002370:	f840 7c18 	str.w	r7, [r0, #-24]
 8002374:	f840 9c14 	str.w	r9, [r0, #-20]
 8002378:	f840 6c10 	str.w	r6, [r0, #-16]
 800237c:	f100 004c 	add.w	r0, r0, #76	; 0x4c
 8002380:	f53f ad66 	bmi.w	8001e50 <IMDCT36_TWICE+0x18>
 8002384:	bd00      	pop	{pc}
 8002386:	0000      	.short	0x0000
 8002388:	403fddb4 	.word	0x403fddb4
 800238c:	c41b2c74 	.word	0xc41b2c74
 8002390:	fc1ca48e 	.word	0xfc1ca48e

08002394 <MP3D_SPCORP_Symbol_028>:
 8002394:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8002398:	2a00      	cmp	r2, #0
 800239a:	d117      	bne.n	80023cc <MP3D_SPCORP_Symbol_028+0x38>
 800239c:	9a00      	ldr	r2, [sp, #0]
 800239e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	f43f acf0 	beq.w	8001d88 <IMDCT12_TWICE>
 80023a8:	f7ff fd46 	bl	8001e38 <IMDCT36_TWICE>
 80023ac:	f1a0 004c 	sub.w	r0, r0, #76	; 0x4c
 80023b0:	f04f 0100 	mov.w	r1, #0
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	c00e      	stmia	r0!, {r1, r2, r3}
 80023be:	c00e      	stmia	r0!, {r1, r2, r3}
 80023c0:	c00e      	stmia	r0!, {r1, r2, r3}
 80023c2:	c00e      	stmia	r0!, {r1, r2, r3}
 80023c4:	c00e      	stmia	r0!, {r1, r2, r3}
 80023c6:	c00e      	stmia	r0!, {r1, r2, r3}
 80023c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023cc:	e92d 4ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023d0:	f04f 0300 	mov.w	r3, #0
 80023d4:	f7ff fd30 	bl	8001e38 <IMDCT36_TWICE>
 80023d8:	bc0c      	pop	{r2, r3}
 80023da:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80023de:	ebd2 020c 	rsbs	r2, r2, ip
 80023e2:	bf88      	it	hi
 80023e4:	1f00      	subhi	r0, r0, #4
 80023e6:	d8dc      	bhi.n	80023a2 <MP3D_SPCORP_Symbol_028+0xe>
 80023e8:	e7e0      	b.n	80023ac <MP3D_SPCORP_Symbol_028+0x18>
 80023ea:	0000      	.short	0x0000
 80023ec:	080119a4 	.word	0x080119a4
 80023f0:	08011980 	.word	0x08011980

080023f4 <MP3D_SPCORP_Symbol_032>:
 80023f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023f8:	eb00 0b82 	add.w	fp, r0, r2, lsl #2
 80023fc:	4558      	cmp	r0, fp
 80023fe:	4603      	mov	r3, r0
 8002400:	d247      	bcs.n	8002492 <MP3D_SPCORP_Symbol_032+0x9e>
 8002402:	f811 5b03 	ldrb.w	r5, [r1], #3
 8002406:	f8df c098 	ldr.w	ip, [pc, #152]	; 80024a0 <MP3D_SPCORP_Symbol_032+0xac>
 800240a:	f8df e098 	ldr.w	lr, [pc, #152]	; 80024a4 <MP3D_SPCORP_Symbol_032+0xb0>
 800240e:	ea4f 0545 	mov.w	r5, r5, lsl #1
 8002412:	f83c c005 	ldrh.w	ip, [ip, r5]
 8002416:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800241a:	f1a5 0602 	sub.w	r6, r5, #2
 800241e:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
 8002422:	d030      	beq.n	8002486 <MP3D_SPCORP_Symbol_032+0x92>
 8002424:	f81e af01 	ldrb.w	sl, [lr, #1]!
 8002428:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800242c:	d3fa      	bcc.n	8002424 <MP3D_SPCORP_Symbol_032+0x30>
 800242e:	4652      	mov	r2, sl
 8002430:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 8002434:	e897 0300 	ldmia.w	r7, {r8, r9}
 8002438:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800243c:	ebb2 0246 	subs.w	r2, r2, r6, lsl #1
 8002440:	bf44      	itt	mi
 8002442:	eb12 0206 	addsmi.w	r2, r2, r6
 8002446:	eb12 0206 	addsmi.w	r2, r2, r6
 800244a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 800244e:	4552      	cmp	r2, sl
 8002450:	bf18      	it	ne
 8002452:	e897 0030 	ldmiane.w	r7, {r4, r5}
 8002456:	e887 0300 	stmia.w	r7, {r8, r9}
 800245a:	d011      	beq.n	8002480 <MP3D_SPCORP_Symbol_032+0x8c>
 800245c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002460:	ebb2 0246 	subs.w	r2, r2, r6, lsl #1
 8002464:	bf44      	itt	mi
 8002466:	eb12 0206 	addsmi.w	r2, r2, r6
 800246a:	eb12 0206 	addsmi.w	r2, r2, r6
 800246e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 8002472:	4552      	cmp	r2, sl
 8002474:	bf18      	it	ne
 8002476:	e897 0300 	ldmiane.w	r7, {r8, r9}
 800247a:	e887 0030 	stmia.w	r7, {r4, r5}
 800247e:	d1db      	bne.n	8002438 <MP3D_SPCORP_Symbol_032+0x44>
 8002480:	f1bc 0f00 	cmp.w	ip, #0
 8002484:	d1ce      	bne.n	8002424 <MP3D_SPCORP_Symbol_032+0x30>
 8002486:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800248a:	f103 0308 	add.w	r3, r3, #8
 800248e:	455b      	cmp	r3, fp
 8002490:	d3b7      	bcc.n	8002402 <MP3D_SPCORP_Symbol_032+0xe>
 8002492:	eba3 0000 	sub.w	r0, r3, r0
 8002496:	ea4f 00a0 	mov.w	r0, r0, asr #2
 800249a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800249e:	0000      	.short	0x0000
 80024a0:	080119b0 	.word	0x080119b0
 80024a4:	080119a3 	.word	0x080119a3

080024a8 <MP3D_SPCORP_Symbol_031>:
 80024a8:	e92d 09f0 	stmdb	sp!, {r4, r5, r6, r7, r8, fp}
 80024ac:	f500 6210 	add.w	r2, r0, #2304	; 0x900
 80024b0:	f101 0102 	add.w	r1, r1, #2
 80024b4:	1089      	asrs	r1, r1, #2
 80024b6:	d20e      	bcs.n	80024d6 <MP3D_SPCORP_Symbol_031+0x2e>
 80024b8:	e890 0018 	ldmia.w	r0, {r3, r4}
 80024bc:	e892 1800 	ldmia.w	r2, {fp, ip}
 80024c0:	1e49      	subs	r1, r1, #1
 80024c2:	445b      	add	r3, fp
 80024c4:	eba3 0b4b 	sub.w	fp, r3, fp, lsl #1
 80024c8:	4464      	add	r4, ip
 80024ca:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 80024ce:	c018      	stmia	r0!, {r3, r4}
 80024d0:	e8a2 1800 	stmia.w	r2!, {fp, ip}
 80024d4:	dd14      	ble.n	8002500 <MP3D_SPCORP_Symbol_031+0x58>
 80024d6:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
 80024da:	e892 1980 	ldmia.w	r2, {r7, r8, fp, ip}
 80024de:	1e49      	subs	r1, r1, #1
 80024e0:	443b      	add	r3, r7
 80024e2:	eba3 0747 	sub.w	r7, r3, r7, lsl #1
 80024e6:	4444      	add	r4, r8
 80024e8:	eba4 0848 	sub.w	r8, r4, r8, lsl #1
 80024ec:	445d      	add	r5, fp
 80024ee:	eba5 0b4b 	sub.w	fp, r5, fp, lsl #1
 80024f2:	4466      	add	r6, ip
 80024f4:	eba6 0c4c 	sub.w	ip, r6, ip, lsl #1
 80024f8:	c078      	stmia	r0!, {r3, r4, r5, r6}
 80024fa:	e8a2 1980 	stmia.w	r2!, {r7, r8, fp, ip}
 80024fe:	dcea      	bgt.n	80024d6 <MP3D_SPCORP_Symbol_031+0x2e>
 8002500:	e8bd 09f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, fp}
 8002504:	4770      	bx	lr

08002506 <IStereo>:
 8002506:	ea4f 33c3 	mov.w	r3, r3, lsl #15
 800250a:	ea4f 32c2 	mov.w	r2, r2, lsl #15
 800250e:	f8db c000 	ldr.w	ip, [fp]
 8002512:	1e76      	subs	r6, r6, #1
 8002514:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002518:	fb8c 0103 	smull	r0, r1, ip, r3
 800251c:	f8cb 1900 	str.w	r1, [fp, #2304]	; 0x900
 8002520:	fb8c 0102 	smull	r0, r1, ip, r2
 8002524:	f8db c004 	ldr.w	ip, [fp, #4]
 8002528:	f84b 1b04 	str.w	r1, [fp], #4
 800252c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002530:	fb8c 0103 	smull	r0, r1, ip, r3
 8002534:	f8cb 1900 	str.w	r1, [fp, #2304]	; 0x900
 8002538:	fb8c 0102 	smull	r0, r1, ip, r2
 800253c:	f84b 1b04 	str.w	r1, [fp], #4
 8002540:	dce5      	bgt.n	800250e <IStereo+0x8>
 8002542:	e0bb      	b.n	80026bc <MP3D_SPCORP_Symbol_029+0x178>

08002544 <MP3D_SPCORP_Symbol_029>:
 8002544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002548:	469a      	mov	sl, r3
 800254a:	7a93      	ldrb	r3, [r2, #10]
 800254c:	f892 c00b 	ldrb.w	ip, [r2, #11]
 8002550:	b087      	sub	sp, #28
 8002552:	f10d 0810 	add.w	r8, sp, #16
 8002556:	eb03 070c 	add.w	r7, r3, ip
 800255a:	7a53      	ldrb	r3, [r2, #9]
 800255c:	f500 6e10 	add.w	lr, r0, #2304	; 0x900
 8002560:	f04f 0502 	mov.w	r5, #2
 8002564:	eb03 0c02 	add.w	ip, r3, r2
 8002568:	f06f 0300 	mvn.w	r3, #0
 800256c:	4666      	mov	r6, ip
 800256e:	f04f 0400 	mov.w	r4, #0
 8002572:	9304      	str	r3, [sp, #16]
 8002574:	9305      	str	r3, [sp, #20]
 8002576:	9306      	str	r3, [sp, #24]
 8002578:	e019      	b.n	80025ae <MP3D_SPCORP_Symbol_029+0x6a>
 800257a:	f816 9b01 	ldrb.w	r9, [r6], #1
 800257e:	4673      	mov	r3, lr
 8002580:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 8002584:	f8d3 9000 	ldr.w	r9, [r3]
 8002588:	f1b9 0f00 	cmp.w	r9, #0
 800258c:	bf06      	itte	eq
 800258e:	f8d3 9004 	ldreq.w	r9, [r3, #4]
 8002592:	f1b9 0f00 	cmpeq.w	r9, #0
 8002596:	f848 4025 	strne.w	r4, [r8, r5, lsl #2]
 800259a:	d103      	bne.n	80025a4 <MP3D_SPCORP_Symbol_029+0x60>
 800259c:	f103 0308 	add.w	r3, r3, #8
 80025a0:	4573      	cmp	r3, lr
 80025a2:	d3ef      	bcc.n	8002584 <MP3D_SPCORP_Symbol_029+0x40>
 80025a4:	1e6d      	subs	r5, r5, #1
 80025a6:	bf48      	it	mi
 80025a8:	2502      	movmi	r5, #2
 80025aa:	f104 0401 	add.w	r4, r4, #1
 80025ae:	42bc      	cmp	r4, r7
 80025b0:	dbe3      	blt.n	800257a <MP3D_SPCORP_Symbol_029+0x36>
 80025b2:	7a93      	ldrb	r3, [r2, #10]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00f      	beq.n	80025d8 <MP3D_SPCORP_Symbol_029+0x94>
 80025b8:	f10d 0e10 	add.w	lr, sp, #16
 80025bc:	e89e 4008 	ldmia.w	lr, {r3, lr}
 80025c0:	4573      	cmp	r3, lr
 80025c2:	bfd4      	ite	le
 80025c4:	9b05      	ldrle	r3, [sp, #20]
 80025c6:	9b04      	ldrgt	r3, [sp, #16]
 80025c8:	f8dd e018 	ldr.w	lr, [sp, #24]
 80025cc:	459e      	cmp	lr, r3
 80025ce:	bfa8      	it	ge
 80025d0:	9b06      	ldrge	r3, [sp, #24]
 80025d2:	9306      	str	r3, [sp, #24]
 80025d4:	9305      	str	r3, [sp, #20]
 80025d6:	9304      	str	r3, [sp, #16]
 80025d8:	7ad3      	ldrb	r3, [r2, #11]
 80025da:	f41a 2500 	ands.w	r5, sl, #524288	; 0x80000
 80025de:	bf18      	it	ne
 80025e0:	2503      	movne	r5, #3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	bf0c      	ite	eq
 80025e6:	2401      	moveq	r4, #1
 80025e8:	2403      	movne	r4, #3
 80025ea:	f1a4 0e01 	sub.w	lr, r4, #1
 80025ee:	eba7 0604 	sub.w	r6, r7, r4
 80025f2:	4643      	mov	r3, r8
 80025f4:	f853 902e 	ldr.w	r9, [r3, lr, lsl #2]
 80025f8:	eba6 0704 	sub.w	r7, r6, r4
 80025fc:	45b9      	cmp	r9, r7
 80025fe:	bfb4      	ite	lt
 8002600:	57cf      	ldrsblt	r7, [r1, r7]
 8002602:	462f      	movge	r7, r5
 8002604:	f1be 0e01 	subs.w	lr, lr, #1
 8002608:	558f      	strb	r7, [r1, r6]
 800260a:	f106 0601 	add.w	r6, r6, #1
 800260e:	d5f1      	bpl.n	80025f4 <MP3D_SPCORP_Symbol_029+0xb0>
 8002610:	4683      	mov	fp, r0
 8002612:	8b50      	ldrh	r0, [r2, #26]
 8002614:	460f      	mov	r7, r1
 8002616:	f04f 0502 	mov.w	r5, #2
 800261a:	f000 0201 	and.w	r2, r0, #1
 800261e:	f04f 0001 	mov.w	r0, #1
 8002622:	ea20 41da 	bic.w	r1, r0, sl, lsr #19
 8002626:	2900      	cmp	r1, #0
 8002628:	a802      	add	r0, sp, #8
 800262a:	e880 0006 	stmia.w	r0, {r1, r2}
 800262e:	bf14      	ite	ne
 8002630:	2140      	movne	r1, #64	; 0x40
 8002632:	2107      	moveq	r1, #7
 8002634:	9101      	str	r1, [sp, #4]
 8002636:	f89c 6000 	ldrb.w	r6, [ip]
 800263a:	bf0c      	ite	eq
 800263c:	f8df 4094 	ldreq.w	r4, [pc, #148]	; 80026d4 <MP3D_SPCORP_Symbol_029+0x190>
 8002640:	f8df 4094 	ldrne.w	r4, [pc, #148]	; 80026d8 <MP3D_SPCORP_Symbol_029+0x194>
 8002644:	f01a 0f20 	tst.w	sl, #32
 8002648:	bf08      	it	eq
 800264a:	1d24      	addeq	r4, r4, #4
 800264c:	f10c 0901 	add.w	r9, ip, #1
 8002650:	f04f 0800 	mov.w	r8, #0
 8002654:	a904      	add	r1, sp, #16
 8002656:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 800265a:	f917 0b01 	ldrsb.w	r0, [r7], #1
 800265e:	4541      	cmp	r1, r8
 8002660:	da23      	bge.n	80026aa <MP3D_SPCORP_Symbol_029+0x166>
 8002662:	9901      	ldr	r1, [sp, #4]
 8002664:	4288      	cmp	r0, r1
 8002666:	d220      	bcs.n	80026aa <MP3D_SPCORP_Symbol_029+0x166>
 8002668:	9902      	ldr	r1, [sp, #8]
 800266a:	2900      	cmp	r1, #0
 800266c:	bf02      	ittt	eq
 800266e:	eb04 00c0 	addeq.w	r0, r4, r0, lsl #3
 8002672:	8802      	ldrheq	r2, [r0, #0]
 8002674:	8843      	ldrheq	r3, [r0, #2]
 8002676:	f43f af46 	beq.w	8002506 <IStereo>
 800267a:	9a03      	ldr	r2, [sp, #12]
 800267c:	f100 0101 	add.w	r1, r0, #1
 8002680:	ea4f 0161 	mov.w	r1, r1, asr #1
 8002684:	fa01 f102 	lsl.w	r1, r1, r2
 8002688:	f001 0303 	and.w	r3, r1, #3
 800268c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	8822      	ldrh	r2, [r4, #0]
 8002694:	ea4f 01a1 	mov.w	r1, r1, asr #2
 8002698:	f010 0f01 	tst.w	r0, #1
 800269c:	fa23 f301 	lsr.w	r3, r3, r1
 80026a0:	bf1e      	ittt	ne
 80026a2:	4610      	movne	r0, r2
 80026a4:	461a      	movne	r2, r3
 80026a6:	4603      	movne	r3, r0
 80026a8:	e72d      	b.n	8002506 <IStereo>
 80026aa:	f01a 0f20 	tst.w	sl, #32
 80026ae:	bf1e      	ittt	ne
 80026b0:	0071      	lslne	r1, r6, #1
 80026b2:	4658      	movne	r0, fp
 80026b4:	f7ff fef8 	blne	80024a8 <MP3D_SPCORP_Symbol_031>
 80026b8:	eb0b 0bc6 	add.w	fp, fp, r6, lsl #3
 80026bc:	f819 6b01 	ldrb.w	r6, [r9], #1
 80026c0:	1e6d      	subs	r5, r5, #1
 80026c2:	bf48      	it	mi
 80026c4:	2502      	movmi	r5, #2
 80026c6:	2e00      	cmp	r6, #0
 80026c8:	f108 0801 	add.w	r8, r8, #1
 80026cc:	d1c2      	bne.n	8002654 <MP3D_SPCORP_Symbol_029+0x110>
 80026ce:	b007      	add	sp, #28
 80026d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026d4:	08011a00 	.word	0x08011a00
 80026d8:	080119f4 	.word	0x080119f4

080026dc <IDCT32PLONKAS>:
 80026dc:	ea4f 11b1 	mov.w	r1, r1, ror #6
 80026e0:	b50f      	push	{r0, r1, r2, r3, lr}
 80026e2:	f101 5280 	add.w	r2, r1, #268435456	; 0x10000000
 80026e6:	f101 0111 	add.w	r1, r1, #17
 80026ea:	ea4f 61b1 	mov.w	r1, r1, ror #26
 80026ee:	ea4f 62b2 	mov.w	r2, r2, ror #26
 80026f2:	f84d 2d64 	str.w	r2, [sp, #-100]!
 80026f6:	f84d 1d04 	str.w	r1, [sp, #-4]!
 80026fa:	f500 6490 	add.w	r4, r0, #1152	; 0x480
 80026fe:	f854 1948 	ldr.w	r1, [r4], #-72
 8002702:	f8d4 2480 	ldr.w	r2, [r4, #1152]	; 0x480
 8002706:	f850 3b48 	ldr.w	r3, [r0], #72
 800270a:	f854 5948 	ldr.w	r5, [r4], #-72
 800270e:	f85c eb04 	ldr.w	lr, [ip], #4
 8002712:	4413      	add	r3, r2
 8002714:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 8002718:	440d      	add	r5, r1
 800271a:	eba5 0141 	sub.w	r1, r5, r1, lsl #1
 800271e:	fb31 220e 	smlawb	r2, r1, lr, r2
 8002722:	442b      	add	r3, r5
 8002724:	eba3 0b45 	sub.w	fp, r3, r5, lsl #1
 8002728:	fb32 111e 	smlawt	r1, r2, lr, r1
 800272c:	9302      	str	r3, [sp, #8]
 800272e:	fb31 220e 	smlawb	r2, r1, lr, r2
 8002732:	9119      	str	r1, [sp, #100]	; 0x64
 8002734:	920a      	str	r2, [sp, #40]	; 0x28
 8002736:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
 800273a:	f8d4 2480 	ldr.w	r2, [r4, #1152]	; 0x480
 800273e:	f850 3b48 	ldr.w	r3, [r0], #72
 8002742:	f854 5948 	ldr.w	r5, [r4], #-72
 8002746:	f85c eb04 	ldr.w	lr, [ip], #4
 800274a:	4413      	add	r3, r2
 800274c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 8002750:	440d      	add	r5, r1
 8002752:	eba5 0141 	sub.w	r1, r5, r1, lsl #1
 8002756:	fb31 220e 	smlawb	r2, r1, lr, r2
 800275a:	442b      	add	r3, r5
 800275c:	eba3 0a45 	sub.w	sl, r3, r5, lsl #1
 8002760:	fb32 111e 	smlawt	r1, r2, lr, r1
 8002764:	9303      	str	r3, [sp, #12]
 8002766:	fb31 220e 	smlawb	r2, r1, lr, r2
 800276a:	9118      	str	r1, [sp, #96]	; 0x60
 800276c:	920b      	str	r2, [sp, #44]	; 0x2c
 800276e:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
 8002772:	f8d4 2480 	ldr.w	r2, [r4, #1152]	; 0x480
 8002776:	f850 3b48 	ldr.w	r3, [r0], #72
 800277a:	f854 5948 	ldr.w	r5, [r4], #-72
 800277e:	f85c eb04 	ldr.w	lr, [ip], #4
 8002782:	4413      	add	r3, r2
 8002784:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 8002788:	440d      	add	r5, r1
 800278a:	eba5 0141 	sub.w	r1, r5, r1, lsl #1
 800278e:	fb31 220e 	smlawb	r2, r1, lr, r2
 8002792:	442b      	add	r3, r5
 8002794:	eba3 0945 	sub.w	r9, r3, r5, lsl #1
 8002798:	fb32 111e 	smlawt	r1, r2, lr, r1
 800279c:	9304      	str	r3, [sp, #16]
 800279e:	fb31 220e 	smlawb	r2, r1, lr, r2
 80027a2:	9117      	str	r1, [sp, #92]	; 0x5c
 80027a4:	920c      	str	r2, [sp, #48]	; 0x30
 80027a6:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
 80027aa:	f8d4 2480 	ldr.w	r2, [r4, #1152]	; 0x480
 80027ae:	f850 3b48 	ldr.w	r3, [r0], #72
 80027b2:	f854 5948 	ldr.w	r5, [r4], #-72
 80027b6:	f85c eb04 	ldr.w	lr, [ip], #4
 80027ba:	4413      	add	r3, r2
 80027bc:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 80027c0:	440d      	add	r5, r1
 80027c2:	eba5 0141 	sub.w	r1, r5, r1, lsl #1
 80027c6:	fb31 220e 	smlawb	r2, r1, lr, r2
 80027ca:	442b      	add	r3, r5
 80027cc:	eba3 0845 	sub.w	r8, r3, r5, lsl #1
 80027d0:	fb32 111e 	smlawt	r1, r2, lr, r1
 80027d4:	9305      	str	r3, [sp, #20]
 80027d6:	fb31 220e 	smlawb	r2, r1, lr, r2
 80027da:	9116      	str	r1, [sp, #88]	; 0x58
 80027dc:	920d      	str	r2, [sp, #52]	; 0x34
 80027de:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
 80027e2:	f8d4 2480 	ldr.w	r2, [r4, #1152]	; 0x480
 80027e6:	f850 3b48 	ldr.w	r3, [r0], #72
 80027ea:	f854 5948 	ldr.w	r5, [r4], #-72
 80027ee:	f85c eb04 	ldr.w	lr, [ip], #4
 80027f2:	4413      	add	r3, r2
 80027f4:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 80027f8:	440d      	add	r5, r1
 80027fa:	eba5 0141 	sub.w	r1, r5, r1, lsl #1
 80027fe:	fb31 220e 	smlawb	r2, r1, lr, r2
 8002802:	442b      	add	r3, r5
 8002804:	eba3 0745 	sub.w	r7, r3, r5, lsl #1
 8002808:	fb32 111e 	smlawt	r1, r2, lr, r1
 800280c:	9306      	str	r3, [sp, #24]
 800280e:	fb31 220e 	smlawb	r2, r1, lr, r2
 8002812:	9115      	str	r1, [sp, #84]	; 0x54
 8002814:	920e      	str	r2, [sp, #56]	; 0x38
 8002816:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
 800281a:	f8d4 2480 	ldr.w	r2, [r4, #1152]	; 0x480
 800281e:	f850 3b48 	ldr.w	r3, [r0], #72
 8002822:	f854 5948 	ldr.w	r5, [r4], #-72
 8002826:	f85c eb04 	ldr.w	lr, [ip], #4
 800282a:	4413      	add	r3, r2
 800282c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 8002830:	440d      	add	r5, r1
 8002832:	eba5 0141 	sub.w	r1, r5, r1, lsl #1
 8002836:	fb31 220e 	smlawb	r2, r1, lr, r2
 800283a:	442b      	add	r3, r5
 800283c:	eba3 0645 	sub.w	r6, r3, r5, lsl #1
 8002840:	fb32 111e 	smlawt	r1, r2, lr, r1
 8002844:	9307      	str	r3, [sp, #28]
 8002846:	eba1 0102 	sub.w	r1, r1, r2
 800284a:	fb31 220e 	smlawb	r2, r1, lr, r2
 800284e:	9114      	str	r1, [sp, #80]	; 0x50
 8002850:	920f      	str	r2, [sp, #60]	; 0x3c
 8002852:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
 8002856:	f8d4 2480 	ldr.w	r2, [r4, #1152]	; 0x480
 800285a:	f850 3b48 	ldr.w	r3, [r0], #72
 800285e:	f854 5948 	ldr.w	r5, [r4], #-72
 8002862:	f85c eb04 	ldr.w	lr, [ip], #4
 8002866:	4413      	add	r3, r2
 8002868:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 800286c:	440d      	add	r5, r1
 800286e:	eba5 0141 	sub.w	r1, r5, r1, lsl #1
 8002872:	fb31 220e 	smlawb	r2, r1, lr, r2
 8002876:	442b      	add	r3, r5
 8002878:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
 800287c:	fb32 111e 	smlawt	r1, r2, lr, r1
 8002880:	9308      	str	r3, [sp, #32]
 8002882:	eba1 0102 	sub.w	r1, r1, r2
 8002886:	fb31 220e 	smlawb	r2, r1, lr, r2
 800288a:	9113      	str	r1, [sp, #76]	; 0x4c
 800288c:	9210      	str	r2, [sp, #64]	; 0x40
 800288e:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
 8002892:	f8d4 2480 	ldr.w	r2, [r4, #1152]	; 0x480
 8002896:	6803      	ldr	r3, [r0, #0]
 8002898:	f2a0 10f8 	subw	r0, r0, #504	; 0x1f8
 800289c:	6824      	ldr	r4, [r4, #0]
 800289e:	f85c eb04 	ldr.w	lr, [ip], #4
 80028a2:	4413      	add	r3, r2
 80028a4:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 80028a8:	440c      	add	r4, r1
 80028aa:	eba4 0141 	sub.w	r1, r4, r1, lsl #1
 80028ae:	fb31 220e 	smlawb	r2, r1, lr, r2
 80028b2:	4423      	add	r3, r4
 80028b4:	eba3 0444 	sub.w	r4, r3, r4, lsl #1
 80028b8:	fb32 111e 	smlawt	r1, r2, lr, r1
 80028bc:	9309      	str	r3, [sp, #36]	; 0x24
 80028be:	eba1 0102 	sub.w	r1, r1, r2
 80028c2:	fb31 220e 	smlawb	r2, r1, lr, r2
 80028c6:	9112      	str	r1, [sp, #72]	; 0x48
 80028c8:	9211      	str	r2, [sp, #68]	; 0x44
 80028ca:	e8bc 400e 	ldmia.w	ip!, {r1, r2, r3, lr}
 80028ce:	fb34 bb01 	smlawb	fp, r4, r1, fp
 80028d2:	fb35 aa02 	smlawb	sl, r5, r2, sl
 80028d6:	fb3b 4411 	smlawt	r4, fp, r1, r4
 80028da:	fb3a 5512 	smlawt	r5, sl, r2, r5
 80028de:	fb34 bb01 	smlawb	fp, r4, r1, fp
 80028e2:	fb35 aa02 	smlawb	sl, r5, r2, sl
 80028e6:	fb36 9903 	smlawb	r9, r6, r3, r9
 80028ea:	fb37 880e 	smlawb	r8, r7, lr, r8
 80028ee:	fb39 6613 	smlawt	r6, r9, r3, r6
 80028f2:	fb38 771e 	smlawt	r7, r8, lr, r7
 80028f6:	fb36 9903 	smlawb	r9, r6, r3, r9
 80028fa:	eba7 0708 	sub.w	r7, r7, r8
 80028fe:	fb37 880e 	smlawb	r8, r7, lr, r8
 8002902:	44ca      	add	sl, r9
 8002904:	ebaa 0949 	sub.w	r9, sl, r9, lsl #1
 8002908:	44c3      	add	fp, r8
 800290a:	ebab 0848 	sub.w	r8, fp, r8, lsl #1
 800290e:	eba7 0704 	sub.w	r7, r7, r4
 8002912:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8002916:	eba5 0606 	sub.w	r6, r5, r6
 800291a:	eba6 0545 	sub.w	r5, r6, r5, lsl #1
 800291e:	e89c 5009 	ldmia.w	ip, {r0, r3, ip, lr}
 8002922:	44d3      	add	fp, sl
 8002924:	ebab 0a4a 	sub.w	sl, fp, sl, lsl #1
 8002928:	fb3a aa0e 	smlawb	sl, sl, lr, sl
 800292c:	4437      	add	r7, r6
 800292e:	eba7 0646 	sub.w	r6, r7, r6, lsl #1
 8002932:	fb36 660e 	smlawb	r6, r6, lr, r6
 8002936:	fb39 880c 	smlawb	r8, r9, ip, r8
 800293a:	fb35 440c 	smlawb	r4, r5, ip, r4
 800293e:	fb38 991c 	smlawt	r9, r8, ip, r9
 8002942:	fb34 551c 	smlawt	r5, r4, ip, r5
 8002946:	fb39 880c 	smlawb	r8, r9, ip, r8
 800294a:	fb35 440c 	smlawb	r4, r5, ip, r4
 800294e:	44b2      	add	sl, r6
 8002950:	ebaa 0646 	sub.w	r6, sl, r6, lsl #1
 8002954:	eba8 0805 	sub.w	r8, r8, r5
 8002958:	eb08 0545 	add.w	r5, r8, r5, lsl #1
 800295c:	eba4 0909 	sub.w	r9, r4, r9
 8002960:	eba9 0444 	sub.w	r4, r9, r4, lsl #1
 8002964:	bc06      	pop	{r1, r2}
 8002966:	f8c1 6080 	str.w	r6, [r1, #128]	; 0x80
 800296a:	f8c1 4180 	str.w	r4, [r1, #384]	; 0x180
 800296e:	f8c1 9280 	str.w	r9, [r1, #640]	; 0x280
 8002972:	f8c1 7380 	str.w	r7, [r1, #896]	; 0x380
 8002976:	f8c2 a080 	str.w	sl, [r2, #128]	; 0x80
 800297a:	f8c2 8180 	str.w	r8, [r2, #384]	; 0x180
 800297e:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
 8002982:	f8c2 b380 	str.w	fp, [r2, #896]	; 0x380
 8002986:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800298a:	4447      	add	r7, r8
 800298c:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8002990:	444e      	add	r6, r9
 8002992:	eba6 0949 	sub.w	r9, r6, r9, lsl #1
 8002996:	4455      	add	r5, sl
 8002998:	eba5 0a4a 	sub.w	sl, r5, sl, lsl #1
 800299c:	445c      	add	r4, fp
 800299e:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 80029a2:	fb38 bb00 	smlawb	fp, r8, r0, fp
 80029a6:	4435      	add	r5, r6
 80029a8:	fb39 aa03 	smlawb	sl, r9, r3, sl
 80029ac:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 80029b0:	fb3b 8810 	smlawt	r8, fp, r0, r8
 80029b4:	443c      	add	r4, r7
 80029b6:	fb3a 9913 	smlawt	r9, sl, r3, r9
 80029ba:	eba4 0747 	sub.w	r7, r4, r7, lsl #1
 80029be:	fb38 bb00 	smlawb	fp, r8, r0, fp
 80029c2:	442c      	add	r4, r5
 80029c4:	eba9 090a 	sub.w	r9, r9, sl
 80029c8:	fb39 aa03 	smlawb	sl, r9, r3, sl
 80029cc:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 80029d0:	fb36 770c 	smlawb	r7, r6, ip, r7
 80029d4:	44d3      	add	fp, sl
 80029d6:	ebab 0a4a 	sub.w	sl, fp, sl, lsl #1
 80029da:	fb37 661c 	smlawt	r6, r7, ip, r6
 80029de:	eba9 0908 	sub.w	r9, r9, r8
 80029e2:	eb09 0848 	add.w	r8, r9, r8, lsl #1
 80029e6:	fb3a aa0e 	smlawb	sl, sl, lr, sl
 80029ea:	fb38 880e 	smlawb	r8, r8, lr, r8
 80029ee:	fb36 770c 	smlawb	r7, r6, ip, r7
 80029f2:	fb35 550e 	smlawb	r5, r5, lr, r5
 80029f6:	44c2      	add	sl, r8
 80029f8:	ebaa 0848 	sub.w	r8, sl, r8, lsl #1
 80029fc:	f1c6 0600 	rsb	r6, r6, #0
 8002a00:	f8c2 8100 	str.w	r8, [r2, #256]	; 0x100
 8002a04:	f8c2 7200 	str.w	r7, [r2, #512]	; 0x200
 8002a08:	f8c2 b300 	str.w	fp, [r2, #768]	; 0x300
 8002a0c:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8002a10:	600d      	str	r5, [r1, #0]
 8002a12:	6015      	str	r5, [r2, #0]
 8002a14:	f8c1 a100 	str.w	sl, [r1, #256]	; 0x100
 8002a18:	f8c1 6200 	str.w	r6, [r1, #512]	; 0x200
 8002a1c:	f8c1 9300 	str.w	r9, [r1, #768]	; 0x300
 8002a20:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002a24:	4447      	add	r7, r8
 8002a26:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8002a2a:	444e      	add	r6, r9
 8002a2c:	eba6 0949 	sub.w	r9, r6, r9, lsl #1
 8002a30:	4455      	add	r5, sl
 8002a32:	eba5 0a4a 	sub.w	sl, r5, sl, lsl #1
 8002a36:	445c      	add	r4, fp
 8002a38:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 8002a3c:	fb38 bb00 	smlawb	fp, r8, r0, fp
 8002a40:	4435      	add	r5, r6
 8002a42:	fb39 aa03 	smlawb	sl, r9, r3, sl
 8002a46:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8002a4a:	fb3b 8810 	smlawt	r8, fp, r0, r8
 8002a4e:	443c      	add	r4, r7
 8002a50:	fb3a 9913 	smlawt	r9, sl, r3, r9
 8002a54:	eba4 0747 	sub.w	r7, r4, r7, lsl #1
 8002a58:	fb38 bb00 	smlawb	fp, r8, r0, fp
 8002a5c:	442c      	add	r4, r5
 8002a5e:	eba9 090a 	sub.w	r9, r9, sl
 8002a62:	fb39 aa03 	smlawb	sl, r9, r3, sl
 8002a66:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 8002a6a:	fb36 770c 	smlawb	r7, r6, ip, r7
 8002a6e:	44d3      	add	fp, sl
 8002a70:	ebab 0a4a 	sub.w	sl, fp, sl, lsl #1
 8002a74:	fb37 661c 	smlawt	r6, r7, ip, r6
 8002a78:	eba9 0908 	sub.w	r9, r9, r8
 8002a7c:	eb09 0848 	add.w	r8, r9, r8, lsl #1
 8002a80:	fb3a aa0e 	smlawb	sl, sl, lr, sl
 8002a84:	fb38 880e 	smlawb	r8, r8, lr, r8
 8002a88:	fb36 770c 	smlawb	r7, r6, ip, r7
 8002a8c:	fb35 550e 	smlawb	r5, r5, lr, r5
 8002a90:	44c2      	add	sl, r8
 8002a92:	ebaa 0848 	sub.w	r8, sl, r8, lsl #1
 8002a96:	f8c2 43c0 	str.w	r4, [r2, #960]	; 0x3c0
 8002a9a:	e92d 0fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp}
 8002a9e:	f10d 0b1c 	add.w	fp, sp, #28
 8002aa2:	e89b 0ff0 	ldmia.w	fp, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002aa6:	eba8 0707 	sub.w	r7, r8, r7
 8002aaa:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8002aae:	eba6 0609 	sub.w	r6, r6, r9
 8002ab2:	eb06 0949 	add.w	r9, r6, r9, lsl #1
 8002ab6:	ebaa 0505 	sub.w	r5, sl, r5
 8002aba:	eba5 0a4a 	sub.w	sl, r5, sl, lsl #1
 8002abe:	eba4 040b 	sub.w	r4, r4, fp
 8002ac2:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 8002ac6:	fb38 bb00 	smlawb	fp, r8, r0, fp
 8002aca:	4435      	add	r5, r6
 8002acc:	fb39 aa03 	smlawb	sl, r9, r3, sl
 8002ad0:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8002ad4:	fb3b 8810 	smlawt	r8, fp, r0, r8
 8002ad8:	443c      	add	r4, r7
 8002ada:	fb3a 9913 	smlawt	r9, sl, r3, r9
 8002ade:	eba4 0747 	sub.w	r7, r4, r7, lsl #1
 8002ae2:	fb38 bb00 	smlawb	fp, r8, r0, fp
 8002ae6:	442c      	add	r4, r5
 8002ae8:	eba9 090a 	sub.w	r9, r9, sl
 8002aec:	fb39 aa03 	smlawb	sl, r9, r3, sl
 8002af0:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 8002af4:	fb36 770c 	smlawb	r7, r6, ip, r7
 8002af8:	44d3      	add	fp, sl
 8002afa:	ebab 0a4a 	sub.w	sl, fp, sl, lsl #1
 8002afe:	fb37 661c 	smlawt	r6, r7, ip, r6
 8002b02:	eba9 0908 	sub.w	r9, r9, r8
 8002b06:	eb09 0848 	add.w	r8, r9, r8, lsl #1
 8002b0a:	fb3a aa0e 	smlawb	sl, sl, lr, sl
 8002b0e:	fb38 880e 	smlawb	r8, r8, lr, r8
 8002b12:	fb36 770c 	smlawb	r7, r6, ip, r7
 8002b16:	fb35 550e 	smlawb	r5, r5, lr, r5
 8002b1a:	44c2      	add	sl, r8
 8002b1c:	ebaa 0848 	sub.w	r8, sl, r8, lsl #1
 8002b20:	f8c1 43c0 	str.w	r4, [r1, #960]	; 0x3c0
 8002b24:	e8bd 5018 	ldmia.w	sp!, {r3, r4, ip, lr}
 8002b28:	441d      	add	r5, r3
 8002b2a:	ebc5 0343 	rsb	r3, r5, r3, lsl #1
 8002b2e:	6415      	str	r5, [r2, #64]	; 0x40
 8002b30:	640b      	str	r3, [r1, #64]	; 0x40
 8002b32:	eba7 0404 	sub.w	r4, r7, r4
 8002b36:	eba4 0747 	sub.w	r7, r4, r7, lsl #1
 8002b3a:	f8c1 41c0 	str.w	r4, [r1, #448]	; 0x1c0
 8002b3e:	f8c1 7240 	str.w	r7, [r1, #576]	; 0x240
 8002b42:	44b4      	add	ip, r6
 8002b44:	ebac 0646 	sub.w	r6, ip, r6, lsl #1
 8002b48:	f8c2 6240 	str.w	r6, [r2, #576]	; 0x240
 8002b4c:	f8c2 c1c0 	str.w	ip, [r2, #448]	; 0x1c0
 8002b50:	e8bd 1018 	ldmia.w	sp!, {r3, r4, ip}
 8002b54:	44d6      	add	lr, sl
 8002b56:	ebae 0a4a 	sub.w	sl, lr, sl, lsl #1
 8002b5a:	f8c2 e0c0 	str.w	lr, [r2, #192]	; 0xc0
 8002b5e:	f8c2 a140 	str.w	sl, [r2, #320]	; 0x140
 8002b62:	445b      	add	r3, fp
 8002b64:	eba3 0b4b 	sub.w	fp, r3, fp, lsl #1
 8002b68:	f8c1 3340 	str.w	r3, [r1, #832]	; 0x340
 8002b6c:	f8c1 b2c0 	str.w	fp, [r1, #704]	; 0x2c0
 8002b70:	4444      	add	r4, r8
 8002b72:	eba4 0848 	sub.w	r8, r4, r8, lsl #1
 8002b76:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
 8002b7a:	f8c1 80c0 	str.w	r8, [r1, #192]	; 0xc0
 8002b7e:	44cc      	add	ip, r9
 8002b80:	ebac 0949 	sub.w	r9, ip, r9, lsl #1
 8002b84:	f8c2 c2c0 	str.w	ip, [r2, #704]	; 0x2c0
 8002b88:	f8c2 9340 	str.w	r9, [r2, #832]	; 0x340
 8002b8c:	b008      	add	sp, #32
 8002b8e:	9803      	ldr	r0, [sp, #12]
 8002b90:	ea4f 11b1 	mov.w	r1, r1, ror #6
 8002b94:	f001 4270 	and.w	r2, r1, #4026531840	; 0xf0000000
 8002b98:	f8df c890 	ldr.w	ip, [pc, #2192]	; 800342c <MP3D_SPCORP_Symbol_033+0x34>
 8002b9c:	ea4f 1181 	mov.w	r1, r1, lsl #6
 8002ba0:	ebac 6cd2 	sub.w	ip, ip, r2, lsr #27
 8002ba4:	f102 43e0 	add.w	r3, r2, #1879048192	; 0x70000000
 8002ba8:	eb01 6793 	add.w	r7, r1, r3, lsr #26
 8002bac:	683f      	ldr	r7, [r7, #0]
 8002bae:	f103 5880 	add.w	r8, r3, #268435456	; 0x10000000
 8002bb2:	eb01 6898 	add.w	r8, r1, r8, lsr #26
 8002bb6:	e898 0120 	ldmia.w	r8, {r5, r8}
 8002bba:	442f      	add	r7, r5
 8002bbc:	eba7 0708 	sub.w	r7, r7, r8
 8002bc0:	e8bc 4010 	ldmia.w	ip!, {r4, lr}
 8002bc4:	e8b1 0f00 	ldmia.w	r1!, {r8, r9, sl, fp}
 8002bc8:	fb38 7704 	smlawb	r7, r8, r4, r7
 8002bcc:	fb39 7714 	smlawt	r7, r9, r4, r7
 8002bd0:	fb3a 770e 	smlawb	r7, sl, lr, r7
 8002bd4:	fb3b 771e 	smlawt	r7, fp, lr, r7
 8002bd8:	e8bc 4010 	ldmia.w	ip!, {r4, lr}
 8002bdc:	e8b1 0f00 	ldmia.w	r1!, {r8, r9, sl, fp}
 8002be0:	fb38 7704 	smlawb	r7, r8, r4, r7
 8002be4:	fb39 7714 	smlawt	r7, r9, r4, r7
 8002be8:	fb3a 770e 	smlawb	r7, sl, lr, r7
 8002bec:	fb3b 771e 	smlawt	r7, fp, lr, r7
 8002bf0:	e8bc 4010 	ldmia.w	ip!, {r4, lr}
 8002bf4:	e8b1 0f00 	ldmia.w	r1!, {r8, r9, sl, fp}
 8002bf8:	fb38 7704 	smlawb	r7, r8, r4, r7
 8002bfc:	fb39 7714 	smlawt	r7, r9, r4, r7
 8002c00:	fb3a 770e 	smlawb	r7, sl, lr, r7
 8002c04:	fb3b 771e 	smlawt	r7, fp, lr, r7
 8002c08:	e8bc 4010 	ldmia.w	ip!, {r4, lr}
 8002c0c:	e8b1 0f00 	ldmia.w	r1!, {r8, r9, sl, fp}
 8002c10:	fb38 7704 	smlawb	r7, r8, r4, r7
 8002c14:	fb39 7714 	smlawt	r7, r9, r4, r7
 8002c18:	fb3a 770e 	smlawb	r7, sl, lr, r7
 8002c1c:	fb3b 771e 	smlawt	r7, fp, lr, r7
 8002c20:	f10c 0c20 	add.w	ip, ip, #32
 8002c24:	f501 7471 	add.w	r4, r1, #964	; 0x3c4
 8002c28:	f854 ab08 	ldr.w	sl, [r4], #8
 8002c2c:	f854 bb08 	ldr.w	fp, [r4], #8
 8002c30:	e8bc 4020 	ldmia.w	ip!, {r5, lr}
 8002c34:	fb3a f615 	smulwt	r6, sl, r5
 8002c38:	fb3b 661e 	smlawt	r6, fp, lr, r6
 8002c3c:	f854 ab08 	ldr.w	sl, [r4], #8
 8002c40:	f854 bb08 	ldr.w	fp, [r4], #8
 8002c44:	e8bc 4020 	ldmia.w	ip!, {r5, lr}
 8002c48:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002c4c:	fb3b 661e 	smlawt	r6, fp, lr, r6
 8002c50:	f854 ab08 	ldr.w	sl, [r4], #8
 8002c54:	f854 bb08 	ldr.w	fp, [r4], #8
 8002c58:	e8bc 4020 	ldmia.w	ip!, {r5, lr}
 8002c5c:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002c60:	fb3b 661e 	smlawt	r6, fp, lr, r6
 8002c64:	f854 ab08 	ldr.w	sl, [r4], #8
 8002c68:	f854 b93c 	ldr.w	fp, [r4], #-60
 8002c6c:	e8bc 4020 	ldmia.w	ip!, {r5, lr}
 8002c70:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002c74:	fb3b 661e 	smlawt	r6, fp, lr, r6
 8002c78:	eb04 6a93 	add.w	sl, r4, r3, lsr #26
 8002c7c:	f8da a000 	ldr.w	sl, [sl]
 8002c80:	eb01 6492 	add.w	r4, r1, r2, lsr #26
 8002c84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c88:	ebaa 0606 	sub.w	r6, sl, r6
 8002c8c:	f506 7600 	add.w	r6, r6, #512	; 0x200
 8002c90:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002c94:	f326 268f 	ssat	r6, #16, r6, asr #10
 8002c98:	f327 278f 	ssat	r7, #16, r7, asr #10
 8002c9c:	f820 7b48 	strh.w	r7, [r0], #72
 8002ca0:	f500 6390 	add.w	r3, r0, #1152	; 0x480
 8002ca4:	f823 6c48 	strh.w	r6, [r3, #-72]
 8002ca8:	f500 6307 	add.w	r3, r0, #2160	; 0x870
 8002cac:	f8df c780 	ldr.w	ip, [pc, #1920]	; 8003430 <MP3D_SPCORP_Symbol_033+0x38>
 8002cb0:	f1a4 0408 	sub.w	r4, r4, #8
 8002cb4:	f20f 080c 	addw	r8, pc, #12
 8002cb8:	eb08 68d2 	add.w	r8, r8, r2, lsr #27
 8002cbc:	f8d8 8000 	ldr.w	r8, [r8]
 8002cc0:	46c7      	mov	pc, r8
 8002cc2:	0000      	.short	0x0000
 8002cc4:	08002ce5 	.word	0x08002ce5
 8002cc8:	08002dc7 	.word	0x08002dc7
 8002ccc:	08002ea1 	.word	0x08002ea1
 8002cd0:	08002f7b 	.word	0x08002f7b
 8002cd4:	08003055 	.word	0x08003055
 8002cd8:	0800312f 	.word	0x0800312f
 8002cdc:	08003209 	.word	0x08003209
 8002ce0:	080032e3 	.word	0x080032e3

08002ce4 <offset_0>:
 8002ce4:	f104 0408 	add.w	r4, r4, #8
 8002ce8:	e8f4 8902 	ldrd	r8, r9, [r4], #8
 8002cec:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002cf0:	e9d4 ab0c 	ldrd	sl, fp, [r4, #48]	; 0x30
 8002cf4:	fb38 1602 	smlawb	r6, r8, r2, r1
 8002cf8:	fb3b fe12 	smulwt	lr, fp, r2
 8002cfc:	fb38 1712 	smlawt	r7, r8, r2, r1
 8002d00:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002d04:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002d08:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002d0c:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002d10:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002d14:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8002d18:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002d1c:	e9d4 ab08 	ldrd	sl, fp, [r4, #32]
 8002d20:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002d24:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002d28:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002d2c:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002d30:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002d34:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002d38:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002d3c:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002d40:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8002d44:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002d48:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
 8002d4c:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002d50:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002d54:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002d58:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002d5c:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002d60:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002d64:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002d68:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002d6c:	e894 0f00 	ldmia.w	r4, {r8, r9, sl, fp}
 8002d70:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002d74:	f104 0428 	add.w	r4, r4, #40	; 0x28
 8002d78:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002d7c:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002d80:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002d84:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002d88:	eb0e 0e6b 	add.w	lr, lr, fp, asr #1
 8002d8c:	eb07 0768 	add.w	r7, r7, r8, asr #1
 8002d90:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002d94:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002d98:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002d9c:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002da0:	ebae 0e09 	sub.w	lr, lr, r9
 8002da4:	4456      	add	r6, sl
 8002da6:	eba7 070a 	sub.w	r7, r7, sl
 8002daa:	eba6 060e 	sub.w	r6, r6, lr
 8002dae:	444f      	add	r7, r9
 8002db0:	f326 268f 	ssat	r6, #16, r6, asr #10
 8002db4:	f327 278f 	ssat	r7, #16, r7, asr #10
 8002db8:	f820 6b48 	strh.w	r6, [r0], #72
 8002dbc:	f823 7948 	strh.w	r7, [r3], #-72
 8002dc0:	4298      	cmp	r0, r3
 8002dc2:	d191      	bne.n	8002ce8 <offset_0+0x4>
 8002dc4:	e2fc      	b.n	80033c0 <offset_14+0xde>

08002dc6 <offset_2>:
 8002dc6:	e8b4 0f00 	ldmia.w	r4!, {r8, r9, sl, fp}
 8002dca:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002dce:	fb3a 1602 	smlawb	r6, sl, r2, r1
 8002dd2:	fb39 fe12 	smulwt	lr, r9, r2
 8002dd6:	fb3a 1712 	smlawt	r7, sl, r2, r1
 8002dda:	fb39 7702 	smlawb	r7, r9, r2, r7
 8002dde:	fb3b ee05 	smlawb	lr, fp, r5, lr
 8002de2:	fb38 6615 	smlawt	r6, r8, r5, r6
 8002de6:	fb3b 7715 	smlawt	r7, fp, r5, r7
 8002dea:	fb38 7705 	smlawb	r7, r8, r5, r7
 8002dee:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8002df2:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002df6:	e9d4 ab08 	ldrd	sl, fp, [r4, #32]
 8002dfa:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002dfe:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002e02:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002e06:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002e0a:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002e0e:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002e12:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002e16:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002e1a:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8002e1e:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002e22:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
 8002e26:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002e2a:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002e2e:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002e32:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002e36:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002e3a:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002e3e:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002e42:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002e46:	e894 0f00 	ldmia.w	r4, {r8, r9, sl, fp}
 8002e4a:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002e4e:	f104 0420 	add.w	r4, r4, #32
 8002e52:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002e56:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002e5a:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002e5e:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002e62:	eb0e 0e6b 	add.w	lr, lr, fp, asr #1
 8002e66:	eb07 0768 	add.w	r7, r7, r8, asr #1
 8002e6a:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002e6e:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002e72:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002e76:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002e7a:	ebae 0e09 	sub.w	lr, lr, r9
 8002e7e:	4456      	add	r6, sl
 8002e80:	eba7 070a 	sub.w	r7, r7, sl
 8002e84:	eba6 060e 	sub.w	r6, r6, lr
 8002e88:	444f      	add	r7, r9
 8002e8a:	f326 268f 	ssat	r6, #16, r6, asr #10
 8002e8e:	f327 278f 	ssat	r7, #16, r7, asr #10
 8002e92:	f820 6b48 	strh.w	r6, [r0], #72
 8002e96:	f823 7948 	strh.w	r7, [r3], #-72
 8002e9a:	4298      	cmp	r0, r3
 8002e9c:	d193      	bne.n	8002dc6 <offset_2>
 8002e9e:	e28f      	b.n	80033c0 <offset_14+0xde>

08002ea0 <offset_4>:
 8002ea0:	e8b4 0f00 	ldmia.w	r4!, {r8, r9, sl, fp}
 8002ea4:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002ea8:	fb3a 1602 	smlawb	r6, sl, r2, r1
 8002eac:	fb39 fe12 	smulwt	lr, r9, r2
 8002eb0:	fb3a 1712 	smlawt	r7, sl, r2, r1
 8002eb4:	fb39 7702 	smlawb	r7, r9, r2, r7
 8002eb8:	fb3b ee05 	smlawb	lr, fp, r5, lr
 8002ebc:	fb38 6615 	smlawt	r6, r8, r5, r6
 8002ec0:	fb3b 7715 	smlawt	r7, fp, r5, r7
 8002ec4:	fb38 7705 	smlawb	r7, r8, r5, r7
 8002ec8:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8002ecc:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002ed0:	e954 ab08 	ldrd	sl, fp, [r4, #-32]
 8002ed4:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002ed8:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002edc:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002ee0:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002ee4:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002ee8:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002eec:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002ef0:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002ef4:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8002ef8:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002efc:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
 8002f00:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002f04:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002f08:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002f0c:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002f10:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002f14:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002f18:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002f1c:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002f20:	e894 0f00 	ldmia.w	r4, {r8, r9, sl, fp}
 8002f24:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002f28:	f104 0420 	add.w	r4, r4, #32
 8002f2c:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002f30:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002f34:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002f38:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002f3c:	eb0e 0e6b 	add.w	lr, lr, fp, asr #1
 8002f40:	eb07 0768 	add.w	r7, r7, r8, asr #1
 8002f44:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002f48:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002f4c:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002f50:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002f54:	ebae 0e09 	sub.w	lr, lr, r9
 8002f58:	4456      	add	r6, sl
 8002f5a:	eba7 070a 	sub.w	r7, r7, sl
 8002f5e:	eba6 060e 	sub.w	r6, r6, lr
 8002f62:	444f      	add	r7, r9
 8002f64:	f326 268f 	ssat	r6, #16, r6, asr #10
 8002f68:	f327 278f 	ssat	r7, #16, r7, asr #10
 8002f6c:	f820 6b48 	strh.w	r6, [r0], #72
 8002f70:	f823 7948 	strh.w	r7, [r3], #-72
 8002f74:	4298      	cmp	r0, r3
 8002f76:	d193      	bne.n	8002ea0 <offset_4>
 8002f78:	e222      	b.n	80033c0 <offset_14+0xde>

08002f7a <offset_6>:
 8002f7a:	e8b4 0f00 	ldmia.w	r4!, {r8, r9, sl, fp}
 8002f7e:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002f82:	fb3a 1602 	smlawb	r6, sl, r2, r1
 8002f86:	fb39 fe12 	smulwt	lr, r9, r2
 8002f8a:	fb3a 1712 	smlawt	r7, sl, r2, r1
 8002f8e:	fb39 7702 	smlawb	r7, r9, r2, r7
 8002f92:	fb3b ee05 	smlawb	lr, fp, r5, lr
 8002f96:	fb38 6615 	smlawt	r6, r8, r5, r6
 8002f9a:	fb3b 7715 	smlawt	r7, fp, r5, r7
 8002f9e:	fb38 7705 	smlawb	r7, r8, r5, r7
 8002fa2:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8002fa6:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002faa:	e954 ab08 	ldrd	sl, fp, [r4, #-32]
 8002fae:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002fb2:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002fb6:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002fba:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002fbe:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002fc2:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002fc6:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002fca:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002fce:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8002fd2:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002fd6:	e954 ab0c 	ldrd	sl, fp, [r4, #-48]	; 0x30
 8002fda:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002fde:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002fe2:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002fe6:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002fea:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002fee:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002ff2:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002ff6:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002ffa:	e894 0f00 	ldmia.w	r4, {r8, r9, sl, fp}
 8002ffe:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8003002:	f104 0420 	add.w	r4, r4, #32
 8003006:	fb38 7712 	smlawt	r7, r8, r2, r7
 800300a:	fb3b ee12 	smlawt	lr, fp, r2, lr
 800300e:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8003012:	fb38 6602 	smlawb	r6, r8, r2, r6
 8003016:	eb0e 0e6b 	add.w	lr, lr, fp, asr #1
 800301a:	eb07 0768 	add.w	r7, r7, r8, asr #1
 800301e:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8003022:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8003026:	fb39 7715 	smlawt	r7, r9, r5, r7
 800302a:	fb3a 7705 	smlawb	r7, sl, r5, r7
 800302e:	ebae 0e09 	sub.w	lr, lr, r9
 8003032:	4456      	add	r6, sl
 8003034:	eba7 070a 	sub.w	r7, r7, sl
 8003038:	eba6 060e 	sub.w	r6, r6, lr
 800303c:	444f      	add	r7, r9
 800303e:	f326 268f 	ssat	r6, #16, r6, asr #10
 8003042:	f327 278f 	ssat	r7, #16, r7, asr #10
 8003046:	f820 6b48 	strh.w	r6, [r0], #72
 800304a:	f823 7948 	strh.w	r7, [r3], #-72
 800304e:	4298      	cmp	r0, r3
 8003050:	d193      	bne.n	8002f7a <offset_6>
 8003052:	e1b5      	b.n	80033c0 <offset_14+0xde>

08003054 <offset_8>:
 8003054:	e8b4 0f00 	ldmia.w	r4!, {r8, r9, sl, fp}
 8003058:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 800305c:	fb3a 1602 	smlawb	r6, sl, r2, r1
 8003060:	fb39 fe12 	smulwt	lr, r9, r2
 8003064:	fb3a 1712 	smlawt	r7, sl, r2, r1
 8003068:	fb39 7702 	smlawb	r7, r9, r2, r7
 800306c:	fb3b ee05 	smlawb	lr, fp, r5, lr
 8003070:	fb38 6615 	smlawt	r6, r8, r5, r6
 8003074:	fb3b 7715 	smlawt	r7, fp, r5, r7
 8003078:	fb38 7705 	smlawb	r7, r8, r5, r7
 800307c:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8003080:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8003084:	e954 ab08 	ldrd	sl, fp, [r4, #-32]
 8003088:	fb38 6602 	smlawb	r6, r8, r2, r6
 800308c:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8003090:	fb38 7712 	smlawt	r7, r8, r2, r7
 8003094:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8003098:	fb39 ee05 	smlawb	lr, r9, r5, lr
 800309c:	fb3a 6615 	smlawt	r6, sl, r5, r6
 80030a0:	fb39 7715 	smlawt	r7, r9, r5, r7
 80030a4:	fb3a 7705 	smlawb	r7, sl, r5, r7
 80030a8:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 80030ac:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 80030b0:	e954 ab0c 	ldrd	sl, fp, [r4, #-48]	; 0x30
 80030b4:	fb38 6602 	smlawb	r6, r8, r2, r6
 80030b8:	fb3b ee12 	smlawt	lr, fp, r2, lr
 80030bc:	fb38 7712 	smlawt	r7, r8, r2, r7
 80030c0:	fb3b 7702 	smlawb	r7, fp, r2, r7
 80030c4:	fb39 ee05 	smlawb	lr, r9, r5, lr
 80030c8:	fb3a 6615 	smlawt	r6, sl, r5, r6
 80030cc:	fb39 7715 	smlawt	r7, r9, r5, r7
 80030d0:	fb3a 7705 	smlawb	r7, sl, r5, r7
 80030d4:	e874 890e 	ldrd	r8, r9, [r4], #-56	; 0x38
 80030d8:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 80030dc:	e8f4 ab16 	ldrd	sl, fp, [r4], #88	; 0x58
 80030e0:	fb38 7712 	smlawt	r7, r8, r2, r7
 80030e4:	fb3b ee12 	smlawt	lr, fp, r2, lr
 80030e8:	fb3b 7702 	smlawb	r7, fp, r2, r7
 80030ec:	fb38 6602 	smlawb	r6, r8, r2, r6
 80030f0:	eb0e 0e6b 	add.w	lr, lr, fp, asr #1
 80030f4:	eb07 0768 	add.w	r7, r7, r8, asr #1
 80030f8:	fb39 ee05 	smlawb	lr, r9, r5, lr
 80030fc:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8003100:	fb39 7715 	smlawt	r7, r9, r5, r7
 8003104:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8003108:	ebae 0e09 	sub.w	lr, lr, r9
 800310c:	4456      	add	r6, sl
 800310e:	eba7 070a 	sub.w	r7, r7, sl
 8003112:	eba6 060e 	sub.w	r6, r6, lr
 8003116:	444f      	add	r7, r9
 8003118:	f326 268f 	ssat	r6, #16, r6, asr #10
 800311c:	f327 278f 	ssat	r7, #16, r7, asr #10
 8003120:	f820 6b48 	strh.w	r6, [r0], #72
 8003124:	f823 7948 	strh.w	r7, [r3], #-72
 8003128:	4298      	cmp	r0, r3
 800312a:	d193      	bne.n	8003054 <offset_8>
 800312c:	e148      	b.n	80033c0 <offset_14+0xde>

0800312e <offset_10>:
 800312e:	e8b4 0f00 	ldmia.w	r4!, {r8, r9, sl, fp}
 8003132:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8003136:	fb3a 1602 	smlawb	r6, sl, r2, r1
 800313a:	fb39 fe12 	smulwt	lr, r9, r2
 800313e:	fb3a 1712 	smlawt	r7, sl, r2, r1
 8003142:	fb39 7702 	smlawb	r7, r9, r2, r7
 8003146:	fb3b ee05 	smlawb	lr, fp, r5, lr
 800314a:	fb38 6615 	smlawt	r6, r8, r5, r6
 800314e:	fb3b 7715 	smlawt	r7, fp, r5, r7
 8003152:	fb38 7705 	smlawb	r7, r8, r5, r7
 8003156:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 800315a:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 800315e:	e954 ab08 	ldrd	sl, fp, [r4, #-32]
 8003162:	fb38 6602 	smlawb	r6, r8, r2, r6
 8003166:	fb3b ee12 	smlawt	lr, fp, r2, lr
 800316a:	fb38 7712 	smlawt	r7, r8, r2, r7
 800316e:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8003172:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8003176:	fb3a 6615 	smlawt	r6, sl, r5, r6
 800317a:	fb39 7715 	smlawt	r7, r9, r5, r7
 800317e:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8003182:	e874 890a 	ldrd	r8, r9, [r4], #-40	; 0x28
 8003186:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 800318a:	e874 ab04 	ldrd	sl, fp, [r4], #-16
 800318e:	fb38 6602 	smlawb	r6, r8, r2, r6
 8003192:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8003196:	fb38 7712 	smlawt	r7, r8, r2, r7
 800319a:	fb3b 7702 	smlawb	r7, fp, r2, r7
 800319e:	fb39 ee05 	smlawb	lr, r9, r5, lr
 80031a2:	fb3a 6615 	smlawt	r6, sl, r5, r6
 80031a6:	fb39 7715 	smlawt	r7, r9, r5, r7
 80031aa:	fb3a 7705 	smlawb	r7, sl, r5, r7
 80031ae:	e894 0f00 	ldmia.w	r4, {r8, r9, sl, fp}
 80031b2:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 80031b6:	f104 0460 	add.w	r4, r4, #96	; 0x60
 80031ba:	fb38 7712 	smlawt	r7, r8, r2, r7
 80031be:	fb3b ee12 	smlawt	lr, fp, r2, lr
 80031c2:	fb3b 7702 	smlawb	r7, fp, r2, r7
 80031c6:	fb38 6602 	smlawb	r6, r8, r2, r6
 80031ca:	eb0e 0e6b 	add.w	lr, lr, fp, asr #1
 80031ce:	eb07 0768 	add.w	r7, r7, r8, asr #1
 80031d2:	fb39 ee05 	smlawb	lr, r9, r5, lr
 80031d6:	fb3a 6615 	smlawt	r6, sl, r5, r6
 80031da:	fb39 7715 	smlawt	r7, r9, r5, r7
 80031de:	fb3a 7705 	smlawb	r7, sl, r5, r7
 80031e2:	ebae 0e09 	sub.w	lr, lr, r9
 80031e6:	4456      	add	r6, sl
 80031e8:	eba7 070a 	sub.w	r7, r7, sl
 80031ec:	eba6 060e 	sub.w	r6, r6, lr
 80031f0:	444f      	add	r7, r9
 80031f2:	f326 268f 	ssat	r6, #16, r6, asr #10
 80031f6:	f327 278f 	ssat	r7, #16, r7, asr #10
 80031fa:	f820 6b48 	strh.w	r6, [r0], #72
 80031fe:	f823 7948 	strh.w	r7, [r3], #-72
 8003202:	4298      	cmp	r0, r3
 8003204:	d193      	bne.n	800312e <offset_10>
 8003206:	e0db      	b.n	80033c0 <offset_14+0xde>

08003208 <offset_12>:
 8003208:	e8b4 0f00 	ldmia.w	r4!, {r8, r9, sl, fp}
 800320c:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8003210:	fb3a 1602 	smlawb	r6, sl, r2, r1
 8003214:	fb39 fe12 	smulwt	lr, r9, r2
 8003218:	fb3a 1712 	smlawt	r7, sl, r2, r1
 800321c:	fb39 7702 	smlawb	r7, r9, r2, r7
 8003220:	fb3b ee05 	smlawb	lr, fp, r5, lr
 8003224:	fb38 6615 	smlawt	r6, r8, r5, r6
 8003228:	fb3b 7715 	smlawt	r7, fp, r5, r7
 800322c:	fb38 7705 	smlawb	r7, r8, r5, r7
 8003230:	e874 8906 	ldrd	r8, r9, [r4], #-24
 8003234:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8003238:	e874 ab08 	ldrd	sl, fp, [r4], #-32
 800323c:	fb38 6602 	smlawb	r6, r8, r2, r6
 8003240:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8003244:	fb38 7712 	smlawt	r7, r8, r2, r7
 8003248:	fb3b 7702 	smlawb	r7, fp, r2, r7
 800324c:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8003250:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8003254:	fb39 7715 	smlawt	r7, r9, r5, r7
 8003258:	fb3a 7705 	smlawb	r7, sl, r5, r7
 800325c:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8003260:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8003264:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
 8003268:	fb38 6602 	smlawb	r6, r8, r2, r6
 800326c:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8003270:	fb38 7712 	smlawt	r7, r8, r2, r7
 8003274:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8003278:	fb39 ee05 	smlawb	lr, r9, r5, lr
 800327c:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8003280:	fb39 7715 	smlawt	r7, r9, r5, r7
 8003284:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8003288:	e894 0f00 	ldmia.w	r4, {r8, r9, sl, fp}
 800328c:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8003290:	f104 0460 	add.w	r4, r4, #96	; 0x60
 8003294:	fb38 7712 	smlawt	r7, r8, r2, r7
 8003298:	fb3b ee12 	smlawt	lr, fp, r2, lr
 800329c:	fb3b 7702 	smlawb	r7, fp, r2, r7
 80032a0:	fb38 6602 	smlawb	r6, r8, r2, r6
 80032a4:	eb0e 0e6b 	add.w	lr, lr, fp, asr #1
 80032a8:	eb07 0768 	add.w	r7, r7, r8, asr #1
 80032ac:	fb39 ee05 	smlawb	lr, r9, r5, lr
 80032b0:	fb3a 6615 	smlawt	r6, sl, r5, r6
 80032b4:	fb39 7715 	smlawt	r7, r9, r5, r7
 80032b8:	fb3a 7705 	smlawb	r7, sl, r5, r7
 80032bc:	ebae 0e09 	sub.w	lr, lr, r9
 80032c0:	4456      	add	r6, sl
 80032c2:	eba7 070a 	sub.w	r7, r7, sl
 80032c6:	eba6 060e 	sub.w	r6, r6, lr
 80032ca:	444f      	add	r7, r9
 80032cc:	f326 268f 	ssat	r6, #16, r6, asr #10
 80032d0:	f327 278f 	ssat	r7, #16, r7, asr #10
 80032d4:	f820 6b48 	strh.w	r6, [r0], #72
 80032d8:	f823 7948 	strh.w	r7, [r3], #-72
 80032dc:	4298      	cmp	r0, r3
 80032de:	d193      	bne.n	8003208 <offset_12>
 80032e0:	e06e      	b.n	80033c0 <offset_14+0xde>

080032e2 <offset_14>:
 80032e2:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 80032e6:	e874 ab0e 	ldrd	sl, fp, [r4], #-56	; 0x38
 80032ea:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 80032ee:	fb3a 1602 	smlawb	r6, sl, r2, r1
 80032f2:	fb39 fe12 	smulwt	lr, r9, r2
 80032f6:	fb3a 1712 	smlawt	r7, sl, r2, r1
 80032fa:	fb39 7702 	smlawb	r7, r9, r2, r7
 80032fe:	fb3b ee05 	smlawb	lr, fp, r5, lr
 8003302:	fb38 6615 	smlawt	r6, r8, r5, r6
 8003306:	fb3b 7715 	smlawt	r7, fp, r5, r7
 800330a:	fb38 7705 	smlawb	r7, r8, r5, r7
 800330e:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8003312:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8003316:	e9d4 ab08 	ldrd	sl, fp, [r4, #32]
 800331a:	fb38 6602 	smlawb	r6, r8, r2, r6
 800331e:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8003322:	fb38 7712 	smlawt	r7, r8, r2, r7
 8003326:	fb3b 7702 	smlawb	r7, fp, r2, r7
 800332a:	fb39 ee05 	smlawb	lr, r9, r5, lr
 800332e:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8003332:	fb39 7715 	smlawt	r7, r9, r5, r7
 8003336:	fb3a 7705 	smlawb	r7, sl, r5, r7
 800333a:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 800333e:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8003342:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
 8003346:	fb38 6602 	smlawb	r6, r8, r2, r6
 800334a:	fb3b ee12 	smlawt	lr, fp, r2, lr
 800334e:	fb38 7712 	smlawt	r7, r8, r2, r7
 8003352:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8003356:	fb39 ee05 	smlawb	lr, r9, r5, lr
 800335a:	fb3a 6615 	smlawt	r6, sl, r5, r6
 800335e:	fb39 7715 	smlawt	r7, r9, r5, r7
 8003362:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8003366:	e8f4 8902 	ldrd	r8, r9, [r4], #8
 800336a:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 800336e:	e8f4 ab16 	ldrd	sl, fp, [r4], #88	; 0x58
 8003372:	fb38 7712 	smlawt	r7, r8, r2, r7
 8003376:	fb3b ee12 	smlawt	lr, fp, r2, lr
 800337a:	fb3b 7702 	smlawb	r7, fp, r2, r7
 800337e:	fb38 6602 	smlawb	r6, r8, r2, r6
 8003382:	eb0e 0e6b 	add.w	lr, lr, fp, asr #1
 8003386:	eb07 0768 	add.w	r7, r7, r8, asr #1
 800338a:	fb39 ee05 	smlawb	lr, r9, r5, lr
 800338e:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8003392:	fb39 7715 	smlawt	r7, r9, r5, r7
 8003396:	fb3a 7705 	smlawb	r7, sl, r5, r7
 800339a:	ebae 0e09 	sub.w	lr, lr, r9
 800339e:	4456      	add	r6, sl
 80033a0:	eba7 070a 	sub.w	r7, r7, sl
 80033a4:	eba6 060e 	sub.w	r6, r6, lr
 80033a8:	444f      	add	r7, r9
 80033aa:	f326 268f 	ssat	r6, #16, r6, asr #10
 80033ae:	f327 278f 	ssat	r7, #16, r7, asr #10
 80033b2:	f820 6b48 	strh.w	r6, [r0], #72
 80033b6:	f823 7948 	strh.w	r7, [r3], #-72
 80033ba:	4298      	cmp	r0, r3
 80033bc:	d191      	bne.n	80032e2 <offset_14>
 80033be:	e7ff      	b.n	80033c0 <offset_14+0xde>
 80033c0:	bc0f      	pop	{r0, r1, r2, r3}
 80033c2:	f100 0004 	add.w	r0, r0, #4
 80033c6:	f103 0304 	add.w	r3, r3, #4
 80033ca:	f012 0f01 	tst.w	r2, #1
 80033ce:	d006      	beq.n	80033de <offset_14+0xfc>
 80033d0:	1e52      	subs	r2, r2, #1
 80033d2:	f1a1 5100 	sub.w	r1, r1, #536870912	; 0x20000000
 80033d6:	dd0b      	ble.n	80033f0 <offset_14+0x10e>
 80033d8:	b40f      	push	{r0, r1, r2, r3}
 80033da:	f7ff b982 	b.w	80026e2 <IDCT32PLONKAS+0x6>
 80033de:	f1a2 0201 	sub.w	r2, r2, #1
 80033e2:	b40f      	push	{r0, r1, r2, r3}
 80033e4:	f1a1 5280 	sub.w	r2, r1, #268435456	; 0x10000000
 80033e8:	f102 0211 	add.w	r2, r2, #17
 80033ec:	f7ff b97d 	b.w	80026ea <IDCT32PLONKAS+0xe>
 80033f0:	ea4f 64b1 	mov.w	r4, r1, ror #26
 80033f4:	f85d fb04 	ldr.w	pc, [sp], #4

080033f8 <MP3D_SPCORP_Symbol_033>:
 80033f8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033fc:	6809      	ldr	r1, [r1, #0]
 80033fe:	4603      	mov	r3, r0
 8003400:	f8df c030 	ldr.w	ip, [pc, #48]	; 8003434 <MP3D_SPCORP_Symbol_033+0x3c>
 8003404:	f7ff f96a 	bl	80026dc <IDCT32PLONKAS>
 8003408:	bc0f      	pop	{r0, r1, r2, r3}
 800340a:	680d      	ldr	r5, [r1, #0]
 800340c:	600c      	str	r4, [r1, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	bf08      	it	eq
 8003412:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003416:	f505 6108 	add.w	r1, r5, #2176	; 0x880
 800341a:	f100 0302 	add.w	r3, r0, #2
 800341e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8003422:	f7ff f95b 	bl	80026dc <IDCT32PLONKAS>
 8003426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800342a:	0000      	.short	0x0000
 800342c:	08011a58 	.word	0x08011a58
 8003430:	08011ab8 	.word	0x08011ab8
 8003434:	08011c98 	.word	0x08011c98

08003438 <__aeabi_uldivmod>:
 8003438:	b953      	cbnz	r3, 8003450 <__aeabi_uldivmod+0x18>
 800343a:	b94a      	cbnz	r2, 8003450 <__aeabi_uldivmod+0x18>
 800343c:	2900      	cmp	r1, #0
 800343e:	bf08      	it	eq
 8003440:	2800      	cmpeq	r0, #0
 8003442:	bf1c      	itt	ne
 8003444:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8003448:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800344c:	f000 b96c 	b.w	8003728 <__aeabi_idiv0>
 8003450:	f1ad 0c08 	sub.w	ip, sp, #8
 8003454:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8003458:	f000 f806 	bl	8003468 <__udivmoddi4>
 800345c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003460:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003464:	b004      	add	sp, #16
 8003466:	4770      	bx	lr

08003468 <__udivmoddi4>:
 8003468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800346c:	9e08      	ldr	r6, [sp, #32]
 800346e:	460d      	mov	r5, r1
 8003470:	4604      	mov	r4, r0
 8003472:	468e      	mov	lr, r1
 8003474:	2b00      	cmp	r3, #0
 8003476:	f040 8082 	bne.w	800357e <__udivmoddi4+0x116>
 800347a:	428a      	cmp	r2, r1
 800347c:	4617      	mov	r7, r2
 800347e:	d946      	bls.n	800350e <__udivmoddi4+0xa6>
 8003480:	fab2 f282 	clz	r2, r2
 8003484:	b14a      	cbz	r2, 800349a <__udivmoddi4+0x32>
 8003486:	f1c2 0120 	rsb	r1, r2, #32
 800348a:	fa05 f302 	lsl.w	r3, r5, r2
 800348e:	fa20 f101 	lsr.w	r1, r0, r1
 8003492:	4097      	lsls	r7, r2
 8003494:	ea41 0e03 	orr.w	lr, r1, r3
 8003498:	4094      	lsls	r4, r2
 800349a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800349e:	0c23      	lsrs	r3, r4, #16
 80034a0:	fbbe fcf8 	udiv	ip, lr, r8
 80034a4:	b2b9      	uxth	r1, r7
 80034a6:	fb08 ee1c 	mls	lr, r8, ip, lr
 80034aa:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80034ae:	fb0c f001 	mul.w	r0, ip, r1
 80034b2:	4298      	cmp	r0, r3
 80034b4:	d90a      	bls.n	80034cc <__udivmoddi4+0x64>
 80034b6:	18fb      	adds	r3, r7, r3
 80034b8:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 80034bc:	f080 8116 	bcs.w	80036ec <__udivmoddi4+0x284>
 80034c0:	4298      	cmp	r0, r3
 80034c2:	f240 8113 	bls.w	80036ec <__udivmoddi4+0x284>
 80034c6:	f1ac 0c02 	sub.w	ip, ip, #2
 80034ca:	443b      	add	r3, r7
 80034cc:	1a1b      	subs	r3, r3, r0
 80034ce:	b2a4      	uxth	r4, r4
 80034d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80034d4:	fb08 3310 	mls	r3, r8, r0, r3
 80034d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80034dc:	fb00 f101 	mul.w	r1, r0, r1
 80034e0:	42a1      	cmp	r1, r4
 80034e2:	d909      	bls.n	80034f8 <__udivmoddi4+0x90>
 80034e4:	193c      	adds	r4, r7, r4
 80034e6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80034ea:	f080 8101 	bcs.w	80036f0 <__udivmoddi4+0x288>
 80034ee:	42a1      	cmp	r1, r4
 80034f0:	f240 80fe 	bls.w	80036f0 <__udivmoddi4+0x288>
 80034f4:	3802      	subs	r0, #2
 80034f6:	443c      	add	r4, r7
 80034f8:	1a64      	subs	r4, r4, r1
 80034fa:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80034fe:	2100      	movs	r1, #0
 8003500:	b11e      	cbz	r6, 800350a <__udivmoddi4+0xa2>
 8003502:	40d4      	lsrs	r4, r2
 8003504:	2300      	movs	r3, #0
 8003506:	e9c6 4300 	strd	r4, r3, [r6]
 800350a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800350e:	b902      	cbnz	r2, 8003512 <__udivmoddi4+0xaa>
 8003510:	deff      	udf	#255	; 0xff
 8003512:	fab2 f282 	clz	r2, r2
 8003516:	2a00      	cmp	r2, #0
 8003518:	d14f      	bne.n	80035ba <__udivmoddi4+0x152>
 800351a:	1bcb      	subs	r3, r1, r7
 800351c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8003520:	fa1f f887 	uxth.w	r8, r7
 8003524:	2101      	movs	r1, #1
 8003526:	fbb3 fcfe 	udiv	ip, r3, lr
 800352a:	0c25      	lsrs	r5, r4, #16
 800352c:	fb0e 331c 	mls	r3, lr, ip, r3
 8003530:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8003534:	fb08 f30c 	mul.w	r3, r8, ip
 8003538:	42ab      	cmp	r3, r5
 800353a:	d907      	bls.n	800354c <__udivmoddi4+0xe4>
 800353c:	197d      	adds	r5, r7, r5
 800353e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8003542:	d202      	bcs.n	800354a <__udivmoddi4+0xe2>
 8003544:	42ab      	cmp	r3, r5
 8003546:	f200 80e7 	bhi.w	8003718 <__udivmoddi4+0x2b0>
 800354a:	4684      	mov	ip, r0
 800354c:	1aed      	subs	r5, r5, r3
 800354e:	b2a3      	uxth	r3, r4
 8003550:	fbb5 f0fe 	udiv	r0, r5, lr
 8003554:	fb0e 5510 	mls	r5, lr, r0, r5
 8003558:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800355c:	fb08 f800 	mul.w	r8, r8, r0
 8003560:	45a0      	cmp	r8, r4
 8003562:	d907      	bls.n	8003574 <__udivmoddi4+0x10c>
 8003564:	193c      	adds	r4, r7, r4
 8003566:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800356a:	d202      	bcs.n	8003572 <__udivmoddi4+0x10a>
 800356c:	45a0      	cmp	r8, r4
 800356e:	f200 80d7 	bhi.w	8003720 <__udivmoddi4+0x2b8>
 8003572:	4618      	mov	r0, r3
 8003574:	eba4 0408 	sub.w	r4, r4, r8
 8003578:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800357c:	e7c0      	b.n	8003500 <__udivmoddi4+0x98>
 800357e:	428b      	cmp	r3, r1
 8003580:	d908      	bls.n	8003594 <__udivmoddi4+0x12c>
 8003582:	2e00      	cmp	r6, #0
 8003584:	f000 80af 	beq.w	80036e6 <__udivmoddi4+0x27e>
 8003588:	2100      	movs	r1, #0
 800358a:	e9c6 0500 	strd	r0, r5, [r6]
 800358e:	4608      	mov	r0, r1
 8003590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003594:	fab3 f183 	clz	r1, r3
 8003598:	2900      	cmp	r1, #0
 800359a:	d14b      	bne.n	8003634 <__udivmoddi4+0x1cc>
 800359c:	42ab      	cmp	r3, r5
 800359e:	d302      	bcc.n	80035a6 <__udivmoddi4+0x13e>
 80035a0:	4282      	cmp	r2, r0
 80035a2:	f200 80b7 	bhi.w	8003714 <__udivmoddi4+0x2ac>
 80035a6:	1a84      	subs	r4, r0, r2
 80035a8:	eb65 0303 	sbc.w	r3, r5, r3
 80035ac:	2001      	movs	r0, #1
 80035ae:	469e      	mov	lr, r3
 80035b0:	2e00      	cmp	r6, #0
 80035b2:	d0aa      	beq.n	800350a <__udivmoddi4+0xa2>
 80035b4:	e9c6 4e00 	strd	r4, lr, [r6]
 80035b8:	e7a7      	b.n	800350a <__udivmoddi4+0xa2>
 80035ba:	f1c2 0c20 	rsb	ip, r2, #32
 80035be:	fa01 f302 	lsl.w	r3, r1, r2
 80035c2:	4097      	lsls	r7, r2
 80035c4:	fa20 f00c 	lsr.w	r0, r0, ip
 80035c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80035cc:	fa21 fc0c 	lsr.w	ip, r1, ip
 80035d0:	4318      	orrs	r0, r3
 80035d2:	fbbc f1fe 	udiv	r1, ip, lr
 80035d6:	0c05      	lsrs	r5, r0, #16
 80035d8:	fb0e cc11 	mls	ip, lr, r1, ip
 80035dc:	fa1f f887 	uxth.w	r8, r7
 80035e0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80035e4:	fb01 f308 	mul.w	r3, r1, r8
 80035e8:	42ab      	cmp	r3, r5
 80035ea:	fa04 f402 	lsl.w	r4, r4, r2
 80035ee:	d909      	bls.n	8003604 <__udivmoddi4+0x19c>
 80035f0:	197d      	adds	r5, r7, r5
 80035f2:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 80035f6:	f080 808b 	bcs.w	8003710 <__udivmoddi4+0x2a8>
 80035fa:	42ab      	cmp	r3, r5
 80035fc:	f240 8088 	bls.w	8003710 <__udivmoddi4+0x2a8>
 8003600:	3902      	subs	r1, #2
 8003602:	443d      	add	r5, r7
 8003604:	1aeb      	subs	r3, r5, r3
 8003606:	b285      	uxth	r5, r0
 8003608:	fbb3 f0fe 	udiv	r0, r3, lr
 800360c:	fb0e 3310 	mls	r3, lr, r0, r3
 8003610:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8003614:	fb00 f308 	mul.w	r3, r0, r8
 8003618:	42ab      	cmp	r3, r5
 800361a:	d907      	bls.n	800362c <__udivmoddi4+0x1c4>
 800361c:	197d      	adds	r5, r7, r5
 800361e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8003622:	d271      	bcs.n	8003708 <__udivmoddi4+0x2a0>
 8003624:	42ab      	cmp	r3, r5
 8003626:	d96f      	bls.n	8003708 <__udivmoddi4+0x2a0>
 8003628:	3802      	subs	r0, #2
 800362a:	443d      	add	r5, r7
 800362c:	1aeb      	subs	r3, r5, r3
 800362e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8003632:	e778      	b.n	8003526 <__udivmoddi4+0xbe>
 8003634:	f1c1 0c20 	rsb	ip, r1, #32
 8003638:	408b      	lsls	r3, r1
 800363a:	fa22 f70c 	lsr.w	r7, r2, ip
 800363e:	431f      	orrs	r7, r3
 8003640:	fa20 f40c 	lsr.w	r4, r0, ip
 8003644:	fa05 f301 	lsl.w	r3, r5, r1
 8003648:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800364c:	fa25 f50c 	lsr.w	r5, r5, ip
 8003650:	431c      	orrs	r4, r3
 8003652:	0c23      	lsrs	r3, r4, #16
 8003654:	fbb5 f9fe 	udiv	r9, r5, lr
 8003658:	fa1f f887 	uxth.w	r8, r7
 800365c:	fb0e 5519 	mls	r5, lr, r9, r5
 8003660:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8003664:	fb09 fa08 	mul.w	sl, r9, r8
 8003668:	45aa      	cmp	sl, r5
 800366a:	fa02 f201 	lsl.w	r2, r2, r1
 800366e:	fa00 f301 	lsl.w	r3, r0, r1
 8003672:	d908      	bls.n	8003686 <__udivmoddi4+0x21e>
 8003674:	197d      	adds	r5, r7, r5
 8003676:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800367a:	d247      	bcs.n	800370c <__udivmoddi4+0x2a4>
 800367c:	45aa      	cmp	sl, r5
 800367e:	d945      	bls.n	800370c <__udivmoddi4+0x2a4>
 8003680:	f1a9 0902 	sub.w	r9, r9, #2
 8003684:	443d      	add	r5, r7
 8003686:	eba5 050a 	sub.w	r5, r5, sl
 800368a:	b2a4      	uxth	r4, r4
 800368c:	fbb5 f0fe 	udiv	r0, r5, lr
 8003690:	fb0e 5510 	mls	r5, lr, r0, r5
 8003694:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8003698:	fb00 f808 	mul.w	r8, r0, r8
 800369c:	45a0      	cmp	r8, r4
 800369e:	d907      	bls.n	80036b0 <__udivmoddi4+0x248>
 80036a0:	193c      	adds	r4, r7, r4
 80036a2:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80036a6:	d22d      	bcs.n	8003704 <__udivmoddi4+0x29c>
 80036a8:	45a0      	cmp	r8, r4
 80036aa:	d92b      	bls.n	8003704 <__udivmoddi4+0x29c>
 80036ac:	3802      	subs	r0, #2
 80036ae:	443c      	add	r4, r7
 80036b0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80036b4:	eba4 0408 	sub.w	r4, r4, r8
 80036b8:	fba0 8902 	umull	r8, r9, r0, r2
 80036bc:	454c      	cmp	r4, r9
 80036be:	46c6      	mov	lr, r8
 80036c0:	464d      	mov	r5, r9
 80036c2:	d319      	bcc.n	80036f8 <__udivmoddi4+0x290>
 80036c4:	d016      	beq.n	80036f4 <__udivmoddi4+0x28c>
 80036c6:	b15e      	cbz	r6, 80036e0 <__udivmoddi4+0x278>
 80036c8:	ebb3 020e 	subs.w	r2, r3, lr
 80036cc:	eb64 0405 	sbc.w	r4, r4, r5
 80036d0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80036d4:	40ca      	lsrs	r2, r1
 80036d6:	ea4c 0202 	orr.w	r2, ip, r2
 80036da:	40cc      	lsrs	r4, r1
 80036dc:	e9c6 2400 	strd	r2, r4, [r6]
 80036e0:	2100      	movs	r1, #0
 80036e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036e6:	4631      	mov	r1, r6
 80036e8:	4630      	mov	r0, r6
 80036ea:	e70e      	b.n	800350a <__udivmoddi4+0xa2>
 80036ec:	46ac      	mov	ip, r5
 80036ee:	e6ed      	b.n	80034cc <__udivmoddi4+0x64>
 80036f0:	4618      	mov	r0, r3
 80036f2:	e701      	b.n	80034f8 <__udivmoddi4+0x90>
 80036f4:	4543      	cmp	r3, r8
 80036f6:	d2e6      	bcs.n	80036c6 <__udivmoddi4+0x25e>
 80036f8:	ebb8 0e02 	subs.w	lr, r8, r2
 80036fc:	eb69 0507 	sbc.w	r5, r9, r7
 8003700:	3801      	subs	r0, #1
 8003702:	e7e0      	b.n	80036c6 <__udivmoddi4+0x25e>
 8003704:	4628      	mov	r0, r5
 8003706:	e7d3      	b.n	80036b0 <__udivmoddi4+0x248>
 8003708:	4660      	mov	r0, ip
 800370a:	e78f      	b.n	800362c <__udivmoddi4+0x1c4>
 800370c:	4681      	mov	r9, r0
 800370e:	e7ba      	b.n	8003686 <__udivmoddi4+0x21e>
 8003710:	4661      	mov	r1, ip
 8003712:	e777      	b.n	8003604 <__udivmoddi4+0x19c>
 8003714:	4608      	mov	r0, r1
 8003716:	e74b      	b.n	80035b0 <__udivmoddi4+0x148>
 8003718:	f1ac 0c02 	sub.w	ip, ip, #2
 800371c:	443d      	add	r5, r7
 800371e:	e715      	b.n	800354c <__udivmoddi4+0xe4>
 8003720:	3802      	subs	r0, #2
 8003722:	443c      	add	r4, r7
 8003724:	e726      	b.n	8003574 <__udivmoddi4+0x10c>
 8003726:	bf00      	nop

08003728 <__aeabi_idiv0>:
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop

0800372c <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af02      	add	r7, sp, #8
 8003732:	4603      	mov	r3, r0
 8003734:	6039      	str	r1, [r7, #0]
 8003736:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8003738:	4a09      	ldr	r2, [pc, #36]	; (8003760 <write_register+0x34>)
 800373a:	79fb      	ldrb	r3, [r7, #7]
 800373c:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	781a      	ldrb	r2, [r3, #0]
 8003742:	4b07      	ldr	r3, [pc, #28]	; (8003760 <write_register+0x34>)
 8003744:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 8003746:	2364      	movs	r3, #100	; 0x64
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	2302      	movs	r3, #2
 800374c:	4a04      	ldr	r2, [pc, #16]	; (8003760 <write_register+0x34>)
 800374e:	2194      	movs	r1, #148	; 0x94
 8003750:	4804      	ldr	r0, [pc, #16]	; (8003764 <write_register+0x38>)
 8003752:	f003 fc5b 	bl	800700c <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 8003756:	bf00      	nop
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	200000ac 	.word	0x200000ac
 8003764:	200000b0 	.word	0x200000b0

08003768 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af02      	add	r7, sp, #8
 800376e:	4603      	mov	r3, r0
 8003770:	6039      	str	r1, [r7, #0]
 8003772:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8003774:	4a0b      	ldr	r2, [pc, #44]	; (80037a4 <read_register+0x3c>)
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 800377a:	2364      	movs	r3, #100	; 0x64
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	2301      	movs	r3, #1
 8003780:	4a08      	ldr	r2, [pc, #32]	; (80037a4 <read_register+0x3c>)
 8003782:	2194      	movs	r1, #148	; 0x94
 8003784:	4808      	ldr	r0, [pc, #32]	; (80037a8 <read_register+0x40>)
 8003786:	f003 fc41 	bl	800700c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 800378a:	2364      	movs	r3, #100	; 0x64
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	2301      	movs	r3, #1
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	2194      	movs	r1, #148	; 0x94
 8003794:	4804      	ldr	r0, [pc, #16]	; (80037a8 <read_register+0x40>)
 8003796:	f003 fd37 	bl	8007208 <HAL_I2C_Master_Receive>
}
 800379a:	bf00      	nop
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	200000ac 	.word	0x200000ac
 80037a8:	200000b0 	.word	0x200000b0

080037ac <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 80037ac:	b084      	sub	sp, #16
 80037ae:	b580      	push	{r7, lr}
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	f107 0c08 	add.w	ip, r7, #8
 80037b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 80037ba:	4b81      	ldr	r3, [pc, #516]	; (80039c0 <CS43_Init+0x214>)
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 80037c2:	4b7f      	ldr	r3, [pc, #508]	; (80039c0 <CS43_Init+0x214>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69da      	ldr	r2, [r3, #28]
 80037c8:	4b7d      	ldr	r3, [pc, #500]	; (80039c0 <CS43_Init+0x214>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037d0:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80037d2:	2201      	movs	r2, #1
 80037d4:	2110      	movs	r1, #16
 80037d6:	487b      	ldr	r0, [pc, #492]	; (80039c4 <CS43_Init+0x218>)
 80037d8:	f001 fd4e 	bl	8005278 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 80037dc:	4b7a      	ldr	r3, [pc, #488]	; (80039c8 <CS43_Init+0x21c>)
 80037de:	4618      	mov	r0, r3
 80037e0:	f107 0308 	add.w	r3, r7, #8
 80037e4:	2254      	movs	r2, #84	; 0x54
 80037e6:	4619      	mov	r1, r3
 80037e8:	f00c fbe0 	bl	800ffac <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 80037ec:	4b77      	ldr	r3, [pc, #476]	; (80039cc <CS43_Init+0x220>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 80037f2:	4976      	ldr	r1, [pc, #472]	; (80039cc <CS43_Init+0x220>)
 80037f4:	2002      	movs	r0, #2
 80037f6:	f7ff ff99 	bl	800372c <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80037fa:	4b74      	ldr	r3, [pc, #464]	; (80039cc <CS43_Init+0x220>)
 80037fc:	2280      	movs	r2, #128	; 0x80
 80037fe:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8003800:	4b72      	ldr	r3, [pc, #456]	; (80039cc <CS43_Init+0x220>)
 8003802:	785b      	ldrb	r3, [r3, #1]
 8003804:	f043 0320 	orr.w	r3, r3, #32
 8003808:	b2da      	uxtb	r2, r3
 800380a:	4b70      	ldr	r3, [pc, #448]	; (80039cc <CS43_Init+0x220>)
 800380c:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800380e:	4b6f      	ldr	r3, [pc, #444]	; (80039cc <CS43_Init+0x220>)
 8003810:	785b      	ldrb	r3, [r3, #1]
 8003812:	f043 030c 	orr.w	r3, r3, #12
 8003816:	b2da      	uxtb	r2, r3
 8003818:	4b6c      	ldr	r3, [pc, #432]	; (80039cc <CS43_Init+0x220>)
 800381a:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 800381c:	4b6b      	ldr	r3, [pc, #428]	; (80039cc <CS43_Init+0x220>)
 800381e:	785b      	ldrb	r3, [r3, #1]
 8003820:	f043 0303 	orr.w	r3, r3, #3
 8003824:	b2da      	uxtb	r2, r3
 8003826:	4b69      	ldr	r3, [pc, #420]	; (80039cc <CS43_Init+0x220>)
 8003828:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 800382a:	4969      	ldr	r1, [pc, #420]	; (80039d0 <CS43_Init+0x224>)
 800382c:	2004      	movs	r0, #4
 800382e:	f7ff ff7d 	bl	800372c <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 8003832:	4b66      	ldr	r3, [pc, #408]	; (80039cc <CS43_Init+0x220>)
 8003834:	2280      	movs	r2, #128	; 0x80
 8003836:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 8003838:	4965      	ldr	r1, [pc, #404]	; (80039d0 <CS43_Init+0x224>)
 800383a:	2005      	movs	r0, #5
 800383c:	f7ff ff76 	bl	800372c <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8003840:	4962      	ldr	r1, [pc, #392]	; (80039cc <CS43_Init+0x220>)
 8003842:	2006      	movs	r0, #6
 8003844:	f7ff ff90 	bl	8003768 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8003848:	4b60      	ldr	r3, [pc, #384]	; (80039cc <CS43_Init+0x220>)
 800384a:	785b      	ldrb	r3, [r3, #1]
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	b2da      	uxtb	r2, r3
 8003852:	4b5e      	ldr	r3, [pc, #376]	; (80039cc <CS43_Init+0x220>)
 8003854:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 8003856:	4b5d      	ldr	r3, [pc, #372]	; (80039cc <CS43_Init+0x220>)
 8003858:	785b      	ldrb	r3, [r3, #1]
 800385a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800385e:	b2da      	uxtb	r2, r3
 8003860:	4b5a      	ldr	r3, [pc, #360]	; (80039cc <CS43_Init+0x220>)
 8003862:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 8003864:	4b59      	ldr	r3, [pc, #356]	; (80039cc <CS43_Init+0x220>)
 8003866:	785b      	ldrb	r3, [r3, #1]
 8003868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800386c:	b2da      	uxtb	r2, r3
 800386e:	4b57      	ldr	r3, [pc, #348]	; (80039cc <CS43_Init+0x220>)
 8003870:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8003872:	4b56      	ldr	r3, [pc, #344]	; (80039cc <CS43_Init+0x220>)
 8003874:	785b      	ldrb	r3, [r3, #1]
 8003876:	f023 0310 	bic.w	r3, r3, #16
 800387a:	b2da      	uxtb	r2, r3
 800387c:	4b53      	ldr	r3, [pc, #332]	; (80039cc <CS43_Init+0x220>)
 800387e:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8003880:	4b52      	ldr	r3, [pc, #328]	; (80039cc <CS43_Init+0x220>)
 8003882:	785b      	ldrb	r3, [r3, #1]
 8003884:	f023 0304 	bic.w	r3, r3, #4
 8003888:	b2da      	uxtb	r2, r3
 800388a:	4b50      	ldr	r3, [pc, #320]	; (80039cc <CS43_Init+0x220>)
 800388c:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 800388e:	4b4f      	ldr	r3, [pc, #316]	; (80039cc <CS43_Init+0x220>)
 8003890:	785b      	ldrb	r3, [r3, #1]
 8003892:	f043 0304 	orr.w	r3, r3, #4
 8003896:	b2da      	uxtb	r2, r3
 8003898:	4b4c      	ldr	r3, [pc, #304]	; (80039cc <CS43_Init+0x220>)
 800389a:	705a      	strb	r2, [r3, #1]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 800389c:	4b4b      	ldr	r3, [pc, #300]	; (80039cc <CS43_Init+0x220>)
 800389e:	785b      	ldrb	r3, [r3, #1]
 80038a0:	f043 0303 	orr.w	r3, r3, #3
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	4b49      	ldr	r3, [pc, #292]	; (80039cc <CS43_Init+0x220>)
 80038a8:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 80038aa:	4949      	ldr	r1, [pc, #292]	; (80039d0 <CS43_Init+0x224>)
 80038ac:	2006      	movs	r0, #6
 80038ae:	f7ff ff3d 	bl	800372c <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 80038b2:	4947      	ldr	r1, [pc, #284]	; (80039d0 <CS43_Init+0x224>)
 80038b4:	2008      	movs	r0, #8
 80038b6:	f7ff ff57 	bl	8003768 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 80038ba:	4b44      	ldr	r3, [pc, #272]	; (80039cc <CS43_Init+0x220>)
 80038bc:	785b      	ldrb	r3, [r3, #1]
 80038be:	f023 030f 	bic.w	r3, r3, #15
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	4b41      	ldr	r3, [pc, #260]	; (80039cc <CS43_Init+0x220>)
 80038c6:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 80038c8:	4b40      	ldr	r3, [pc, #256]	; (80039cc <CS43_Init+0x220>)
 80038ca:	785b      	ldrb	r3, [r3, #1]
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	4b3e      	ldr	r3, [pc, #248]	; (80039cc <CS43_Init+0x220>)
 80038d4:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 80038d6:	493e      	ldr	r1, [pc, #248]	; (80039d0 <CS43_Init+0x224>)
 80038d8:	2008      	movs	r0, #8
 80038da:	f7ff ff27 	bl	800372c <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 80038de:	493c      	ldr	r1, [pc, #240]	; (80039d0 <CS43_Init+0x224>)
 80038e0:	2009      	movs	r0, #9
 80038e2:	f7ff ff41 	bl	8003768 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 80038e6:	4b39      	ldr	r3, [pc, #228]	; (80039cc <CS43_Init+0x220>)
 80038e8:	785b      	ldrb	r3, [r3, #1]
 80038ea:	f023 030f 	bic.w	r3, r3, #15
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	4b36      	ldr	r3, [pc, #216]	; (80039cc <CS43_Init+0x220>)
 80038f2:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 80038f4:	4b35      	ldr	r3, [pc, #212]	; (80039cc <CS43_Init+0x220>)
 80038f6:	785b      	ldrb	r3, [r3, #1]
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	4b33      	ldr	r3, [pc, #204]	; (80039cc <CS43_Init+0x220>)
 8003900:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 8003902:	4933      	ldr	r1, [pc, #204]	; (80039d0 <CS43_Init+0x224>)
 8003904:	2009      	movs	r0, #9
 8003906:	f7ff ff11 	bl	800372c <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 800390a:	4931      	ldr	r1, [pc, #196]	; (80039d0 <CS43_Init+0x224>)
 800390c:	200e      	movs	r0, #14
 800390e:	f7ff ff2b 	bl	8003768 <read_register>
	if(outputMode == MODE_ANALOG1)
 8003912:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8003916:	2b01      	cmp	r3, #1
 8003918:	d123      	bne.n	8003962 <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 800391a:	4b2c      	ldr	r3, [pc, #176]	; (80039cc <CS43_Init+0x220>)
 800391c:	785b      	ldrb	r3, [r3, #1]
 800391e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003922:	b2da      	uxtb	r2, r3
 8003924:	4b29      	ldr	r3, [pc, #164]	; (80039cc <CS43_Init+0x220>)
 8003926:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 8003928:	4b28      	ldr	r3, [pc, #160]	; (80039cc <CS43_Init+0x220>)
 800392a:	785b      	ldrb	r3, [r3, #1]
 800392c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003930:	b2da      	uxtb	r2, r3
 8003932:	4b26      	ldr	r3, [pc, #152]	; (80039cc <CS43_Init+0x220>)
 8003934:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 8003936:	4b25      	ldr	r3, [pc, #148]	; (80039cc <CS43_Init+0x220>)
 8003938:	785b      	ldrb	r3, [r3, #1]
 800393a:	f023 0320 	bic.w	r3, r3, #32
 800393e:	b2da      	uxtb	r2, r3
 8003940:	4b22      	ldr	r3, [pc, #136]	; (80039cc <CS43_Init+0x220>)
 8003942:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 8003944:	4b21      	ldr	r3, [pc, #132]	; (80039cc <CS43_Init+0x220>)
 8003946:	785b      	ldrb	r3, [r3, #1]
 8003948:	f023 0310 	bic.w	r3, r3, #16
 800394c:	b2da      	uxtb	r2, r3
 800394e:	4b1f      	ldr	r3, [pc, #124]	; (80039cc <CS43_Init+0x220>)
 8003950:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8003952:	4b1e      	ldr	r3, [pc, #120]	; (80039cc <CS43_Init+0x220>)
 8003954:	785b      	ldrb	r3, [r3, #1]
 8003956:	f023 0308 	bic.w	r3, r3, #8
 800395a:	b2da      	uxtb	r2, r3
 800395c:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <CS43_Init+0x220>)
 800395e:	705a      	strb	r2, [r3, #1]
 8003960:	e006      	b.n	8003970 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 8003962:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8003966:	2b00      	cmp	r3, #0
 8003968:	d102      	bne.n	8003970 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 800396a:	4b18      	ldr	r3, [pc, #96]	; (80039cc <CS43_Init+0x220>)
 800396c:	2202      	movs	r2, #2
 800396e:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8003970:	4917      	ldr	r1, [pc, #92]	; (80039d0 <CS43_Init+0x224>)
 8003972:	200e      	movs	r0, #14
 8003974:	f7ff feda 	bl	800372c <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8003978:	4915      	ldr	r1, [pc, #84]	; (80039d0 <CS43_Init+0x224>)
 800397a:	200f      	movs	r0, #15
 800397c:	f7ff fef4 	bl	8003768 <read_register>
	iData[1] = 0x00;
 8003980:	4b12      	ldr	r3, [pc, #72]	; (80039cc <CS43_Init+0x220>)
 8003982:	2200      	movs	r2, #0
 8003984:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 8003986:	4912      	ldr	r1, [pc, #72]	; (80039d0 <CS43_Init+0x224>)
 8003988:	200f      	movs	r0, #15
 800398a:	f7ff fecf 	bl	800372c <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 800398e:	4b0f      	ldr	r3, [pc, #60]	; (80039cc <CS43_Init+0x220>)
 8003990:	2200      	movs	r2, #0
 8003992:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8003994:	490e      	ldr	r1, [pc, #56]	; (80039d0 <CS43_Init+0x224>)
 8003996:	2014      	movs	r0, #20
 8003998:	f7ff fec8 	bl	800372c <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800399c:	490c      	ldr	r1, [pc, #48]	; (80039d0 <CS43_Init+0x224>)
 800399e:	2015      	movs	r0, #21
 80039a0:	f7ff fec4 	bl	800372c <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 80039a4:	490a      	ldr	r1, [pc, #40]	; (80039d0 <CS43_Init+0x224>)
 80039a6:	201a      	movs	r0, #26
 80039a8:	f7ff fec0 	bl	800372c <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 80039ac:	4908      	ldr	r1, [pc, #32]	; (80039d0 <CS43_Init+0x224>)
 80039ae:	201b      	movs	r0, #27
 80039b0:	f7ff febc 	bl	800372c <write_register>
}
 80039b4:	bf00      	nop
 80039b6:	46bd      	mov	sp, r7
 80039b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039bc:	b004      	add	sp, #16
 80039be:	4770      	bx	lr
 80039c0:	200052dc 	.word	0x200052dc
 80039c4:	40020c00 	.word	0x40020c00
 80039c8:	200000b0 	.word	0x200000b0
 80039cc:	200000ac 	.word	0x200000ac
 80039d0:	200000ad 	.word	0x200000ad

080039d4 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	71fb      	strb	r3, [r7, #7]
	switch (side)
 80039de:	79fb      	ldrb	r3, [r7, #7]
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d837      	bhi.n	8003a54 <CS43_Enable_RightLeft+0x80>
 80039e4:	a201      	add	r2, pc, #4	; (adr r2, 80039ec <CS43_Enable_RightLeft+0x18>)
 80039e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ea:	bf00      	nop
 80039ec:	080039fd 	.word	0x080039fd
 80039f0:	08003a13 	.word	0x08003a13
 80039f4:	08003a29 	.word	0x08003a29
 80039f8:	08003a3f 	.word	0x08003a3f
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80039fc:	4b21      	ldr	r3, [pc, #132]	; (8003a84 <CS43_Enable_RightLeft+0xb0>)
 80039fe:	22c0      	movs	r2, #192	; 0xc0
 8003a00:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8003a02:	4b20      	ldr	r3, [pc, #128]	; (8003a84 <CS43_Enable_RightLeft+0xb0>)
 8003a04:	785b      	ldrb	r3, [r3, #1]
 8003a06:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <CS43_Enable_RightLeft+0xb0>)
 8003a0e:	705a      	strb	r2, [r3, #1]
			break;
 8003a10:	e021      	b.n	8003a56 <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8003a12:	4b1c      	ldr	r3, [pc, #112]	; (8003a84 <CS43_Enable_RightLeft+0xb0>)
 8003a14:	2280      	movs	r2, #128	; 0x80
 8003a16:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8003a18:	4b1a      	ldr	r3, [pc, #104]	; (8003a84 <CS43_Enable_RightLeft+0xb0>)
 8003a1a:	785b      	ldrb	r3, [r3, #1]
 8003a1c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	4b18      	ldr	r3, [pc, #96]	; (8003a84 <CS43_Enable_RightLeft+0xb0>)
 8003a24:	705a      	strb	r2, [r3, #1]
			break;
 8003a26:	e016      	b.n	8003a56 <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8003a28:	4b16      	ldr	r3, [pc, #88]	; (8003a84 <CS43_Enable_RightLeft+0xb0>)
 8003a2a:	22c0      	movs	r2, #192	; 0xc0
 8003a2c:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8003a2e:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <CS43_Enable_RightLeft+0xb0>)
 8003a30:	785b      	ldrb	r3, [r3, #1]
 8003a32:	f043 0320 	orr.w	r3, r3, #32
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <CS43_Enable_RightLeft+0xb0>)
 8003a3a:	705a      	strb	r2, [r3, #1]
			break;
 8003a3c:	e00b      	b.n	8003a56 <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8003a3e:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <CS43_Enable_RightLeft+0xb0>)
 8003a40:	2280      	movs	r2, #128	; 0x80
 8003a42:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8003a44:	4b0f      	ldr	r3, [pc, #60]	; (8003a84 <CS43_Enable_RightLeft+0xb0>)
 8003a46:	785b      	ldrb	r3, [r3, #1]
 8003a48:	f043 0320 	orr.w	r3, r3, #32
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <CS43_Enable_RightLeft+0xb0>)
 8003a50:	705a      	strb	r2, [r3, #1]
			break;
 8003a52:	e000      	b.n	8003a56 <CS43_Enable_RightLeft+0x82>
		default:
			break;
 8003a54:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8003a56:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <CS43_Enable_RightLeft+0xb0>)
 8003a58:	785b      	ldrb	r3, [r3, #1]
 8003a5a:	f043 030c 	orr.w	r3, r3, #12
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <CS43_Enable_RightLeft+0xb0>)
 8003a62:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8003a64:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <CS43_Enable_RightLeft+0xb0>)
 8003a66:	785b      	ldrb	r3, [r3, #1]
 8003a68:	f043 0303 	orr.w	r3, r3, #3
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <CS43_Enable_RightLeft+0xb0>)
 8003a70:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8003a72:	4905      	ldr	r1, [pc, #20]	; (8003a88 <CS43_Enable_RightLeft+0xb4>)
 8003a74:	2004      	movs	r0, #4
 8003a76:	f7ff fe59 	bl	800372c <write_register>
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	200000ac 	.word	0x200000ac
 8003a88:	200000ad 	.word	0x200000ad

08003a8c <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 8003a96:	79fb      	ldrb	r3, [r7, #7]
 8003a98:	3b32      	subs	r3, #50	; 0x32
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 8003aaa:	4a16      	ldr	r2, [pc, #88]	; (8003b04 <CS43_SetVolume+0x78>)
 8003aac:	7bbb      	ldrb	r3, [r7, #14]
 8003aae:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8003ab0:	4915      	ldr	r1, [pc, #84]	; (8003b08 <CS43_SetVolume+0x7c>)
 8003ab2:	2014      	movs	r0, #20
 8003ab4:	f7ff fe3a 	bl	800372c <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8003ab8:	4913      	ldr	r1, [pc, #76]	; (8003b08 <CS43_SetVolume+0x7c>)
 8003aba:	2015      	movs	r0, #21
 8003abc:	f7ff fe36 	bl	800372c <write_register>
	
	iData[1] = VOLUME_CONVERT_D(volume);
 8003ac0:	79fb      	ldrb	r3, [r7, #7]
 8003ac2:	2b64      	cmp	r3, #100	; 0x64
 8003ac4:	d80e      	bhi.n	8003ae4 <CS43_SetVolume+0x58>
 8003ac6:	79fa      	ldrb	r2, [r7, #7]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	4413      	add	r3, r2
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	4a0e      	ldr	r2, [pc, #56]	; (8003b0c <CS43_SetVolume+0x80>)
 8003ad2:	fb82 1203 	smull	r1, r2, r2, r3
 8003ad6:	1152      	asrs	r2, r2, #5
 8003ad8:	17db      	asrs	r3, r3, #31
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	3b18      	subs	r3, #24
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	e000      	b.n	8003ae6 <CS43_SetVolume+0x5a>
 8003ae4:	2318      	movs	r3, #24
 8003ae6:	4a07      	ldr	r2, [pc, #28]	; (8003b04 <CS43_SetVolume+0x78>)
 8003ae8:	7053      	strb	r3, [r2, #1]
	
	/* Set the Master volume */ 
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 8003aea:	4907      	ldr	r1, [pc, #28]	; (8003b08 <CS43_SetVolume+0x7c>)
 8003aec:	2020      	movs	r0, #32
 8003aee:	f7ff fe1d 	bl	800372c <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 8003af2:	4905      	ldr	r1, [pc, #20]	; (8003b08 <CS43_SetVolume+0x7c>)
 8003af4:	2021      	movs	r0, #33	; 0x21
 8003af6:	f7ff fe19 	bl	800372c <write_register>
}
 8003afa:	bf00      	nop
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	200000ac 	.word	0x200000ac
 8003b08:	200000ad 	.word	0x200000ad
 8003b0c:	51eb851f 	.word	0x51eb851f

08003b10 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 8003b14:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <CS43_Start+0x7c>)
 8003b16:	2299      	movs	r2, #153	; 0x99
 8003b18:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8003b1a:	491d      	ldr	r1, [pc, #116]	; (8003b90 <CS43_Start+0x80>)
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	f7ff fe05 	bl	800372c <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 8003b22:	4b1a      	ldr	r3, [pc, #104]	; (8003b8c <CS43_Start+0x7c>)
 8003b24:	2280      	movs	r2, #128	; 0x80
 8003b26:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 8003b28:	4919      	ldr	r1, [pc, #100]	; (8003b90 <CS43_Start+0x80>)
 8003b2a:	2047      	movs	r0, #71	; 0x47
 8003b2c:	f7ff fdfe 	bl	800372c <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8003b30:	4917      	ldr	r1, [pc, #92]	; (8003b90 <CS43_Start+0x80>)
 8003b32:	2032      	movs	r0, #50	; 0x32
 8003b34:	f7ff fe18 	bl	8003768 <read_register>
	iData[1] |= 0x80;
 8003b38:	4b14      	ldr	r3, [pc, #80]	; (8003b8c <CS43_Start+0x7c>)
 8003b3a:	785b      	ldrb	r3, [r3, #1]
 8003b3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	4b12      	ldr	r3, [pc, #72]	; (8003b8c <CS43_Start+0x7c>)
 8003b44:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 8003b46:	4912      	ldr	r1, [pc, #72]	; (8003b90 <CS43_Start+0x80>)
 8003b48:	2032      	movs	r0, #50	; 0x32
 8003b4a:	f7ff fdef 	bl	800372c <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8003b4e:	4910      	ldr	r1, [pc, #64]	; (8003b90 <CS43_Start+0x80>)
 8003b50:	2032      	movs	r0, #50	; 0x32
 8003b52:	f7ff fe09 	bl	8003768 <read_register>
	iData[1] &= ~(0x80);
 8003b56:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <CS43_Start+0x7c>)
 8003b58:	785b      	ldrb	r3, [r3, #1]
 8003b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <CS43_Start+0x7c>)
 8003b62:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 8003b64:	490a      	ldr	r1, [pc, #40]	; (8003b90 <CS43_Start+0x80>)
 8003b66:	2032      	movs	r0, #50	; 0x32
 8003b68:	f7ff fde0 	bl	800372c <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8003b6c:	4b07      	ldr	r3, [pc, #28]	; (8003b8c <CS43_Start+0x7c>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8003b72:	4907      	ldr	r1, [pc, #28]	; (8003b90 <CS43_Start+0x80>)
 8003b74:	2000      	movs	r0, #0
 8003b76:	f7ff fdd9 	bl	800372c <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 8003b7a:	4b04      	ldr	r3, [pc, #16]	; (8003b8c <CS43_Start+0x7c>)
 8003b7c:	229e      	movs	r2, #158	; 0x9e
 8003b7e:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8003b80:	4903      	ldr	r1, [pc, #12]	; (8003b90 <CS43_Start+0x80>)
 8003b82:	2002      	movs	r0, #2
 8003b84:	f7ff fdd2 	bl	800372c <write_register>
}
 8003b88:	bf00      	nop
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	200000ac 	.word	0x200000ac
 8003b90:	200000ad 	.word	0x200000ad

08003b94 <CS43_Stop>:

void CS43_Stop(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
	iData[1] = 0x01;
 8003b98:	4b04      	ldr	r3, [pc, #16]	; (8003bac <CS43_Stop+0x18>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8003b9e:	4904      	ldr	r1, [pc, #16]	; (8003bb0 <CS43_Stop+0x1c>)
 8003ba0:	2002      	movs	r0, #2
 8003ba2:	f7ff fdc3 	bl	800372c <write_register>
}
 8003ba6:	bf00      	nop
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	200000ac 	.word	0x200000ac
 8003bb0:	200000ad 	.word	0x200000ad

08003bb4 <RetrieveMP3Data>:
//		if (last_sample > sample_N) last_sample = 0;
//	}
//}

unsigned int RetrieveMP3Data(void * pMP3CompressedData,unsigned int nMP3DataSizeInChars,void * token)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]

	f_read((FIL*)token, pMP3CompressedData, nMP3DataSizeInChars, &count);
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <RetrieveMP3Data+0x24>)
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	68f9      	ldr	r1, [r7, #12]
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f00b faa4 	bl	800f114 <f_read>
	return count;
 8003bcc:	4b02      	ldr	r3, [pc, #8]	; (8003bd8 <RetrieveMP3Data+0x24>)
 8003bce:	681b      	ldr	r3, [r3, #0]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	20001a40 	.word	0x20001a40

08003bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003bdc:	b590      	push	{r4, r7, lr}
 8003bde:	b093      	sub	sp, #76	; 0x4c
 8003be0:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003be2:	f000 fc87 	bl	80044f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003be6:	f000 f8d9 	bl	8003d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003bea:	f000 f9e7 	bl	8003fbc <MX_GPIO_Init>
  MX_DMA_Init();
 8003bee:	f000 f9c5 	bl	8003f7c <MX_DMA_Init>
  MX_I2C1_Init();
 8003bf2:	f000 f967 	bl	8003ec4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8003bf6:	f000 f993 	bl	8003f20 <MX_I2S3_Init>
  MX_FATFS_Init();
 8003bfa:	f006 fb35 	bl	800a268 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8003bfe:	f00b fe67 	bl	800f8d0 <MX_USB_HOST_Init>
  MX_CRC_Init();
 8003c02:	f000 f94b 	bl	8003e9c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  CS43_Init(hi2c1, MODE_I2S);
 8003c06:	4c53      	ldr	r4, [pc, #332]	; (8003d54 <main+0x178>)
 8003c08:	2300      	movs	r3, #0
 8003c0a:	9311      	str	r3, [sp, #68]	; 0x44
 8003c0c:	4668      	mov	r0, sp
 8003c0e:	f104 0310 	add.w	r3, r4, #16
 8003c12:	2244      	movs	r2, #68	; 0x44
 8003c14:	4619      	mov	r1, r3
 8003c16:	f00c f9c9 	bl	800ffac <memcpy>
 8003c1a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003c1e:	f7ff fdc5 	bl	80037ac <CS43_Init>
  CS43_SetVolume(20);
 8003c22:	2014      	movs	r0, #20
 8003c24:	f7ff ff32 	bl	8003a8c <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8003c28:	2003      	movs	r0, #3
 8003c2a:	f7ff fed3 	bl	80039d4 <CS43_Enable_RightLeft>
  CS43_Start();
 8003c2e:	f7ff ff6f 	bl	8003b10 <CS43_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8003c32:	f00b fe73 	bl	800f91c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (Appli_state == APPLICATION_READY) {
 8003c36:	4b48      	ldr	r3, [pc, #288]	; (8003d58 <main+0x17c>)
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d176      	bne.n	8003d2c <main+0x150>
    	if (!playing) {
 8003c3e:	4b47      	ldr	r3, [pc, #284]	; (8003d5c <main+0x180>)
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d155      	bne.n	8003cf2 <main+0x116>
			if (f_mount(&USBHFatFS, USBHPath, 1) == FR_OK) {
 8003c46:	2201      	movs	r2, #1
 8003c48:	4945      	ldr	r1, [pc, #276]	; (8003d60 <main+0x184>)
 8003c4a:	4846      	ldr	r0, [pc, #280]	; (8003d64 <main+0x188>)
 8003c4c:	f00b f850 	bl	800ecf0 <f_mount>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1ed      	bne.n	8003c32 <main+0x56>
				if (f_open(&USBHFile, "my.mp3", FA_OPEN_EXISTING | FA_READ) == FR_OK) {
 8003c56:	2201      	movs	r2, #1
 8003c58:	4943      	ldr	r1, [pc, #268]	; (8003d68 <main+0x18c>)
 8003c5a:	4844      	ldr	r0, [pc, #272]	; (8003d6c <main+0x190>)
 8003c5c:	f00b f88e 	bl	800ed7c <f_open>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1e5      	bne.n	8003c32 <main+0x56>
					// Enable CRC and reset
				    RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
 8003c66:	4b42      	ldr	r3, [pc, #264]	; (8003d70 <main+0x194>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	4a41      	ldr	r2, [pc, #260]	; (8003d70 <main+0x194>)
 8003c6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c70:	6313      	str	r3, [r2, #48]	; 0x30
				    CRC->CR = CRC_CR_RESET;
 8003c72:	4b40      	ldr	r3, [pc, #256]	; (8003d74 <main+0x198>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	609a      	str	r2, [r3, #8]

				    // Read Sampling rate
					SpiritMP3DecoderInit(&g_MP3Decoder,       // MP3 decoder object
 8003c78:	4b3c      	ldr	r3, [pc, #240]	; (8003d6c <main+0x190>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	493e      	ldr	r1, [pc, #248]	; (8003d78 <main+0x19c>)
 8003c7e:	483f      	ldr	r0, [pc, #252]	; (8003d7c <main+0x1a0>)
 8003c80:	f7fd f91b 	bl	8000eba <SpiritMP3DecoderInit>
										RetrieveMP3Data,     // Input callback function
										NULL,         // No post-process callback
										&USBHFile             // Callback parameter
					);

					SpiritMP3Decode(&g_MP3Decoder,(int16_t *)buffer,COUNT/sizeof(uint32_t),&Mp3Info);
 8003c84:	4b3e      	ldr	r3, [pc, #248]	; (8003d80 <main+0x1a4>)
 8003c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c8a:	493e      	ldr	r1, [pc, #248]	; (8003d84 <main+0x1a8>)
 8003c8c:	483b      	ldr	r0, [pc, #236]	; (8003d7c <main+0x1a0>)
 8003c8e:	f7fd f939 	bl	8000f04 <SpiritMP3Decode>
					SpiritMP3Decode(&g_MP3Decoder,(int16_t *)&buffer[COUNT/2],COUNT/sizeof(uint32_t),&Mp3Info);
 8003c92:	4b3b      	ldr	r3, [pc, #236]	; (8003d80 <main+0x1a4>)
 8003c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c98:	493b      	ldr	r1, [pc, #236]	; (8003d88 <main+0x1ac>)
 8003c9a:	4838      	ldr	r0, [pc, #224]	; (8003d7c <main+0x1a0>)
 8003c9c:	f7fd f932 	bl	8000f04 <SpiritMP3Decode>

					f_lseek(&USBHFile, 0);
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	4832      	ldr	r0, [pc, #200]	; (8003d6c <main+0x190>)
 8003ca4:	f00b fb95 	bl	800f3d2 <f_lseek>

					hi2s3.Init.AudioFreq = Mp3Info.nSampleRateHz;
 8003ca8:	4b35      	ldr	r3, [pc, #212]	; (8003d80 <main+0x1a4>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	4a37      	ldr	r2, [pc, #220]	; (8003d8c <main+0x1b0>)
 8003cae:	6153      	str	r3, [r2, #20]
					HAL_I2S_Init(&hi2s3);
 8003cb0:	4836      	ldr	r0, [pc, #216]	; (8003d8c <main+0x1b0>)
 8003cb2:	f003 fffb 	bl	8007cac <HAL_I2S_Init>

					SpiritMP3DecoderInit(&g_MP3Decoder,       // MP3 decoder object
 8003cb6:	4b2d      	ldr	r3, [pc, #180]	; (8003d6c <main+0x190>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	492f      	ldr	r1, [pc, #188]	; (8003d78 <main+0x19c>)
 8003cbc:	482f      	ldr	r0, [pc, #188]	; (8003d7c <main+0x1a0>)
 8003cbe:	f7fd f8fc 	bl	8000eba <SpiritMP3DecoderInit>
										RetrieveMP3Data,     // Input callback function
										NULL,         // No post-process callback
										&USBHFile             // Callback parameter
					);

					SpiritMP3Decode(&g_MP3Decoder,(int16_t *)buffer,COUNT/sizeof(uint32_t),NULL);
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc8:	492e      	ldr	r1, [pc, #184]	; (8003d84 <main+0x1a8>)
 8003cca:	482c      	ldr	r0, [pc, #176]	; (8003d7c <main+0x1a0>)
 8003ccc:	f7fd f91a 	bl	8000f04 <SpiritMP3Decode>
					SpiritMP3Decode(&g_MP3Decoder,(int16_t *)&buffer[COUNT/2],COUNT/sizeof(uint32_t),NULL);
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cd6:	492c      	ldr	r1, [pc, #176]	; (8003d88 <main+0x1ac>)
 8003cd8:	4828      	ldr	r0, [pc, #160]	; (8003d7c <main+0x1a0>)
 8003cda:	f7fd f913 	bl	8000f04 <SpiritMP3Decode>
//					f_read(&USBHFile, (uint8_t*)buffer, 44, &count);
//					f_read(&USBHFile, (uint8_t*)buffer, COUNT,&count);
//					f_read(&USBHFile, (uint8_t*)&buffer[COUNT/2], COUNT,&count);

					//create_period(buffer, _MAX_SS);
					playing = 1;
 8003cde:	4b1f      	ldr	r3, [pc, #124]	; (8003d5c <main+0x180>)
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	701a      	strb	r2, [r3, #0]
					HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)buffer, COUNT);
 8003ce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ce8:	4926      	ldr	r1, [pc, #152]	; (8003d84 <main+0x1a8>)
 8003cea:	4828      	ldr	r0, [pc, #160]	; (8003d8c <main+0x1b0>)
 8003cec:	f004 f91e 	bl	8007f2c <HAL_I2S_Transmit_DMA>
 8003cf0:	e79f      	b.n	8003c32 <main+0x56>
				}
			}
    	} else {
    		if (rd_part1) {
 8003cf2:	4b27      	ldr	r3, [pc, #156]	; (8003d90 <main+0x1b4>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d009      	beq.n	8003d0e <main+0x132>
    			//f_read(&USBHFile, (uint8_t*)buffer, COUNT,&count);
    			SpiritMP3Decode(&g_MP3Decoder,(int16_t *)buffer,COUNT/sizeof(uint32_t),NULL);
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d00:	4920      	ldr	r1, [pc, #128]	; (8003d84 <main+0x1a8>)
 8003d02:	481e      	ldr	r0, [pc, #120]	; (8003d7c <main+0x1a0>)
 8003d04:	f7fd f8fe 	bl	8000f04 <SpiritMP3Decode>
    			rd_part1 = 0;
 8003d08:	4b21      	ldr	r3, [pc, #132]	; (8003d90 <main+0x1b4>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	701a      	strb	r2, [r3, #0]
    		}
    		if (rd_part2) {
 8003d0e:	4b21      	ldr	r3, [pc, #132]	; (8003d94 <main+0x1b8>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d08d      	beq.n	8003c32 <main+0x56>
    			//f_read(&USBHFile, (uint8_t*)&buffer[COUNT/2], COUNT,&count);
    			SpiritMP3Decode(&g_MP3Decoder,(int16_t *)&buffer[COUNT/2],COUNT/sizeof(uint32_t),NULL);
 8003d16:	2300      	movs	r3, #0
 8003d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d1c:	491a      	ldr	r1, [pc, #104]	; (8003d88 <main+0x1ac>)
 8003d1e:	4817      	ldr	r0, [pc, #92]	; (8003d7c <main+0x1a0>)
 8003d20:	f7fd f8f0 	bl	8000f04 <SpiritMP3Decode>
    			rd_part2 = 0;
 8003d24:	4b1b      	ldr	r3, [pc, #108]	; (8003d94 <main+0x1b8>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	701a      	strb	r2, [r3, #0]
 8003d2a:	e782      	b.n	8003c32 <main+0x56>
    		}
    	}
    } else if (Appli_state == APPLICATION_DISCONNECT) {
 8003d2c:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <main+0x17c>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	f47f af7e 	bne.w	8003c32 <main+0x56>
    	playing = 0;
 8003d36:	4b09      	ldr	r3, [pc, #36]	; (8003d5c <main+0x180>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	701a      	strb	r2, [r3, #0]
    	CS43_Stop();
 8003d3c:	f7ff ff2a 	bl	8003b94 <CS43_Stop>
    	f_mount(0, "", 0);
 8003d40:	2200      	movs	r2, #0
 8003d42:	4915      	ldr	r1, [pc, #84]	; (8003d98 <main+0x1bc>)
 8003d44:	2000      	movs	r0, #0
 8003d46:	f00a ffd3 	bl	800ecf0 <f_mount>
    	Appli_state = APPLICATION_IDLE;
 8003d4a:	4b03      	ldr	r3, [pc, #12]	; (8003d58 <main+0x17c>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	701a      	strb	r2, [r3, #0]
    MX_USB_HOST_Process();
 8003d50:	e76f      	b.n	8003c32 <main+0x56>
 8003d52:	bf00      	nop
 8003d54:	20000150 	.word	0x20000150
 8003d58:	20000140 	.word	0x20000140
 8003d5c:	20000106 	.word	0x20000106
 8003d60:	2000014c 	.word	0x2000014c
 8003d64:	20004a80 	.word	0x20004a80
 8003d68:	0801017c 	.word	0x0801017c
 8003d6c:	2000120c 	.word	0x2000120c
 8003d70:	40023800 	.word	0x40023800
 8003d74:	40023000 	.word	0x40023000
 8003d78:	08003bb5 	.word	0x08003bb5
 8003d7c:	20001a48 	.word	0x20001a48
 8003d80:	200052b4 	.word	0x200052b4
 8003d84:	2000020c 	.word	0x2000020c
 8003d88:	20000a0c 	.word	0x20000a0c
 8003d8c:	200052dc 	.word	0x200052dc
 8003d90:	20000104 	.word	0x20000104
 8003d94:	20000105 	.word	0x20000105
 8003d98:	08010184 	.word	0x08010184

08003d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b098      	sub	sp, #96	; 0x60
 8003da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003da2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003da6:	2230      	movs	r2, #48	; 0x30
 8003da8:	2100      	movs	r1, #0
 8003daa:	4618      	mov	r0, r3
 8003dac:	f00c f90c 	bl	800ffc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003db0:	f107 031c 	add.w	r3, r7, #28
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	605a      	str	r2, [r3, #4]
 8003dba:	609a      	str	r2, [r3, #8]
 8003dbc:	60da      	str	r2, [r3, #12]
 8003dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003dc0:	f107 030c 	add.w	r3, r7, #12
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	605a      	str	r2, [r3, #4]
 8003dca:	609a      	str	r2, [r3, #8]
 8003dcc:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60bb      	str	r3, [r7, #8]
 8003dd2:	4b30      	ldr	r3, [pc, #192]	; (8003e94 <SystemClock_Config+0xf8>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	4a2f      	ldr	r2, [pc, #188]	; (8003e94 <SystemClock_Config+0xf8>)
 8003dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dde:	4b2d      	ldr	r3, [pc, #180]	; (8003e94 <SystemClock_Config+0xf8>)
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de6:	60bb      	str	r3, [r7, #8]
 8003de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dea:	2300      	movs	r3, #0
 8003dec:	607b      	str	r3, [r7, #4]
 8003dee:	4b2a      	ldr	r3, [pc, #168]	; (8003e98 <SystemClock_Config+0xfc>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a29      	ldr	r2, [pc, #164]	; (8003e98 <SystemClock_Config+0xfc>)
 8003df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	4b27      	ldr	r3, [pc, #156]	; (8003e98 <SystemClock_Config+0xfc>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e02:	607b      	str	r3, [r7, #4]
 8003e04:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003e06:	2301      	movs	r3, #1
 8003e08:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e10:	2302      	movs	r3, #2
 8003e12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e18:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003e1a:	2304      	movs	r3, #4
 8003e1c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003e1e:	2348      	movs	r3, #72	; 0x48
 8003e20:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e22:	2302      	movs	r3, #2
 8003e24:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003e26:	2303      	movs	r3, #3
 8003e28:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f004 fcd6 	bl	80087e0 <HAL_RCC_OscConfig>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003e3a:	f000 f975 	bl	8004128 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e3e:	230f      	movs	r3, #15
 8003e40:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e42:	2302      	movs	r3, #2
 8003e44:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e46:	2300      	movs	r3, #0
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003e4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e50:	2300      	movs	r3, #0
 8003e52:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003e54:	f107 031c 	add.w	r3, r7, #28
 8003e58:	2102      	movs	r1, #2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f004 ff38 	bl	8008cd0 <HAL_RCC_ClockConfig>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8003e66:	f000 f95f 	bl	8004128 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8003e6e:	23c0      	movs	r3, #192	; 0xc0
 8003e70:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003e72:	2302      	movs	r3, #2
 8003e74:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e76:	f107 030c 	add.w	r3, r7, #12
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f005 f90e 	bl	800909c <HAL_RCCEx_PeriphCLKConfig>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8003e86:	f000 f94f 	bl	8004128 <Error_Handler>
  }
}
 8003e8a:	bf00      	nop
 8003e8c:	3760      	adds	r7, #96	; 0x60
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40023800 	.word	0x40023800
 8003e98:	40007000 	.word	0x40007000

08003e9c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003ea0:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <MX_CRC_Init+0x20>)
 8003ea2:	4a07      	ldr	r2, [pc, #28]	; (8003ec0 <MX_CRC_Init+0x24>)
 8003ea4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003ea6:	4805      	ldr	r0, [pc, #20]	; (8003ebc <MX_CRC_Init+0x20>)
 8003ea8:	f000 fcc3 	bl	8004832 <HAL_CRC_Init>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8003eb2:	f000 f939 	bl	8004128 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003eb6:	bf00      	nop
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	200001a4 	.word	0x200001a4
 8003ec0:	40023000 	.word	0x40023000

08003ec4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003ec8:	4b12      	ldr	r3, [pc, #72]	; (8003f14 <MX_I2C1_Init+0x50>)
 8003eca:	4a13      	ldr	r2, [pc, #76]	; (8003f18 <MX_I2C1_Init+0x54>)
 8003ecc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003ece:	4b11      	ldr	r3, [pc, #68]	; (8003f14 <MX_I2C1_Init+0x50>)
 8003ed0:	4a12      	ldr	r2, [pc, #72]	; (8003f1c <MX_I2C1_Init+0x58>)
 8003ed2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ed4:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <MX_I2C1_Init+0x50>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003eda:	4b0e      	ldr	r3, [pc, #56]	; (8003f14 <MX_I2C1_Init+0x50>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ee0:	4b0c      	ldr	r3, [pc, #48]	; (8003f14 <MX_I2C1_Init+0x50>)
 8003ee2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ee6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ee8:	4b0a      	ldr	r3, [pc, #40]	; (8003f14 <MX_I2C1_Init+0x50>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003eee:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <MX_I2C1_Init+0x50>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ef4:	4b07      	ldr	r3, [pc, #28]	; (8003f14 <MX_I2C1_Init+0x50>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003efa:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <MX_I2C1_Init+0x50>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003f00:	4804      	ldr	r0, [pc, #16]	; (8003f14 <MX_I2C1_Init+0x50>)
 8003f02:	f002 ff3f 	bl	8006d84 <HAL_I2C_Init>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003f0c:	f000 f90c 	bl	8004128 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003f10:	bf00      	nop
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20000150 	.word	0x20000150
 8003f18:	40005400 	.word	0x40005400
 8003f1c:	000186a0 	.word	0x000186a0

08003f20 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8003f24:	4b13      	ldr	r3, [pc, #76]	; (8003f74 <MX_I2S3_Init+0x54>)
 8003f26:	4a14      	ldr	r2, [pc, #80]	; (8003f78 <MX_I2S3_Init+0x58>)
 8003f28:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8003f2a:	4b12      	ldr	r3, [pc, #72]	; (8003f74 <MX_I2S3_Init+0x54>)
 8003f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f30:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8003f32:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <MX_I2S3_Init+0x54>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8003f38:	4b0e      	ldr	r3, [pc, #56]	; (8003f74 <MX_I2S3_Init+0x54>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8003f3e:	4b0d      	ldr	r3, [pc, #52]	; (8003f74 <MX_I2S3_Init+0x54>)
 8003f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f44:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_22K;
 8003f46:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <MX_I2S3_Init+0x54>)
 8003f48:	f245 6222 	movw	r2, #22050	; 0x5622
 8003f4c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8003f4e:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <MX_I2S3_Init+0x54>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8003f54:	4b07      	ldr	r3, [pc, #28]	; (8003f74 <MX_I2S3_Init+0x54>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8003f5a:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <MX_I2S3_Init+0x54>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8003f60:	4804      	ldr	r0, [pc, #16]	; (8003f74 <MX_I2S3_Init+0x54>)
 8003f62:	f003 fea3 	bl	8007cac <HAL_I2S_Init>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8003f6c:	f000 f8dc 	bl	8004128 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8003f70:	bf00      	nop
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	200052dc 	.word	0x200052dc
 8003f78:	40003c00 	.word	0x40003c00

08003f7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003f82:	2300      	movs	r3, #0
 8003f84:	607b      	str	r3, [r7, #4]
 8003f86:	4b0c      	ldr	r3, [pc, #48]	; (8003fb8 <MX_DMA_Init+0x3c>)
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8a:	4a0b      	ldr	r2, [pc, #44]	; (8003fb8 <MX_DMA_Init+0x3c>)
 8003f8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f90:	6313      	str	r3, [r2, #48]	; 0x30
 8003f92:	4b09      	ldr	r3, [pc, #36]	; (8003fb8 <MX_DMA_Init+0x3c>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f9a:	607b      	str	r3, [r7, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	2010      	movs	r0, #16
 8003fa4:	f000 fc0f 	bl	80047c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003fa8:	2010      	movs	r0, #16
 8003faa:	f000 fc28 	bl	80047fe <HAL_NVIC_EnableIRQ>

}
 8003fae:	bf00      	nop
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40023800 	.word	0x40023800

08003fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08a      	sub	sp, #40	; 0x28
 8003fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc2:	f107 0314 	add.w	r3, r7, #20
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	605a      	str	r2, [r3, #4]
 8003fcc:	609a      	str	r2, [r3, #8]
 8003fce:	60da      	str	r2, [r3, #12]
 8003fd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	613b      	str	r3, [r7, #16]
 8003fd6:	4b37      	ldr	r3, [pc, #220]	; (80040b4 <MX_GPIO_Init+0xf8>)
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	4a36      	ldr	r2, [pc, #216]	; (80040b4 <MX_GPIO_Init+0xf8>)
 8003fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fe2:	4b34      	ldr	r3, [pc, #208]	; (80040b4 <MX_GPIO_Init+0xf8>)
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fea:	613b      	str	r3, [r7, #16]
 8003fec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	4b30      	ldr	r3, [pc, #192]	; (80040b4 <MX_GPIO_Init+0xf8>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	4a2f      	ldr	r2, [pc, #188]	; (80040b4 <MX_GPIO_Init+0xf8>)
 8003ff8:	f043 0304 	orr.w	r3, r3, #4
 8003ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ffe:	4b2d      	ldr	r3, [pc, #180]	; (80040b4 <MX_GPIO_Init+0xf8>)
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	f003 0304 	and.w	r3, r3, #4
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800400a:	2300      	movs	r3, #0
 800400c:	60bb      	str	r3, [r7, #8]
 800400e:	4b29      	ldr	r3, [pc, #164]	; (80040b4 <MX_GPIO_Init+0xf8>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	4a28      	ldr	r2, [pc, #160]	; (80040b4 <MX_GPIO_Init+0xf8>)
 8004014:	f043 0301 	orr.w	r3, r3, #1
 8004018:	6313      	str	r3, [r2, #48]	; 0x30
 800401a:	4b26      	ldr	r3, [pc, #152]	; (80040b4 <MX_GPIO_Init+0xf8>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	60bb      	str	r3, [r7, #8]
 8004024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004026:	2300      	movs	r3, #0
 8004028:	607b      	str	r3, [r7, #4]
 800402a:	4b22      	ldr	r3, [pc, #136]	; (80040b4 <MX_GPIO_Init+0xf8>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	4a21      	ldr	r2, [pc, #132]	; (80040b4 <MX_GPIO_Init+0xf8>)
 8004030:	f043 0308 	orr.w	r3, r3, #8
 8004034:	6313      	str	r3, [r2, #48]	; 0x30
 8004036:	4b1f      	ldr	r3, [pc, #124]	; (80040b4 <MX_GPIO_Init+0xf8>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	607b      	str	r3, [r7, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004042:	2300      	movs	r3, #0
 8004044:	603b      	str	r3, [r7, #0]
 8004046:	4b1b      	ldr	r3, [pc, #108]	; (80040b4 <MX_GPIO_Init+0xf8>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	4a1a      	ldr	r2, [pc, #104]	; (80040b4 <MX_GPIO_Init+0xf8>)
 800404c:	f043 0302 	orr.w	r3, r3, #2
 8004050:	6313      	str	r3, [r2, #48]	; 0x30
 8004052:	4b18      	ldr	r3, [pc, #96]	; (80040b4 <MX_GPIO_Init+0xf8>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800405e:	2200      	movs	r2, #0
 8004060:	2101      	movs	r1, #1
 8004062:	4815      	ldr	r0, [pc, #84]	; (80040b8 <MX_GPIO_Init+0xfc>)
 8004064:	f001 f908 	bl	8005278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8004068:	2200      	movs	r2, #0
 800406a:	2110      	movs	r1, #16
 800406c:	4813      	ldr	r0, [pc, #76]	; (80040bc <MX_GPIO_Init+0x100>)
 800406e:	f001 f903 	bl	8005278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004072:	2301      	movs	r3, #1
 8004074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004076:	2301      	movs	r3, #1
 8004078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800407e:	2300      	movs	r3, #0
 8004080:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004082:	f107 0314 	add.w	r3, r7, #20
 8004086:	4619      	mov	r1, r3
 8004088:	480b      	ldr	r0, [pc, #44]	; (80040b8 <MX_GPIO_Init+0xfc>)
 800408a:	f000 ff5b 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800408e:	2310      	movs	r3, #16
 8004090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004092:	2301      	movs	r3, #1
 8004094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004096:	2300      	movs	r3, #0
 8004098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800409a:	2300      	movs	r3, #0
 800409c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800409e:	f107 0314 	add.w	r3, r7, #20
 80040a2:	4619      	mov	r1, r3
 80040a4:	4805      	ldr	r0, [pc, #20]	; (80040bc <MX_GPIO_Init+0x100>)
 80040a6:	f000 ff4d 	bl	8004f44 <HAL_GPIO_Init>

}
 80040aa:	bf00      	nop
 80040ac:	3728      	adds	r7, #40	; 0x28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40023800 	.word	0x40023800
 80040b8:	40020800 	.word	0x40020800
 80040bc:	40020c00 	.word	0x40020c00

080040c0 <HAL_I2S_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
	if (hi2s->Instance == hi2s3.Instance)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	4b08      	ldr	r3, [pc, #32]	; (80040f0 <HAL_I2S_TxCpltCallback+0x30>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d108      	bne.n	80040e6 <HAL_I2S_TxCpltCallback+0x26>
	{
		HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)buffer, COUNT);
 80040d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040d8:	4906      	ldr	r1, [pc, #24]	; (80040f4 <HAL_I2S_TxCpltCallback+0x34>)
 80040da:	4805      	ldr	r0, [pc, #20]	; (80040f0 <HAL_I2S_TxCpltCallback+0x30>)
 80040dc:	f003 ff26 	bl	8007f2c <HAL_I2S_Transmit_DMA>
		//create_period(&buffer[_MAX_SS/2], _MAX_SS/2);
		rd_part2=1;
 80040e0:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <HAL_I2S_TxCpltCallback+0x38>)
 80040e2:	2201      	movs	r2, #1
 80040e4:	701a      	strb	r2, [r3, #0]
	}
}
 80040e6:	bf00      	nop
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	200052dc 	.word	0x200052dc
 80040f4:	2000020c 	.word	0x2000020c
 80040f8:	20000105 	.word	0x20000105

080040fc <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
	if (hi2s->Instance == hi2s3.Instance)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	4b05      	ldr	r3, [pc, #20]	; (8004120 <HAL_I2S_TxHalfCpltCallback+0x24>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	429a      	cmp	r2, r3
 800410e:	d102      	bne.n	8004116 <HAL_I2S_TxHalfCpltCallback+0x1a>
	{
		//create_period(buffer, _MAX_SS/2);
		rd_part1=1;
 8004110:	4b04      	ldr	r3, [pc, #16]	; (8004124 <HAL_I2S_TxHalfCpltCallback+0x28>)
 8004112:	2201      	movs	r2, #1
 8004114:	701a      	strb	r2, [r3, #0]
	}
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr
 8004120:	200052dc 	.word	0x200052dc
 8004124:	20000104 	.word	0x20000104

08004128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800412c:	b672      	cpsid	i
}
 800412e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004130:	e7fe      	b.n	8004130 <Error_Handler+0x8>
	...

08004134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800413a:	2300      	movs	r3, #0
 800413c:	607b      	str	r3, [r7, #4]
 800413e:	4b0f      	ldr	r3, [pc, #60]	; (800417c <HAL_MspInit+0x48>)
 8004140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004142:	4a0e      	ldr	r2, [pc, #56]	; (800417c <HAL_MspInit+0x48>)
 8004144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004148:	6453      	str	r3, [r2, #68]	; 0x44
 800414a:	4b0c      	ldr	r3, [pc, #48]	; (800417c <HAL_MspInit+0x48>)
 800414c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004152:	607b      	str	r3, [r7, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004156:	2300      	movs	r3, #0
 8004158:	603b      	str	r3, [r7, #0]
 800415a:	4b08      	ldr	r3, [pc, #32]	; (800417c <HAL_MspInit+0x48>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	4a07      	ldr	r2, [pc, #28]	; (800417c <HAL_MspInit+0x48>)
 8004160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004164:	6413      	str	r3, [r2, #64]	; 0x40
 8004166:	4b05      	ldr	r3, [pc, #20]	; (800417c <HAL_MspInit+0x48>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr
 800417c:	40023800 	.word	0x40023800

08004180 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a0a      	ldr	r2, [pc, #40]	; (80041b8 <HAL_CRC_MspInit+0x38>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d10d      	bne.n	80041ae <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	4b09      	ldr	r3, [pc, #36]	; (80041bc <HAL_CRC_MspInit+0x3c>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	4a08      	ldr	r2, [pc, #32]	; (80041bc <HAL_CRC_MspInit+0x3c>)
 800419c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041a0:	6313      	str	r3, [r2, #48]	; 0x30
 80041a2:	4b06      	ldr	r3, [pc, #24]	; (80041bc <HAL_CRC_MspInit+0x3c>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80041ae:	bf00      	nop
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr
 80041b8:	40023000 	.word	0x40023000
 80041bc:	40023800 	.word	0x40023800

080041c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08a      	sub	sp, #40	; 0x28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041c8:	f107 0314 	add.w	r3, r7, #20
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	605a      	str	r2, [r3, #4]
 80041d2:	609a      	str	r2, [r3, #8]
 80041d4:	60da      	str	r2, [r3, #12]
 80041d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a19      	ldr	r2, [pc, #100]	; (8004244 <HAL_I2C_MspInit+0x84>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d12c      	bne.n	800423c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041e2:	2300      	movs	r3, #0
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	4b18      	ldr	r3, [pc, #96]	; (8004248 <HAL_I2C_MspInit+0x88>)
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	4a17      	ldr	r2, [pc, #92]	; (8004248 <HAL_I2C_MspInit+0x88>)
 80041ec:	f043 0302 	orr.w	r3, r3, #2
 80041f0:	6313      	str	r3, [r2, #48]	; 0x30
 80041f2:	4b15      	ldr	r3, [pc, #84]	; (8004248 <HAL_I2C_MspInit+0x88>)
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	613b      	str	r3, [r7, #16]
 80041fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80041fe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004204:	2312      	movs	r3, #18
 8004206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004208:	2301      	movs	r3, #1
 800420a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800420c:	2303      	movs	r3, #3
 800420e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004210:	2304      	movs	r3, #4
 8004212:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004214:	f107 0314 	add.w	r3, r7, #20
 8004218:	4619      	mov	r1, r3
 800421a:	480c      	ldr	r0, [pc, #48]	; (800424c <HAL_I2C_MspInit+0x8c>)
 800421c:	f000 fe92 	bl	8004f44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004220:	2300      	movs	r3, #0
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	4b08      	ldr	r3, [pc, #32]	; (8004248 <HAL_I2C_MspInit+0x88>)
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	4a07      	ldr	r2, [pc, #28]	; (8004248 <HAL_I2C_MspInit+0x88>)
 800422a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800422e:	6413      	str	r3, [r2, #64]	; 0x40
 8004230:	4b05      	ldr	r3, [pc, #20]	; (8004248 <HAL_I2C_MspInit+0x88>)
 8004232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800423c:	bf00      	nop
 800423e:	3728      	adds	r7, #40	; 0x28
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40005400 	.word	0x40005400
 8004248:	40023800 	.word	0x40023800
 800424c:	40020400 	.word	0x40020400

08004250 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b08a      	sub	sp, #40	; 0x28
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004258:	f107 0314 	add.w	r3, r7, #20
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	605a      	str	r2, [r3, #4]
 8004262:	609a      	str	r2, [r3, #8]
 8004264:	60da      	str	r2, [r3, #12]
 8004266:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a45      	ldr	r2, [pc, #276]	; (8004384 <HAL_I2S_MspInit+0x134>)
 800426e:	4293      	cmp	r3, r2
 8004270:	f040 8083 	bne.w	800437a <HAL_I2S_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004274:	2300      	movs	r3, #0
 8004276:	613b      	str	r3, [r7, #16]
 8004278:	4b43      	ldr	r3, [pc, #268]	; (8004388 <HAL_I2S_MspInit+0x138>)
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	4a42      	ldr	r2, [pc, #264]	; (8004388 <HAL_I2S_MspInit+0x138>)
 800427e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004282:	6413      	str	r3, [r2, #64]	; 0x40
 8004284:	4b40      	ldr	r3, [pc, #256]	; (8004388 <HAL_I2S_MspInit+0x138>)
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800428c:	613b      	str	r3, [r7, #16]
 800428e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	4b3c      	ldr	r3, [pc, #240]	; (8004388 <HAL_I2S_MspInit+0x138>)
 8004296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004298:	4a3b      	ldr	r2, [pc, #236]	; (8004388 <HAL_I2S_MspInit+0x138>)
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	6313      	str	r3, [r2, #48]	; 0x30
 80042a0:	4b39      	ldr	r3, [pc, #228]	; (8004388 <HAL_I2S_MspInit+0x138>)
 80042a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042ac:	2300      	movs	r3, #0
 80042ae:	60bb      	str	r3, [r7, #8]
 80042b0:	4b35      	ldr	r3, [pc, #212]	; (8004388 <HAL_I2S_MspInit+0x138>)
 80042b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b4:	4a34      	ldr	r2, [pc, #208]	; (8004388 <HAL_I2S_MspInit+0x138>)
 80042b6:	f043 0304 	orr.w	r3, r3, #4
 80042ba:	6313      	str	r3, [r2, #48]	; 0x30
 80042bc:	4b32      	ldr	r3, [pc, #200]	; (8004388 <HAL_I2S_MspInit+0x138>)
 80042be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80042c8:	2310      	movs	r3, #16
 80042ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042cc:	2302      	movs	r3, #2
 80042ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d0:	2300      	movs	r3, #0
 80042d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042d4:	2300      	movs	r3, #0
 80042d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80042d8:	2306      	movs	r3, #6
 80042da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042dc:	f107 0314 	add.w	r3, r7, #20
 80042e0:	4619      	mov	r1, r3
 80042e2:	482a      	ldr	r0, [pc, #168]	; (800438c <HAL_I2S_MspInit+0x13c>)
 80042e4:	f000 fe2e 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80042e8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80042ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ee:	2302      	movs	r3, #2
 80042f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f6:	2300      	movs	r3, #0
 80042f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80042fa:	2306      	movs	r3, #6
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042fe:	f107 0314 	add.w	r3, r7, #20
 8004302:	4619      	mov	r1, r3
 8004304:	4822      	ldr	r0, [pc, #136]	; (8004390 <HAL_I2S_MspInit+0x140>)
 8004306:	f000 fe1d 	bl	8004f44 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800430a:	4b22      	ldr	r3, [pc, #136]	; (8004394 <HAL_I2S_MspInit+0x144>)
 800430c:	4a22      	ldr	r2, [pc, #136]	; (8004398 <HAL_I2S_MspInit+0x148>)
 800430e:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8004310:	4b20      	ldr	r3, [pc, #128]	; (8004394 <HAL_I2S_MspInit+0x144>)
 8004312:	2200      	movs	r2, #0
 8004314:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004316:	4b1f      	ldr	r3, [pc, #124]	; (8004394 <HAL_I2S_MspInit+0x144>)
 8004318:	2240      	movs	r2, #64	; 0x40
 800431a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800431c:	4b1d      	ldr	r3, [pc, #116]	; (8004394 <HAL_I2S_MspInit+0x144>)
 800431e:	2200      	movs	r2, #0
 8004320:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004322:	4b1c      	ldr	r3, [pc, #112]	; (8004394 <HAL_I2S_MspInit+0x144>)
 8004324:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004328:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800432a:	4b1a      	ldr	r3, [pc, #104]	; (8004394 <HAL_I2S_MspInit+0x144>)
 800432c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004330:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004332:	4b18      	ldr	r3, [pc, #96]	; (8004394 <HAL_I2S_MspInit+0x144>)
 8004334:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004338:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800433a:	4b16      	ldr	r3, [pc, #88]	; (8004394 <HAL_I2S_MspInit+0x144>)
 800433c:	2200      	movs	r2, #0
 800433e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004340:	4b14      	ldr	r3, [pc, #80]	; (8004394 <HAL_I2S_MspInit+0x144>)
 8004342:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004346:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004348:	4b12      	ldr	r3, [pc, #72]	; (8004394 <HAL_I2S_MspInit+0x144>)
 800434a:	2200      	movs	r2, #0
 800434c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800434e:	4811      	ldr	r0, [pc, #68]	; (8004394 <HAL_I2S_MspInit+0x144>)
 8004350:	f000 fa8c 	bl	800486c <HAL_DMA_Init>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_I2S_MspInit+0x10e>
    {
      Error_Handler();
 800435a:	f7ff fee5 	bl	8004128 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a0c      	ldr	r2, [pc, #48]	; (8004394 <HAL_I2S_MspInit+0x144>)
 8004362:	639a      	str	r2, [r3, #56]	; 0x38
 8004364:	4a0b      	ldr	r2, [pc, #44]	; (8004394 <HAL_I2S_MspInit+0x144>)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800436a:	2200      	movs	r2, #0
 800436c:	2100      	movs	r1, #0
 800436e:	2033      	movs	r0, #51	; 0x33
 8004370:	f000 fa29 	bl	80047c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8004374:	2033      	movs	r0, #51	; 0x33
 8004376:	f000 fa42 	bl	80047fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800437a:	bf00      	nop
 800437c:	3728      	adds	r7, #40	; 0x28
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40003c00 	.word	0x40003c00
 8004388:	40023800 	.word	0x40023800
 800438c:	40020000 	.word	0x40020000
 8004390:	40020800 	.word	0x40020800
 8004394:	200001ac 	.word	0x200001ac
 8004398:	40026088 	.word	0x40026088

0800439c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80043a0:	e7fe      	b.n	80043a0 <NMI_Handler+0x4>

080043a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043a2:	b480      	push	{r7}
 80043a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043a6:	e7fe      	b.n	80043a6 <HardFault_Handler+0x4>

080043a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043ac:	e7fe      	b.n	80043ac <MemManage_Handler+0x4>

080043ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043ae:	b480      	push	{r7}
 80043b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043b2:	e7fe      	b.n	80043b2 <BusFault_Handler+0x4>

080043b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043b8:	e7fe      	b.n	80043b8 <UsageFault_Handler+0x4>

080043ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043ba:	b480      	push	{r7}
 80043bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043be:	bf00      	nop
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr

080043c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043c6:	b480      	push	{r7}
 80043c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043ca:	bf00      	nop
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr

080043d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043d2:	b480      	push	{r7}
 80043d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043d6:	bf00      	nop
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	4770      	bx	lr

080043de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043e2:	f000 f8d9 	bl	8004598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043e6:	bf00      	nop
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80043f0:	4802      	ldr	r0, [pc, #8]	; (80043fc <DMA1_Stream5_IRQHandler+0x10>)
 80043f2:	f000 fb41 	bl	8004a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80043f6:	bf00      	nop
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	200001ac 	.word	0x200001ac

08004400 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8004404:	4802      	ldr	r0, [pc, #8]	; (8004410 <SPI3_IRQHandler+0x10>)
 8004406:	f003 fe39 	bl	800807c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800440a:	bf00      	nop
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	200052dc 	.word	0x200052dc

08004414 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8004418:	4802      	ldr	r0, [pc, #8]	; (8004424 <OTG_FS_IRQHandler+0x10>)
 800441a:	f001 f9af 	bl	800577c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800441e:	bf00      	nop
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20005904 	.word	0x20005904

08004428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004430:	4a14      	ldr	r2, [pc, #80]	; (8004484 <_sbrk+0x5c>)
 8004432:	4b15      	ldr	r3, [pc, #84]	; (8004488 <_sbrk+0x60>)
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800443c:	4b13      	ldr	r3, [pc, #76]	; (800448c <_sbrk+0x64>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d102      	bne.n	800444a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004444:	4b11      	ldr	r3, [pc, #68]	; (800448c <_sbrk+0x64>)
 8004446:	4a12      	ldr	r2, [pc, #72]	; (8004490 <_sbrk+0x68>)
 8004448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800444a:	4b10      	ldr	r3, [pc, #64]	; (800448c <_sbrk+0x64>)
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4413      	add	r3, r2
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	429a      	cmp	r2, r3
 8004456:	d207      	bcs.n	8004468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004458:	f00b fd6e 	bl	800ff38 <__errno>
 800445c:	4603      	mov	r3, r0
 800445e:	220c      	movs	r2, #12
 8004460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004466:	e009      	b.n	800447c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004468:	4b08      	ldr	r3, [pc, #32]	; (800448c <_sbrk+0x64>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800446e:	4b07      	ldr	r3, [pc, #28]	; (800448c <_sbrk+0x64>)
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4413      	add	r3, r2
 8004476:	4a05      	ldr	r2, [pc, #20]	; (800448c <_sbrk+0x64>)
 8004478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800447a:	68fb      	ldr	r3, [r7, #12]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	20020000 	.word	0x20020000
 8004488:	00000400 	.word	0x00000400
 800448c:	20000108 	.word	0x20000108
 8004490:	20005c18 	.word	0x20005c18

08004494 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004498:	bf00      	nop
 800449a:	46bd      	mov	sp, r7
 800449c:	bc80      	pop	{r7}
 800449e:	4770      	bx	lr

080044a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80044a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80044a4:	480d      	ldr	r0, [pc, #52]	; (80044dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80044a6:	490e      	ldr	r1, [pc, #56]	; (80044e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80044a8:	4a0e      	ldr	r2, [pc, #56]	; (80044e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80044aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044ac:	e002      	b.n	80044b4 <LoopCopyDataInit>

080044ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044b2:	3304      	adds	r3, #4

080044b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044b8:	d3f9      	bcc.n	80044ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044ba:	4a0b      	ldr	r2, [pc, #44]	; (80044e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80044bc:	4c0b      	ldr	r4, [pc, #44]	; (80044ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80044be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044c0:	e001      	b.n	80044c6 <LoopFillZerobss>

080044c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044c4:	3204      	adds	r2, #4

080044c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044c8:	d3fb      	bcc.n	80044c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80044ca:	f7ff ffe3 	bl	8004494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044ce:	f00b fd39 	bl	800ff44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044d2:	f7ff fb83 	bl	8003bdc <main>
  bx  lr    
 80044d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80044d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80044dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044e0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80044e4:	08011ce8 	.word	0x08011ce8
  ldr r2, =_sbss
 80044e8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80044ec:	20005c18 	.word	0x20005c18

080044f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044f0:	e7fe      	b.n	80044f0 <ADC_IRQHandler>
	...

080044f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80044f8:	4b0e      	ldr	r3, [pc, #56]	; (8004534 <HAL_Init+0x40>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a0d      	ldr	r2, [pc, #52]	; (8004534 <HAL_Init+0x40>)
 80044fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004502:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004504:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <HAL_Init+0x40>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a0a      	ldr	r2, [pc, #40]	; (8004534 <HAL_Init+0x40>)
 800450a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800450e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004510:	4b08      	ldr	r3, [pc, #32]	; (8004534 <HAL_Init+0x40>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a07      	ldr	r2, [pc, #28]	; (8004534 <HAL_Init+0x40>)
 8004516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800451a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800451c:	2003      	movs	r0, #3
 800451e:	f000 f947 	bl	80047b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004522:	2000      	movs	r0, #0
 8004524:	f000 f808 	bl	8004538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004528:	f7ff fe04 	bl	8004134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	40023c00 	.word	0x40023c00

08004538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004540:	4b12      	ldr	r3, [pc, #72]	; (800458c <HAL_InitTick+0x54>)
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	4b12      	ldr	r3, [pc, #72]	; (8004590 <HAL_InitTick+0x58>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	4619      	mov	r1, r3
 800454a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800454e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004552:	fbb2 f3f3 	udiv	r3, r2, r3
 8004556:	4618      	mov	r0, r3
 8004558:	f000 f95f 	bl	800481a <HAL_SYSTICK_Config>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e00e      	b.n	8004584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b0f      	cmp	r3, #15
 800456a:	d80a      	bhi.n	8004582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800456c:	2200      	movs	r2, #0
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004574:	f000 f927 	bl	80047c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004578:	4a06      	ldr	r2, [pc, #24]	; (8004594 <HAL_InitTick+0x5c>)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	e000      	b.n	8004584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
}
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	20000000 	.word	0x20000000
 8004590:	20000008 	.word	0x20000008
 8004594:	20000004 	.word	0x20000004

08004598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800459c:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <HAL_IncTick+0x1c>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	461a      	mov	r2, r3
 80045a2:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <HAL_IncTick+0x20>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4413      	add	r3, r2
 80045a8:	4a03      	ldr	r2, [pc, #12]	; (80045b8 <HAL_IncTick+0x20>)
 80045aa:	6013      	str	r3, [r2, #0]
}
 80045ac:	bf00      	nop
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc80      	pop	{r7}
 80045b2:	4770      	bx	lr
 80045b4:	20000008 	.word	0x20000008
 80045b8:	20005328 	.word	0x20005328

080045bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  return uwTick;
 80045c0:	4b02      	ldr	r3, [pc, #8]	; (80045cc <HAL_GetTick+0x10>)
 80045c2:	681b      	ldr	r3, [r3, #0]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bc80      	pop	{r7}
 80045ca:	4770      	bx	lr
 80045cc:	20005328 	.word	0x20005328

080045d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045d8:	f7ff fff0 	bl	80045bc <HAL_GetTick>
 80045dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045e8:	d005      	beq.n	80045f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045ea:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <HAL_Delay+0x44>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80045f6:	bf00      	nop
 80045f8:	f7ff ffe0 	bl	80045bc <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	429a      	cmp	r2, r3
 8004606:	d8f7      	bhi.n	80045f8 <HAL_Delay+0x28>
  {
  }
}
 8004608:	bf00      	nop
 800460a:	bf00      	nop
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000008 	.word	0x20000008

08004618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004628:	4b0c      	ldr	r3, [pc, #48]	; (800465c <__NVIC_SetPriorityGrouping+0x44>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004634:	4013      	ands	r3, r2
 8004636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800464a:	4a04      	ldr	r2, [pc, #16]	; (800465c <__NVIC_SetPriorityGrouping+0x44>)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	60d3      	str	r3, [r2, #12]
}
 8004650:	bf00      	nop
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	bc80      	pop	{r7}
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	e000ed00 	.word	0xe000ed00

08004660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004664:	4b04      	ldr	r3, [pc, #16]	; (8004678 <__NVIC_GetPriorityGrouping+0x18>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	0a1b      	lsrs	r3, r3, #8
 800466a:	f003 0307 	and.w	r3, r3, #7
}
 800466e:	4618      	mov	r0, r3
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	e000ed00 	.word	0xe000ed00

0800467c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	4603      	mov	r3, r0
 8004684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468a:	2b00      	cmp	r3, #0
 800468c:	db0b      	blt.n	80046a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800468e:	79fb      	ldrb	r3, [r7, #7]
 8004690:	f003 021f 	and.w	r2, r3, #31
 8004694:	4906      	ldr	r1, [pc, #24]	; (80046b0 <__NVIC_EnableIRQ+0x34>)
 8004696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	2001      	movs	r0, #1
 800469e:	fa00 f202 	lsl.w	r2, r0, r2
 80046a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bc80      	pop	{r7}
 80046ae:	4770      	bx	lr
 80046b0:	e000e100 	.word	0xe000e100

080046b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	6039      	str	r1, [r7, #0]
 80046be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	db0a      	blt.n	80046de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	490c      	ldr	r1, [pc, #48]	; (8004700 <__NVIC_SetPriority+0x4c>)
 80046ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d2:	0112      	lsls	r2, r2, #4
 80046d4:	b2d2      	uxtb	r2, r2
 80046d6:	440b      	add	r3, r1
 80046d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046dc:	e00a      	b.n	80046f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	4908      	ldr	r1, [pc, #32]	; (8004704 <__NVIC_SetPriority+0x50>)
 80046e4:	79fb      	ldrb	r3, [r7, #7]
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	3b04      	subs	r3, #4
 80046ec:	0112      	lsls	r2, r2, #4
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	440b      	add	r3, r1
 80046f2:	761a      	strb	r2, [r3, #24]
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bc80      	pop	{r7}
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	e000e100 	.word	0xe000e100
 8004704:	e000ed00 	.word	0xe000ed00

08004708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004708:	b480      	push	{r7}
 800470a:	b089      	sub	sp, #36	; 0x24
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	f1c3 0307 	rsb	r3, r3, #7
 8004722:	2b04      	cmp	r3, #4
 8004724:	bf28      	it	cs
 8004726:	2304      	movcs	r3, #4
 8004728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	3304      	adds	r3, #4
 800472e:	2b06      	cmp	r3, #6
 8004730:	d902      	bls.n	8004738 <NVIC_EncodePriority+0x30>
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	3b03      	subs	r3, #3
 8004736:	e000      	b.n	800473a <NVIC_EncodePriority+0x32>
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800473c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	43da      	mvns	r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	401a      	ands	r2, r3
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004750:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	fa01 f303 	lsl.w	r3, r1, r3
 800475a:	43d9      	mvns	r1, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004760:	4313      	orrs	r3, r2
         );
}
 8004762:	4618      	mov	r0, r3
 8004764:	3724      	adds	r7, #36	; 0x24
 8004766:	46bd      	mov	sp, r7
 8004768:	bc80      	pop	{r7}
 800476a:	4770      	bx	lr

0800476c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3b01      	subs	r3, #1
 8004778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800477c:	d301      	bcc.n	8004782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800477e:	2301      	movs	r3, #1
 8004780:	e00f      	b.n	80047a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004782:	4a0a      	ldr	r2, [pc, #40]	; (80047ac <SysTick_Config+0x40>)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3b01      	subs	r3, #1
 8004788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800478a:	210f      	movs	r1, #15
 800478c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004790:	f7ff ff90 	bl	80046b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004794:	4b05      	ldr	r3, [pc, #20]	; (80047ac <SysTick_Config+0x40>)
 8004796:	2200      	movs	r2, #0
 8004798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800479a:	4b04      	ldr	r3, [pc, #16]	; (80047ac <SysTick_Config+0x40>)
 800479c:	2207      	movs	r2, #7
 800479e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	e000e010 	.word	0xe000e010

080047b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff ff2d 	bl	8004618 <__NVIC_SetPriorityGrouping>
}
 80047be:	bf00      	nop
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b086      	sub	sp, #24
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	4603      	mov	r3, r0
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	607a      	str	r2, [r7, #4]
 80047d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047d8:	f7ff ff42 	bl	8004660 <__NVIC_GetPriorityGrouping>
 80047dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	6978      	ldr	r0, [r7, #20]
 80047e4:	f7ff ff90 	bl	8004708 <NVIC_EncodePriority>
 80047e8:	4602      	mov	r2, r0
 80047ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ee:	4611      	mov	r1, r2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff ff5f 	bl	80046b4 <__NVIC_SetPriority>
}
 80047f6:	bf00      	nop
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	4603      	mov	r3, r0
 8004806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff ff35 	bl	800467c <__NVIC_EnableIRQ>
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff ffa2 	bl	800476c <SysTick_Config>
 8004828:	4603      	mov	r3, r0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b082      	sub	sp, #8
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e00e      	b.n	8004862 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	795b      	ldrb	r3, [r3, #5]
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d105      	bne.n	800485a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff fc93 	bl	8004180 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004874:	2300      	movs	r3, #0
 8004876:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004878:	f7ff fea0 	bl	80045bc <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e099      	b.n	80049bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0201 	bic.w	r2, r2, #1
 80048a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048a8:	e00f      	b.n	80048ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048aa:	f7ff fe87 	bl	80045bc <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b05      	cmp	r3, #5
 80048b6:	d908      	bls.n	80048ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2203      	movs	r2, #3
 80048c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e078      	b.n	80049bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e8      	bne.n	80048aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	4b38      	ldr	r3, [pc, #224]	; (80049c4 <HAL_DMA_Init+0x158>)
 80048e4:	4013      	ands	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004902:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800490e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	2b04      	cmp	r3, #4
 8004922:	d107      	bne.n	8004934 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492c:	4313      	orrs	r3, r2
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	4313      	orrs	r3, r2
 8004932:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f023 0307 	bic.w	r3, r3, #7
 800494a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	4313      	orrs	r3, r2
 8004954:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	2b04      	cmp	r3, #4
 800495c:	d117      	bne.n	800498e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	4313      	orrs	r3, r2
 8004966:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00e      	beq.n	800498e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fa6d 	bl	8004e50 <DMA_CheckFifoParam>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d008      	beq.n	800498e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2240      	movs	r2, #64	; 0x40
 8004980:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800498a:	2301      	movs	r3, #1
 800498c:	e016      	b.n	80049bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fa26 	bl	8004de8 <DMA_CalcBaseAndBitshift>
 800499c:	4603      	mov	r3, r0
 800499e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a4:	223f      	movs	r2, #63	; 0x3f
 80049a6:	409a      	lsls	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	f010803f 	.word	0xf010803f

080049c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049d6:	2300      	movs	r3, #0
 80049d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d101      	bne.n	80049ee <HAL_DMA_Start_IT+0x26>
 80049ea:	2302      	movs	r3, #2
 80049ec:	e040      	b.n	8004a70 <HAL_DMA_Start_IT+0xa8>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d12f      	bne.n	8004a62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2202      	movs	r2, #2
 8004a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	68b9      	ldr	r1, [r7, #8]
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 f9b8 	bl	8004d8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a20:	223f      	movs	r2, #63	; 0x3f
 8004a22:	409a      	lsls	r2, r3
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0216 	orr.w	r2, r2, #22
 8004a36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d007      	beq.n	8004a50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0208 	orr.w	r2, r2, #8
 8004a4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0201 	orr.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	e005      	b.n	8004a6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a84:	4b92      	ldr	r3, [pc, #584]	; (8004cd0 <HAL_DMA_IRQHandler+0x258>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a92      	ldr	r2, [pc, #584]	; (8004cd4 <HAL_DMA_IRQHandler+0x25c>)
 8004a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8e:	0a9b      	lsrs	r3, r3, #10
 8004a90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa2:	2208      	movs	r2, #8
 8004aa4:	409a      	lsls	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d01a      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d013      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0204 	bic.w	r2, r2, #4
 8004aca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad0:	2208      	movs	r2, #8
 8004ad2:	409a      	lsls	r2, r3
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004adc:	f043 0201 	orr.w	r2, r3, #1
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae8:	2201      	movs	r2, #1
 8004aea:	409a      	lsls	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4013      	ands	r3, r2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d012      	beq.n	8004b1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00b      	beq.n	8004b1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b06:	2201      	movs	r2, #1
 8004b08:	409a      	lsls	r2, r3
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b12:	f043 0202 	orr.w	r2, r3, #2
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b1e:	2204      	movs	r2, #4
 8004b20:	409a      	lsls	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	4013      	ands	r3, r2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d012      	beq.n	8004b50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00b      	beq.n	8004b50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3c:	2204      	movs	r2, #4
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b48:	f043 0204 	orr.w	r2, r3, #4
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b54:	2210      	movs	r2, #16
 8004b56:	409a      	lsls	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d043      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d03c      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b72:	2210      	movs	r2, #16
 8004b74:	409a      	lsls	r2, r3
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d018      	beq.n	8004bba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d108      	bne.n	8004ba8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d024      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	4798      	blx	r3
 8004ba6:	e01f      	b.n	8004be8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d01b      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	4798      	blx	r3
 8004bb8:	e016      	b.n	8004be8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d107      	bne.n	8004bd8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0208 	bic.w	r2, r2, #8
 8004bd6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bec:	2220      	movs	r2, #32
 8004bee:	409a      	lsls	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 808e 	beq.w	8004d16 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0310 	and.w	r3, r3, #16
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 8086 	beq.w	8004d16 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0e:	2220      	movs	r2, #32
 8004c10:	409a      	lsls	r2, r3
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b05      	cmp	r3, #5
 8004c20:	d136      	bne.n	8004c90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0216 	bic.w	r2, r2, #22
 8004c30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695a      	ldr	r2, [r3, #20]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d103      	bne.n	8004c52 <HAL_DMA_IRQHandler+0x1da>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d007      	beq.n	8004c62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0208 	bic.w	r2, r2, #8
 8004c60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c66:	223f      	movs	r2, #63	; 0x3f
 8004c68:	409a      	lsls	r2, r3
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d07d      	beq.n	8004d82 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	4798      	blx	r3
        }
        return;
 8004c8e:	e078      	b.n	8004d82 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d01c      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d108      	bne.n	8004cbe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d030      	beq.n	8004d16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	4798      	blx	r3
 8004cbc:	e02b      	b.n	8004d16 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d027      	beq.n	8004d16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	4798      	blx	r3
 8004cce:	e022      	b.n	8004d16 <HAL_DMA_IRQHandler+0x29e>
 8004cd0:	20000000 	.word	0x20000000
 8004cd4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10f      	bne.n	8004d06 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 0210 	bic.w	r2, r2, #16
 8004cf4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d032      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d022      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2205      	movs	r2, #5
 8004d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0201 	bic.w	r2, r2, #1
 8004d40:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	3301      	adds	r3, #1
 8004d46:	60bb      	str	r3, [r7, #8]
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d307      	bcc.n	8004d5e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1f2      	bne.n	8004d42 <HAL_DMA_IRQHandler+0x2ca>
 8004d5c:	e000      	b.n	8004d60 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004d5e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d005      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	4798      	blx	r3
 8004d80:	e000      	b.n	8004d84 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004d82:	bf00      	nop
    }
  }
}
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop

08004d8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004da8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	2b40      	cmp	r3, #64	; 0x40
 8004db8:	d108      	bne.n	8004dcc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004dca:	e007      	b.n	8004ddc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	60da      	str	r2, [r3, #12]
}
 8004ddc:	bf00      	nop
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr
	...

08004de8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	3b10      	subs	r3, #16
 8004df8:	4a13      	ldr	r2, [pc, #76]	; (8004e48 <DMA_CalcBaseAndBitshift+0x60>)
 8004dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfe:	091b      	lsrs	r3, r3, #4
 8004e00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e02:	4a12      	ldr	r2, [pc, #72]	; (8004e4c <DMA_CalcBaseAndBitshift+0x64>)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4413      	add	r3, r2
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2b03      	cmp	r3, #3
 8004e14:	d909      	bls.n	8004e2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e1e:	f023 0303 	bic.w	r3, r3, #3
 8004e22:	1d1a      	adds	r2, r3, #4
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	659a      	str	r2, [r3, #88]	; 0x58
 8004e28:	e007      	b.n	8004e3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e32:	f023 0303 	bic.w	r3, r3, #3
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bc80      	pop	{r7}
 8004e46:	4770      	bx	lr
 8004e48:	aaaaaaab 	.word	0xaaaaaaab
 8004e4c:	080101e8 	.word	0x080101e8

08004e50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d11f      	bne.n	8004eaa <DMA_CheckFifoParam+0x5a>
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	2b03      	cmp	r3, #3
 8004e6e:	d856      	bhi.n	8004f1e <DMA_CheckFifoParam+0xce>
 8004e70:	a201      	add	r2, pc, #4	; (adr r2, 8004e78 <DMA_CheckFifoParam+0x28>)
 8004e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e76:	bf00      	nop
 8004e78:	08004e89 	.word	0x08004e89
 8004e7c:	08004e9b 	.word	0x08004e9b
 8004e80:	08004e89 	.word	0x08004e89
 8004e84:	08004f1f 	.word	0x08004f1f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d046      	beq.n	8004f22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e98:	e043      	b.n	8004f22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ea2:	d140      	bne.n	8004f26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ea8:	e03d      	b.n	8004f26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eb2:	d121      	bne.n	8004ef8 <DMA_CheckFifoParam+0xa8>
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b03      	cmp	r3, #3
 8004eb8:	d837      	bhi.n	8004f2a <DMA_CheckFifoParam+0xda>
 8004eba:	a201      	add	r2, pc, #4	; (adr r2, 8004ec0 <DMA_CheckFifoParam+0x70>)
 8004ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec0:	08004ed1 	.word	0x08004ed1
 8004ec4:	08004ed7 	.word	0x08004ed7
 8004ec8:	08004ed1 	.word	0x08004ed1
 8004ecc:	08004ee9 	.word	0x08004ee9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed4:	e030      	b.n	8004f38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d025      	beq.n	8004f2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ee6:	e022      	b.n	8004f2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ef0:	d11f      	bne.n	8004f32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ef6:	e01c      	b.n	8004f32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d903      	bls.n	8004f06 <DMA_CheckFifoParam+0xb6>
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2b03      	cmp	r3, #3
 8004f02:	d003      	beq.n	8004f0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f04:	e018      	b.n	8004f38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	73fb      	strb	r3, [r7, #15]
      break;
 8004f0a:	e015      	b.n	8004f38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00e      	beq.n	8004f36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f1c:	e00b      	b.n	8004f36 <DMA_CheckFifoParam+0xe6>
      break;
 8004f1e:	bf00      	nop
 8004f20:	e00a      	b.n	8004f38 <DMA_CheckFifoParam+0xe8>
      break;
 8004f22:	bf00      	nop
 8004f24:	e008      	b.n	8004f38 <DMA_CheckFifoParam+0xe8>
      break;
 8004f26:	bf00      	nop
 8004f28:	e006      	b.n	8004f38 <DMA_CheckFifoParam+0xe8>
      break;
 8004f2a:	bf00      	nop
 8004f2c:	e004      	b.n	8004f38 <DMA_CheckFifoParam+0xe8>
      break;
 8004f2e:	bf00      	nop
 8004f30:	e002      	b.n	8004f38 <DMA_CheckFifoParam+0xe8>
      break;   
 8004f32:	bf00      	nop
 8004f34:	e000      	b.n	8004f38 <DMA_CheckFifoParam+0xe8>
      break;
 8004f36:	bf00      	nop
    }
  } 
  
  return status; 
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr

08004f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b089      	sub	sp, #36	; 0x24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	61fb      	str	r3, [r7, #28]
 8004f5e:	e16b      	b.n	8005238 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f60:	2201      	movs	r2, #1
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	fa02 f303 	lsl.w	r3, r2, r3
 8004f68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	4013      	ands	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	f040 815a 	bne.w	8005232 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d005      	beq.n	8004f96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d130      	bne.n	8004ff8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	2203      	movs	r2, #3
 8004fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa6:	43db      	mvns	r3, r3
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	4013      	ands	r3, r2
 8004fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fcc:	2201      	movs	r2, #1
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd4:	43db      	mvns	r3, r3
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	091b      	lsrs	r3, r3, #4
 8004fe2:	f003 0201 	and.w	r2, r3, #1
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f003 0303 	and.w	r3, r3, #3
 8005000:	2b03      	cmp	r3, #3
 8005002:	d017      	beq.n	8005034 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	2203      	movs	r2, #3
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	43db      	mvns	r3, r3
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	4013      	ands	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	fa02 f303 	lsl.w	r3, r2, r3
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	4313      	orrs	r3, r2
 800502c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f003 0303 	and.w	r3, r3, #3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d123      	bne.n	8005088 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	08da      	lsrs	r2, r3, #3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	3208      	adds	r2, #8
 8005048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800504c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	220f      	movs	r2, #15
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	43db      	mvns	r3, r3
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	4013      	ands	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	691a      	ldr	r2, [r3, #16]
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	4313      	orrs	r3, r2
 8005078:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	08da      	lsrs	r2, r3, #3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3208      	adds	r2, #8
 8005082:	69b9      	ldr	r1, [r7, #24]
 8005084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	2203      	movs	r2, #3
 8005094:	fa02 f303 	lsl.w	r3, r2, r3
 8005098:	43db      	mvns	r3, r3
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	4013      	ands	r3, r2
 800509e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f003 0203 	and.w	r2, r3, #3
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	fa02 f303 	lsl.w	r3, r2, r3
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 80b4 	beq.w	8005232 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050ca:	2300      	movs	r3, #0
 80050cc:	60fb      	str	r3, [r7, #12]
 80050ce:	4b5f      	ldr	r3, [pc, #380]	; (800524c <HAL_GPIO_Init+0x308>)
 80050d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d2:	4a5e      	ldr	r2, [pc, #376]	; (800524c <HAL_GPIO_Init+0x308>)
 80050d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050d8:	6453      	str	r3, [r2, #68]	; 0x44
 80050da:	4b5c      	ldr	r3, [pc, #368]	; (800524c <HAL_GPIO_Init+0x308>)
 80050dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050e6:	4a5a      	ldr	r2, [pc, #360]	; (8005250 <HAL_GPIO_Init+0x30c>)
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	089b      	lsrs	r3, r3, #2
 80050ec:	3302      	adds	r3, #2
 80050ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	220f      	movs	r2, #15
 80050fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005102:	43db      	mvns	r3, r3
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	4013      	ands	r3, r2
 8005108:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a51      	ldr	r2, [pc, #324]	; (8005254 <HAL_GPIO_Init+0x310>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d02b      	beq.n	800516a <HAL_GPIO_Init+0x226>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a50      	ldr	r2, [pc, #320]	; (8005258 <HAL_GPIO_Init+0x314>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d025      	beq.n	8005166 <HAL_GPIO_Init+0x222>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a4f      	ldr	r2, [pc, #316]	; (800525c <HAL_GPIO_Init+0x318>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d01f      	beq.n	8005162 <HAL_GPIO_Init+0x21e>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a4e      	ldr	r2, [pc, #312]	; (8005260 <HAL_GPIO_Init+0x31c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d019      	beq.n	800515e <HAL_GPIO_Init+0x21a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a4d      	ldr	r2, [pc, #308]	; (8005264 <HAL_GPIO_Init+0x320>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d013      	beq.n	800515a <HAL_GPIO_Init+0x216>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a4c      	ldr	r2, [pc, #304]	; (8005268 <HAL_GPIO_Init+0x324>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d00d      	beq.n	8005156 <HAL_GPIO_Init+0x212>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a4b      	ldr	r2, [pc, #300]	; (800526c <HAL_GPIO_Init+0x328>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d007      	beq.n	8005152 <HAL_GPIO_Init+0x20e>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a4a      	ldr	r2, [pc, #296]	; (8005270 <HAL_GPIO_Init+0x32c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d101      	bne.n	800514e <HAL_GPIO_Init+0x20a>
 800514a:	2307      	movs	r3, #7
 800514c:	e00e      	b.n	800516c <HAL_GPIO_Init+0x228>
 800514e:	2308      	movs	r3, #8
 8005150:	e00c      	b.n	800516c <HAL_GPIO_Init+0x228>
 8005152:	2306      	movs	r3, #6
 8005154:	e00a      	b.n	800516c <HAL_GPIO_Init+0x228>
 8005156:	2305      	movs	r3, #5
 8005158:	e008      	b.n	800516c <HAL_GPIO_Init+0x228>
 800515a:	2304      	movs	r3, #4
 800515c:	e006      	b.n	800516c <HAL_GPIO_Init+0x228>
 800515e:	2303      	movs	r3, #3
 8005160:	e004      	b.n	800516c <HAL_GPIO_Init+0x228>
 8005162:	2302      	movs	r3, #2
 8005164:	e002      	b.n	800516c <HAL_GPIO_Init+0x228>
 8005166:	2301      	movs	r3, #1
 8005168:	e000      	b.n	800516c <HAL_GPIO_Init+0x228>
 800516a:	2300      	movs	r3, #0
 800516c:	69fa      	ldr	r2, [r7, #28]
 800516e:	f002 0203 	and.w	r2, r2, #3
 8005172:	0092      	lsls	r2, r2, #2
 8005174:	4093      	lsls	r3, r2
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	4313      	orrs	r3, r2
 800517a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800517c:	4934      	ldr	r1, [pc, #208]	; (8005250 <HAL_GPIO_Init+0x30c>)
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	089b      	lsrs	r3, r3, #2
 8005182:	3302      	adds	r3, #2
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800518a:	4b3a      	ldr	r3, [pc, #232]	; (8005274 <HAL_GPIO_Init+0x330>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	43db      	mvns	r3, r3
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	4013      	ands	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051ae:	4a31      	ldr	r2, [pc, #196]	; (8005274 <HAL_GPIO_Init+0x330>)
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80051b4:	4b2f      	ldr	r3, [pc, #188]	; (8005274 <HAL_GPIO_Init+0x330>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	43db      	mvns	r3, r3
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	4013      	ands	r3, r2
 80051c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051d8:	4a26      	ldr	r2, [pc, #152]	; (8005274 <HAL_GPIO_Init+0x330>)
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051de:	4b25      	ldr	r3, [pc, #148]	; (8005274 <HAL_GPIO_Init+0x330>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	43db      	mvns	r3, r3
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	4013      	ands	r3, r2
 80051ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	4313      	orrs	r3, r2
 8005200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005202:	4a1c      	ldr	r2, [pc, #112]	; (8005274 <HAL_GPIO_Init+0x330>)
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005208:	4b1a      	ldr	r3, [pc, #104]	; (8005274 <HAL_GPIO_Init+0x330>)
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	43db      	mvns	r3, r3
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	4013      	ands	r3, r2
 8005216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d003      	beq.n	800522c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	4313      	orrs	r3, r2
 800522a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800522c:	4a11      	ldr	r2, [pc, #68]	; (8005274 <HAL_GPIO_Init+0x330>)
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	3301      	adds	r3, #1
 8005236:	61fb      	str	r3, [r7, #28]
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	2b0f      	cmp	r3, #15
 800523c:	f67f ae90 	bls.w	8004f60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005240:	bf00      	nop
 8005242:	bf00      	nop
 8005244:	3724      	adds	r7, #36	; 0x24
 8005246:	46bd      	mov	sp, r7
 8005248:	bc80      	pop	{r7}
 800524a:	4770      	bx	lr
 800524c:	40023800 	.word	0x40023800
 8005250:	40013800 	.word	0x40013800
 8005254:	40020000 	.word	0x40020000
 8005258:	40020400 	.word	0x40020400
 800525c:	40020800 	.word	0x40020800
 8005260:	40020c00 	.word	0x40020c00
 8005264:	40021000 	.word	0x40021000
 8005268:	40021400 	.word	0x40021400
 800526c:	40021800 	.word	0x40021800
 8005270:	40021c00 	.word	0x40021c00
 8005274:	40013c00 	.word	0x40013c00

08005278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	807b      	strh	r3, [r7, #2]
 8005284:	4613      	mov	r3, r2
 8005286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005288:	787b      	ldrb	r3, [r7, #1]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800528e:	887a      	ldrh	r2, [r7, #2]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005294:	e003      	b.n	800529e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005296:	887b      	ldrh	r3, [r7, #2]
 8005298:	041a      	lsls	r2, r3, #16
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	619a      	str	r2, [r3, #24]
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr

080052a8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80052a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052aa:	b08f      	sub	sp, #60	; 0x3c
 80052ac:	af0a      	add	r7, sp, #40	; 0x28
 80052ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e054      	b.n	8005364 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d106      	bne.n	80052da <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f00a fb57 	bl	800f988 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2203      	movs	r2, #3
 80052de:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d102      	bne.n	80052f4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f004 f87e 	bl	80093fa <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	603b      	str	r3, [r7, #0]
 8005304:	687e      	ldr	r6, [r7, #4]
 8005306:	466d      	mov	r5, sp
 8005308:	f106 0410 	add.w	r4, r6, #16
 800530c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800530e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005312:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005314:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005318:	e885 0003 	stmia.w	r5, {r0, r1}
 800531c:	1d33      	adds	r3, r6, #4
 800531e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005320:	6838      	ldr	r0, [r7, #0]
 8005322:	f003 fff9 	bl	8009318 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2101      	movs	r1, #1
 800532c:	4618      	mov	r0, r3
 800532e:	f004 f874 	bl	800941a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	603b      	str	r3, [r7, #0]
 8005338:	687e      	ldr	r6, [r7, #4]
 800533a:	466d      	mov	r5, sp
 800533c:	f106 0410 	add.w	r4, r6, #16
 8005340:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005342:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005344:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005346:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005348:	e894 0003 	ldmia.w	r4, {r0, r1}
 800534c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005350:	1d33      	adds	r3, r6, #4
 8005352:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005354:	6838      	ldr	r0, [r7, #0]
 8005356:	f004 f9d5 	bl	8009704 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800536c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800536c:	b590      	push	{r4, r7, lr}
 800536e:	b089      	sub	sp, #36	; 0x24
 8005370:	af04      	add	r7, sp, #16
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	4608      	mov	r0, r1
 8005376:	4611      	mov	r1, r2
 8005378:	461a      	mov	r2, r3
 800537a:	4603      	mov	r3, r0
 800537c:	70fb      	strb	r3, [r7, #3]
 800537e:	460b      	mov	r3, r1
 8005380:	70bb      	strb	r3, [r7, #2]
 8005382:	4613      	mov	r3, r2
 8005384:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_HCD_HC_Init+0x28>
 8005390:	2302      	movs	r3, #2
 8005392:	e076      	b.n	8005482 <HAL_HCD_HC_Init+0x116>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800539c:	78fb      	ldrb	r3, [r7, #3]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	212c      	movs	r1, #44	; 0x2c
 80053a2:	fb01 f303 	mul.w	r3, r1, r3
 80053a6:	4413      	add	r3, r2
 80053a8:	333d      	adds	r3, #61	; 0x3d
 80053aa:	2200      	movs	r2, #0
 80053ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80053ae:	78fb      	ldrb	r3, [r7, #3]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	212c      	movs	r1, #44	; 0x2c
 80053b4:	fb01 f303 	mul.w	r3, r1, r3
 80053b8:	4413      	add	r3, r2
 80053ba:	3338      	adds	r3, #56	; 0x38
 80053bc:	787a      	ldrb	r2, [r7, #1]
 80053be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80053c0:	78fb      	ldrb	r3, [r7, #3]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	212c      	movs	r1, #44	; 0x2c
 80053c6:	fb01 f303 	mul.w	r3, r1, r3
 80053ca:	4413      	add	r3, r2
 80053cc:	3340      	adds	r3, #64	; 0x40
 80053ce:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80053d0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80053d2:	78fb      	ldrb	r3, [r7, #3]
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	212c      	movs	r1, #44	; 0x2c
 80053d8:	fb01 f303 	mul.w	r3, r1, r3
 80053dc:	4413      	add	r3, r2
 80053de:	3339      	adds	r3, #57	; 0x39
 80053e0:	78fa      	ldrb	r2, [r7, #3]
 80053e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80053e4:	78fb      	ldrb	r3, [r7, #3]
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	212c      	movs	r1, #44	; 0x2c
 80053ea:	fb01 f303 	mul.w	r3, r1, r3
 80053ee:	4413      	add	r3, r2
 80053f0:	333f      	adds	r3, #63	; 0x3f
 80053f2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80053f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80053f8:	78fb      	ldrb	r3, [r7, #3]
 80053fa:	78ba      	ldrb	r2, [r7, #2]
 80053fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005400:	b2d0      	uxtb	r0, r2
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	212c      	movs	r1, #44	; 0x2c
 8005406:	fb01 f303 	mul.w	r3, r1, r3
 800540a:	4413      	add	r3, r2
 800540c:	333a      	adds	r3, #58	; 0x3a
 800540e:	4602      	mov	r2, r0
 8005410:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005412:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005416:	2b00      	cmp	r3, #0
 8005418:	da09      	bge.n	800542e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800541a:	78fb      	ldrb	r3, [r7, #3]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	212c      	movs	r1, #44	; 0x2c
 8005420:	fb01 f303 	mul.w	r3, r1, r3
 8005424:	4413      	add	r3, r2
 8005426:	333b      	adds	r3, #59	; 0x3b
 8005428:	2201      	movs	r2, #1
 800542a:	701a      	strb	r2, [r3, #0]
 800542c:	e008      	b.n	8005440 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800542e:	78fb      	ldrb	r3, [r7, #3]
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	212c      	movs	r1, #44	; 0x2c
 8005434:	fb01 f303 	mul.w	r3, r1, r3
 8005438:	4413      	add	r3, r2
 800543a:	333b      	adds	r3, #59	; 0x3b
 800543c:	2200      	movs	r2, #0
 800543e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	212c      	movs	r1, #44	; 0x2c
 8005446:	fb01 f303 	mul.w	r3, r1, r3
 800544a:	4413      	add	r3, r2
 800544c:	333c      	adds	r3, #60	; 0x3c
 800544e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005452:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6818      	ldr	r0, [r3, #0]
 8005458:	787c      	ldrb	r4, [r7, #1]
 800545a:	78ba      	ldrb	r2, [r7, #2]
 800545c:	78f9      	ldrb	r1, [r7, #3]
 800545e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005460:	9302      	str	r3, [sp, #8]
 8005462:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005466:	9301      	str	r3, [sp, #4]
 8005468:	f897 3020 	ldrb.w	r3, [r7, #32]
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	4623      	mov	r3, r4
 8005470:	f004 fabe 	bl	80099f0 <USB_HC_Init>
 8005474:	4603      	mov	r3, r0
 8005476:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005480:	7bfb      	ldrb	r3, [r7, #15]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	bd90      	pop	{r4, r7, pc}

0800548a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b084      	sub	sp, #16
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	460b      	mov	r3, r1
 8005494:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d101      	bne.n	80054a8 <HAL_HCD_HC_Halt+0x1e>
 80054a4:	2302      	movs	r3, #2
 80054a6:	e00f      	b.n	80054c8 <HAL_HCD_HC_Halt+0x3e>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	78fa      	ldrb	r2, [r7, #3]
 80054b6:	4611      	mov	r1, r2
 80054b8:	4618      	mov	r0, r3
 80054ba:	f004 fcf9 	bl	8009eb0 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	4608      	mov	r0, r1
 80054da:	4611      	mov	r1, r2
 80054dc:	461a      	mov	r2, r3
 80054de:	4603      	mov	r3, r0
 80054e0:	70fb      	strb	r3, [r7, #3]
 80054e2:	460b      	mov	r3, r1
 80054e4:	70bb      	strb	r3, [r7, #2]
 80054e6:	4613      	mov	r3, r2
 80054e8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80054ea:	78fb      	ldrb	r3, [r7, #3]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	212c      	movs	r1, #44	; 0x2c
 80054f0:	fb01 f303 	mul.w	r3, r1, r3
 80054f4:	4413      	add	r3, r2
 80054f6:	333b      	adds	r3, #59	; 0x3b
 80054f8:	78ba      	ldrb	r2, [r7, #2]
 80054fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80054fc:	78fb      	ldrb	r3, [r7, #3]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	212c      	movs	r1, #44	; 0x2c
 8005502:	fb01 f303 	mul.w	r3, r1, r3
 8005506:	4413      	add	r3, r2
 8005508:	333f      	adds	r3, #63	; 0x3f
 800550a:	787a      	ldrb	r2, [r7, #1]
 800550c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800550e:	7c3b      	ldrb	r3, [r7, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d112      	bne.n	800553a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005514:	78fb      	ldrb	r3, [r7, #3]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	212c      	movs	r1, #44	; 0x2c
 800551a:	fb01 f303 	mul.w	r3, r1, r3
 800551e:	4413      	add	r3, r2
 8005520:	3342      	adds	r3, #66	; 0x42
 8005522:	2203      	movs	r2, #3
 8005524:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005526:	78fb      	ldrb	r3, [r7, #3]
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	212c      	movs	r1, #44	; 0x2c
 800552c:	fb01 f303 	mul.w	r3, r1, r3
 8005530:	4413      	add	r3, r2
 8005532:	333d      	adds	r3, #61	; 0x3d
 8005534:	7f3a      	ldrb	r2, [r7, #28]
 8005536:	701a      	strb	r2, [r3, #0]
 8005538:	e008      	b.n	800554c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800553a:	78fb      	ldrb	r3, [r7, #3]
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	212c      	movs	r1, #44	; 0x2c
 8005540:	fb01 f303 	mul.w	r3, r1, r3
 8005544:	4413      	add	r3, r2
 8005546:	3342      	adds	r3, #66	; 0x42
 8005548:	2202      	movs	r2, #2
 800554a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800554c:	787b      	ldrb	r3, [r7, #1]
 800554e:	2b03      	cmp	r3, #3
 8005550:	f200 80c6 	bhi.w	80056e0 <HAL_HCD_HC_SubmitRequest+0x210>
 8005554:	a201      	add	r2, pc, #4	; (adr r2, 800555c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8005556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555a:	bf00      	nop
 800555c:	0800556d 	.word	0x0800556d
 8005560:	080056cd 	.word	0x080056cd
 8005564:	080055d1 	.word	0x080055d1
 8005568:	0800564f 	.word	0x0800564f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800556c:	7c3b      	ldrb	r3, [r7, #16]
 800556e:	2b01      	cmp	r3, #1
 8005570:	f040 80b8 	bne.w	80056e4 <HAL_HCD_HC_SubmitRequest+0x214>
 8005574:	78bb      	ldrb	r3, [r7, #2]
 8005576:	2b00      	cmp	r3, #0
 8005578:	f040 80b4 	bne.w	80056e4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800557c:	8b3b      	ldrh	r3, [r7, #24]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d108      	bne.n	8005594 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8005582:	78fb      	ldrb	r3, [r7, #3]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	212c      	movs	r1, #44	; 0x2c
 8005588:	fb01 f303 	mul.w	r3, r1, r3
 800558c:	4413      	add	r3, r2
 800558e:	3355      	adds	r3, #85	; 0x55
 8005590:	2201      	movs	r2, #1
 8005592:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005594:	78fb      	ldrb	r3, [r7, #3]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	212c      	movs	r1, #44	; 0x2c
 800559a:	fb01 f303 	mul.w	r3, r1, r3
 800559e:	4413      	add	r3, r2
 80055a0:	3355      	adds	r3, #85	; 0x55
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d109      	bne.n	80055bc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80055a8:	78fb      	ldrb	r3, [r7, #3]
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	212c      	movs	r1, #44	; 0x2c
 80055ae:	fb01 f303 	mul.w	r3, r1, r3
 80055b2:	4413      	add	r3, r2
 80055b4:	3342      	adds	r3, #66	; 0x42
 80055b6:	2200      	movs	r2, #0
 80055b8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80055ba:	e093      	b.n	80056e4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80055bc:	78fb      	ldrb	r3, [r7, #3]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	212c      	movs	r1, #44	; 0x2c
 80055c2:	fb01 f303 	mul.w	r3, r1, r3
 80055c6:	4413      	add	r3, r2
 80055c8:	3342      	adds	r3, #66	; 0x42
 80055ca:	2202      	movs	r2, #2
 80055cc:	701a      	strb	r2, [r3, #0]
      break;
 80055ce:	e089      	b.n	80056e4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80055d0:	78bb      	ldrb	r3, [r7, #2]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d11d      	bne.n	8005612 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80055d6:	78fb      	ldrb	r3, [r7, #3]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	212c      	movs	r1, #44	; 0x2c
 80055dc:	fb01 f303 	mul.w	r3, r1, r3
 80055e0:	4413      	add	r3, r2
 80055e2:	3355      	adds	r3, #85	; 0x55
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d109      	bne.n	80055fe <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80055ea:	78fb      	ldrb	r3, [r7, #3]
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	212c      	movs	r1, #44	; 0x2c
 80055f0:	fb01 f303 	mul.w	r3, r1, r3
 80055f4:	4413      	add	r3, r2
 80055f6:	3342      	adds	r3, #66	; 0x42
 80055f8:	2200      	movs	r2, #0
 80055fa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80055fc:	e073      	b.n	80056e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80055fe:	78fb      	ldrb	r3, [r7, #3]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	212c      	movs	r1, #44	; 0x2c
 8005604:	fb01 f303 	mul.w	r3, r1, r3
 8005608:	4413      	add	r3, r2
 800560a:	3342      	adds	r3, #66	; 0x42
 800560c:	2202      	movs	r2, #2
 800560e:	701a      	strb	r2, [r3, #0]
      break;
 8005610:	e069      	b.n	80056e6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005612:	78fb      	ldrb	r3, [r7, #3]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	212c      	movs	r1, #44	; 0x2c
 8005618:	fb01 f303 	mul.w	r3, r1, r3
 800561c:	4413      	add	r3, r2
 800561e:	3354      	adds	r3, #84	; 0x54
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d109      	bne.n	800563a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005626:	78fb      	ldrb	r3, [r7, #3]
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	212c      	movs	r1, #44	; 0x2c
 800562c:	fb01 f303 	mul.w	r3, r1, r3
 8005630:	4413      	add	r3, r2
 8005632:	3342      	adds	r3, #66	; 0x42
 8005634:	2200      	movs	r2, #0
 8005636:	701a      	strb	r2, [r3, #0]
      break;
 8005638:	e055      	b.n	80056e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800563a:	78fb      	ldrb	r3, [r7, #3]
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	212c      	movs	r1, #44	; 0x2c
 8005640:	fb01 f303 	mul.w	r3, r1, r3
 8005644:	4413      	add	r3, r2
 8005646:	3342      	adds	r3, #66	; 0x42
 8005648:	2202      	movs	r2, #2
 800564a:	701a      	strb	r2, [r3, #0]
      break;
 800564c:	e04b      	b.n	80056e6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800564e:	78bb      	ldrb	r3, [r7, #2]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d11d      	bne.n	8005690 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005654:	78fb      	ldrb	r3, [r7, #3]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	212c      	movs	r1, #44	; 0x2c
 800565a:	fb01 f303 	mul.w	r3, r1, r3
 800565e:	4413      	add	r3, r2
 8005660:	3355      	adds	r3, #85	; 0x55
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d109      	bne.n	800567c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005668:	78fb      	ldrb	r3, [r7, #3]
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	212c      	movs	r1, #44	; 0x2c
 800566e:	fb01 f303 	mul.w	r3, r1, r3
 8005672:	4413      	add	r3, r2
 8005674:	3342      	adds	r3, #66	; 0x42
 8005676:	2200      	movs	r2, #0
 8005678:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800567a:	e034      	b.n	80056e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800567c:	78fb      	ldrb	r3, [r7, #3]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	212c      	movs	r1, #44	; 0x2c
 8005682:	fb01 f303 	mul.w	r3, r1, r3
 8005686:	4413      	add	r3, r2
 8005688:	3342      	adds	r3, #66	; 0x42
 800568a:	2202      	movs	r2, #2
 800568c:	701a      	strb	r2, [r3, #0]
      break;
 800568e:	e02a      	b.n	80056e6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005690:	78fb      	ldrb	r3, [r7, #3]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	212c      	movs	r1, #44	; 0x2c
 8005696:	fb01 f303 	mul.w	r3, r1, r3
 800569a:	4413      	add	r3, r2
 800569c:	3354      	adds	r3, #84	; 0x54
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d109      	bne.n	80056b8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80056a4:	78fb      	ldrb	r3, [r7, #3]
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	212c      	movs	r1, #44	; 0x2c
 80056aa:	fb01 f303 	mul.w	r3, r1, r3
 80056ae:	4413      	add	r3, r2
 80056b0:	3342      	adds	r3, #66	; 0x42
 80056b2:	2200      	movs	r2, #0
 80056b4:	701a      	strb	r2, [r3, #0]
      break;
 80056b6:	e016      	b.n	80056e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80056b8:	78fb      	ldrb	r3, [r7, #3]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	212c      	movs	r1, #44	; 0x2c
 80056be:	fb01 f303 	mul.w	r3, r1, r3
 80056c2:	4413      	add	r3, r2
 80056c4:	3342      	adds	r3, #66	; 0x42
 80056c6:	2202      	movs	r2, #2
 80056c8:	701a      	strb	r2, [r3, #0]
      break;
 80056ca:	e00c      	b.n	80056e6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80056cc:	78fb      	ldrb	r3, [r7, #3]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	212c      	movs	r1, #44	; 0x2c
 80056d2:	fb01 f303 	mul.w	r3, r1, r3
 80056d6:	4413      	add	r3, r2
 80056d8:	3342      	adds	r3, #66	; 0x42
 80056da:	2200      	movs	r2, #0
 80056dc:	701a      	strb	r2, [r3, #0]
      break;
 80056de:	e002      	b.n	80056e6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80056e0:	bf00      	nop
 80056e2:	e000      	b.n	80056e6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80056e4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80056e6:	78fb      	ldrb	r3, [r7, #3]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	212c      	movs	r1, #44	; 0x2c
 80056ec:	fb01 f303 	mul.w	r3, r1, r3
 80056f0:	4413      	add	r3, r2
 80056f2:	3344      	adds	r3, #68	; 0x44
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80056f8:	78fb      	ldrb	r3, [r7, #3]
 80056fa:	8b3a      	ldrh	r2, [r7, #24]
 80056fc:	6879      	ldr	r1, [r7, #4]
 80056fe:	202c      	movs	r0, #44	; 0x2c
 8005700:	fb00 f303 	mul.w	r3, r0, r3
 8005704:	440b      	add	r3, r1
 8005706:	334c      	adds	r3, #76	; 0x4c
 8005708:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800570a:	78fb      	ldrb	r3, [r7, #3]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	212c      	movs	r1, #44	; 0x2c
 8005710:	fb01 f303 	mul.w	r3, r1, r3
 8005714:	4413      	add	r3, r2
 8005716:	3360      	adds	r3, #96	; 0x60
 8005718:	2200      	movs	r2, #0
 800571a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800571c:	78fb      	ldrb	r3, [r7, #3]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	212c      	movs	r1, #44	; 0x2c
 8005722:	fb01 f303 	mul.w	r3, r1, r3
 8005726:	4413      	add	r3, r2
 8005728:	3350      	adds	r3, #80	; 0x50
 800572a:	2200      	movs	r2, #0
 800572c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800572e:	78fb      	ldrb	r3, [r7, #3]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	212c      	movs	r1, #44	; 0x2c
 8005734:	fb01 f303 	mul.w	r3, r1, r3
 8005738:	4413      	add	r3, r2
 800573a:	3339      	adds	r3, #57	; 0x39
 800573c:	78fa      	ldrb	r2, [r7, #3]
 800573e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005740:	78fb      	ldrb	r3, [r7, #3]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	212c      	movs	r1, #44	; 0x2c
 8005746:	fb01 f303 	mul.w	r3, r1, r3
 800574a:	4413      	add	r3, r2
 800574c:	3361      	adds	r3, #97	; 0x61
 800574e:	2200      	movs	r2, #0
 8005750:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	78fb      	ldrb	r3, [r7, #3]
 8005758:	222c      	movs	r2, #44	; 0x2c
 800575a:	fb02 f303 	mul.w	r3, r2, r3
 800575e:	3338      	adds	r3, #56	; 0x38
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	18d1      	adds	r1, r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	b2db      	uxtb	r3, r3
 800576a:	461a      	mov	r2, r3
 800576c:	f004 fa4e 	bl	8009c0c <USB_HC_StartXfer>
 8005770:	4603      	mov	r3, r0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop

0800577c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4618      	mov	r0, r3
 8005794:	f003 ff78 	bl	8009688 <USB_GetMode>
 8005798:	4603      	mov	r3, r0
 800579a:	2b01      	cmp	r3, #1
 800579c:	f040 80f6 	bne.w	800598c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f003 ff5d 	bl	8009664 <USB_ReadInterrupts>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 80ec 	beq.w	800598a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f003 ff54 	bl	8009664 <USB_ReadInterrupts>
 80057bc:	4603      	mov	r3, r0
 80057be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057c6:	d104      	bne.n	80057d2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80057d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f003 ff44 	bl	8009664 <USB_ReadInterrupts>
 80057dc:	4603      	mov	r3, r0
 80057de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057e6:	d104      	bne.n	80057f2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80057f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f003 ff34 	bl	8009664 <USB_ReadInterrupts>
 80057fc:	4603      	mov	r3, r0
 80057fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005802:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005806:	d104      	bne.n	8005812 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005810:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f003 ff24 	bl	8009664 <USB_ReadInterrupts>
 800581c:	4603      	mov	r3, r0
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b02      	cmp	r3, #2
 8005824:	d103      	bne.n	800582e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2202      	movs	r2, #2
 800582c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4618      	mov	r0, r3
 8005834:	f003 ff16 	bl	8009664 <USB_ReadInterrupts>
 8005838:	4603      	mov	r3, r0
 800583a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800583e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005842:	d11c      	bne.n	800587e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800584c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10f      	bne.n	800587e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800585e:	2110      	movs	r1, #16
 8005860:	6938      	ldr	r0, [r7, #16]
 8005862:	f003 fe27 	bl	80094b4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8005866:	6938      	ldr	r0, [r7, #16]
 8005868:	f003 fe48 	bl	80094fc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2101      	movs	r1, #1
 8005872:	4618      	mov	r0, r3
 8005874:	f003 fffa 	bl	800986c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f00a f903 	bl	800fa84 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4618      	mov	r0, r3
 8005884:	f003 feee 	bl	8009664 <USB_ReadInterrupts>
 8005888:	4603      	mov	r3, r0
 800588a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800588e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005892:	d102      	bne.n	800589a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f001 fa01 	bl	8006c9c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4618      	mov	r0, r3
 80058a0:	f003 fee0 	bl	8009664 <USB_ReadInterrupts>
 80058a4:	4603      	mov	r3, r0
 80058a6:	f003 0308 	and.w	r3, r3, #8
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	d106      	bne.n	80058bc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f00a f8cc 	bl	800fa4c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2208      	movs	r2, #8
 80058ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f003 fecf 	bl	8009664 <USB_ReadInterrupts>
 80058c6:	4603      	mov	r3, r0
 80058c8:	f003 0310 	and.w	r3, r3, #16
 80058cc:	2b10      	cmp	r3, #16
 80058ce:	d101      	bne.n	80058d4 <HAL_HCD_IRQHandler+0x158>
 80058d0:	2301      	movs	r3, #1
 80058d2:	e000      	b.n	80058d6 <HAL_HCD_IRQHandler+0x15a>
 80058d4:	2300      	movs	r3, #0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d012      	beq.n	8005900 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	699a      	ldr	r2, [r3, #24]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0210 	bic.w	r2, r2, #16
 80058e8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f001 f904 	bl	8006af8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 0210 	orr.w	r2, r2, #16
 80058fe:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4618      	mov	r0, r3
 8005906:	f003 fead 	bl	8009664 <USB_ReadInterrupts>
 800590a:	4603      	mov	r3, r0
 800590c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005910:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005914:	d13a      	bne.n	800598c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4618      	mov	r0, r3
 800591c:	f004 fab8 	bl	8009e90 <USB_HC_ReadInterrupt>
 8005920:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005922:	2300      	movs	r3, #0
 8005924:	617b      	str	r3, [r7, #20]
 8005926:	e025      	b.n	8005974 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f003 030f 	and.w	r3, r3, #15
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	fa22 f303 	lsr.w	r3, r2, r3
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	2b00      	cmp	r3, #0
 800593a:	d018      	beq.n	800596e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4413      	add	r3, r2
 8005944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800594e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005952:	d106      	bne.n	8005962 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	b2db      	uxtb	r3, r3
 8005958:	4619      	mov	r1, r3
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f8a9 	bl	8005ab2 <HCD_HC_IN_IRQHandler>
 8005960:	e005      	b.n	800596e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	b2db      	uxtb	r3, r3
 8005966:	4619      	mov	r1, r3
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fcc4 	bl	80062f6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	3301      	adds	r3, #1
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	429a      	cmp	r2, r3
 800597c:	d3d4      	bcc.n	8005928 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005986:	615a      	str	r2, [r3, #20]
 8005988:	e000      	b.n	800598c <HAL_HCD_IRQHandler+0x210>
      return;
 800598a:	bf00      	nop
    }
  }
}
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b082      	sub	sp, #8
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d101      	bne.n	80059a8 <HAL_HCD_Start+0x16>
 80059a4:	2302      	movs	r3, #2
 80059a6:	e013      	b.n	80059d0 <HAL_HCD_Start+0x3e>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2101      	movs	r1, #1
 80059b6:	4618      	mov	r0, r3
 80059b8:	f003 ffbb 	bl	8009932 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f003 fd0a 	bl	80093da <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d101      	bne.n	80059ee <HAL_HCD_Stop+0x16>
 80059ea:	2302      	movs	r3, #2
 80059ec:	e00d      	b.n	8005a0a <HAL_HCD_Stop+0x32>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f004 fbae 	bl	800a15c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b082      	sub	sp, #8
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f003 ff5d 	bl	80098de <USB_ResetPort>
 8005a24:	4603      	mov	r3, r0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b083      	sub	sp, #12
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	460b      	mov	r3, r1
 8005a38:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005a3a:	78fb      	ldrb	r3, [r7, #3]
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	212c      	movs	r1, #44	; 0x2c
 8005a40:	fb01 f303 	mul.w	r3, r1, r3
 8005a44:	4413      	add	r3, r2
 8005a46:	3360      	adds	r3, #96	; 0x60
 8005a48:	781b      	ldrb	r3, [r3, #0]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bc80      	pop	{r7}
 8005a52:	4770      	bx	lr

08005a54 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005a60:	78fb      	ldrb	r3, [r7, #3]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	212c      	movs	r1, #44	; 0x2c
 8005a66:	fb01 f303 	mul.w	r3, r1, r3
 8005a6a:	4413      	add	r3, r2
 8005a6c:	3350      	adds	r3, #80	; 0x50
 8005a6e:	681b      	ldr	r3, [r3, #0]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bc80      	pop	{r7}
 8005a78:	4770      	bx	lr

08005a7a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b082      	sub	sp, #8
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f003 ffa1 	bl	80099ce <USB_GetCurrentFrame>
 8005a8c:	4603      	mov	r3, r0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b082      	sub	sp, #8
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f003 ff7d 	bl	80099a2 <USB_GetHostSpeed>
 8005aa8:	4603      	mov	r3, r0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b086      	sub	sp, #24
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	460b      	mov	r3, r1
 8005abc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005ac8:	78fb      	ldrb	r3, [r7, #3]
 8005aca:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f003 0304 	and.w	r3, r3, #4
 8005ade:	2b04      	cmp	r3, #4
 8005ae0:	d119      	bne.n	8005b16 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aee:	461a      	mov	r2, r3
 8005af0:	2304      	movs	r3, #4
 8005af2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	0151      	lsls	r1, r2, #5
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	440a      	add	r2, r1
 8005b0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b0e:	f043 0302 	orr.w	r3, r3, #2
 8005b12:	60d3      	str	r3, [r2, #12]
 8005b14:	e101      	b.n	8005d1a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b2c:	d12b      	bne.n	8005b86 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b40:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	212c      	movs	r1, #44	; 0x2c
 8005b48:	fb01 f303 	mul.w	r3, r1, r3
 8005b4c:	4413      	add	r3, r2
 8005b4e:	3361      	adds	r3, #97	; 0x61
 8005b50:	2207      	movs	r2, #7
 8005b52:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	0151      	lsls	r1, r2, #5
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	440a      	add	r2, r1
 8005b6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b6e:	f043 0302 	orr.w	r3, r3, #2
 8005b72:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f004 f996 	bl	8009eb0 <USB_HC_Halt>
 8005b84:	e0c9      	b.n	8005d1a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f003 0320 	and.w	r3, r3, #32
 8005b98:	2b20      	cmp	r3, #32
 8005b9a:	d109      	bne.n	8005bb0 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba8:	461a      	mov	r2, r3
 8005baa:	2320      	movs	r3, #32
 8005bac:	6093      	str	r3, [r2, #8]
 8005bae:	e0b4      	b.n	8005d1a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f003 0308 	and.w	r3, r3, #8
 8005bc2:	2b08      	cmp	r3, #8
 8005bc4:	d133      	bne.n	8005c2e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	0151      	lsls	r1, r2, #5
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	440a      	add	r2, r1
 8005bdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005be0:	f043 0302 	orr.w	r3, r3, #2
 8005be4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	212c      	movs	r1, #44	; 0x2c
 8005bec:	fb01 f303 	mul.w	r3, r1, r3
 8005bf0:	4413      	add	r3, r2
 8005bf2:	3361      	adds	r3, #97	; 0x61
 8005bf4:	2205      	movs	r2, #5
 8005bf6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c04:	461a      	mov	r2, r3
 8005c06:	2310      	movs	r3, #16
 8005c08:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c16:	461a      	mov	r2, r3
 8005c18:	2308      	movs	r3, #8
 8005c1a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	4611      	mov	r1, r2
 8005c26:	4618      	mov	r0, r3
 8005c28:	f004 f942 	bl	8009eb0 <USB_HC_Halt>
 8005c2c:	e075      	b.n	8005d1a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c44:	d134      	bne.n	8005cb0 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	0151      	lsls	r1, r2, #5
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	440a      	add	r2, r1
 8005c5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c60:	f043 0302 	orr.w	r3, r3, #2
 8005c64:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	212c      	movs	r1, #44	; 0x2c
 8005c6c:	fb01 f303 	mul.w	r3, r1, r3
 8005c70:	4413      	add	r3, r2
 8005c72:	3361      	adds	r3, #97	; 0x61
 8005c74:	2208      	movs	r2, #8
 8005c76:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c84:	461a      	mov	r2, r3
 8005c86:	2310      	movs	r3, #16
 8005c88:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c96:	461a      	mov	r2, r3
 8005c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c9c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	b2d2      	uxtb	r2, r2
 8005ca6:	4611      	mov	r1, r2
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f004 f901 	bl	8009eb0 <USB_HC_Halt>
 8005cae:	e034      	b.n	8005d1a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc2:	2b80      	cmp	r3, #128	; 0x80
 8005cc4:	d129      	bne.n	8005d1a <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	0151      	lsls	r1, r2, #5
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	440a      	add	r2, r1
 8005cdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ce0:	f043 0302 	orr.w	r3, r3, #2
 8005ce4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	212c      	movs	r1, #44	; 0x2c
 8005cec:	fb01 f303 	mul.w	r3, r1, r3
 8005cf0:	4413      	add	r3, r2
 8005cf2:	3361      	adds	r3, #97	; 0x61
 8005cf4:	2206      	movs	r2, #6
 8005cf6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	b2d2      	uxtb	r2, r2
 8005d00:	4611      	mov	r1, r2
 8005d02:	4618      	mov	r0, r3
 8005d04:	f004 f8d4 	bl	8009eb0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d14:	461a      	mov	r2, r3
 8005d16:	2380      	movs	r3, #128	; 0x80
 8005d18:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d30:	d122      	bne.n	8005d78 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	0151      	lsls	r1, r2, #5
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	440a      	add	r2, r1
 8005d48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d4c:	f043 0302 	orr.w	r3, r3, #2
 8005d50:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	b2d2      	uxtb	r2, r2
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f004 f8a7 	bl	8009eb0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d74:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005d76:	e2ba      	b.n	80062ee <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	f040 811b 	bne.w	8005fc6 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d019      	beq.n	8005dcc <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	212c      	movs	r1, #44	; 0x2c
 8005d9e:	fb01 f303 	mul.w	r3, r1, r3
 8005da2:	4413      	add	r3, r2
 8005da4:	3348      	adds	r3, #72	; 0x48
 8005da6:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	0159      	lsls	r1, r3, #5
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	440b      	add	r3, r1
 8005db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005dba:	1ad2      	subs	r2, r2, r3
 8005dbc:	6879      	ldr	r1, [r7, #4]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	202c      	movs	r0, #44	; 0x2c
 8005dc2:	fb00 f303 	mul.w	r3, r0, r3
 8005dc6:	440b      	add	r3, r1
 8005dc8:	3350      	adds	r3, #80	; 0x50
 8005dca:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	212c      	movs	r1, #44	; 0x2c
 8005dd2:	fb01 f303 	mul.w	r3, r1, r3
 8005dd6:	4413      	add	r3, r2
 8005dd8:	3361      	adds	r3, #97	; 0x61
 8005dda:	2201      	movs	r2, #1
 8005ddc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	212c      	movs	r1, #44	; 0x2c
 8005de4:	fb01 f303 	mul.w	r3, r1, r3
 8005de8:	4413      	add	r3, r2
 8005dea:	335c      	adds	r3, #92	; 0x5c
 8005dec:	2200      	movs	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	2301      	movs	r3, #1
 8005e00:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	212c      	movs	r1, #44	; 0x2c
 8005e08:	fb01 f303 	mul.w	r3, r1, r3
 8005e0c:	4413      	add	r3, r2
 8005e0e:	333f      	adds	r3, #63	; 0x3f
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d009      	beq.n	8005e2a <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	212c      	movs	r1, #44	; 0x2c
 8005e1c:	fb01 f303 	mul.w	r3, r1, r3
 8005e20:	4413      	add	r3, r2
 8005e22:	333f      	adds	r3, #63	; 0x3f
 8005e24:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d121      	bne.n	8005e6e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	0151      	lsls	r1, r2, #5
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	440a      	add	r2, r1
 8005e40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e44:	f043 0302 	orr.w	r3, r3, #2
 8005e48:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	b2d2      	uxtb	r2, r2
 8005e52:	4611      	mov	r1, r2
 8005e54:	4618      	mov	r0, r3
 8005e56:	f004 f82b 	bl	8009eb0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e66:	461a      	mov	r2, r3
 8005e68:	2310      	movs	r3, #16
 8005e6a:	6093      	str	r3, [r2, #8]
 8005e6c:	e066      	b.n	8005f3c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	212c      	movs	r1, #44	; 0x2c
 8005e74:	fb01 f303 	mul.w	r3, r1, r3
 8005e78:	4413      	add	r3, r2
 8005e7a:	333f      	adds	r3, #63	; 0x3f
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b03      	cmp	r3, #3
 8005e80:	d127      	bne.n	8005ed2 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	0151      	lsls	r1, r2, #5
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	440a      	add	r2, r1
 8005e98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ea0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	212c      	movs	r1, #44	; 0x2c
 8005ea8:	fb01 f303 	mul.w	r3, r1, r3
 8005eac:	4413      	add	r3, r2
 8005eae:	3360      	adds	r3, #96	; 0x60
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	b2d9      	uxtb	r1, r3
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	202c      	movs	r0, #44	; 0x2c
 8005ebe:	fb00 f303 	mul.w	r3, r0, r3
 8005ec2:	4413      	add	r3, r2
 8005ec4:	3360      	adds	r3, #96	; 0x60
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f009 fde8 	bl	800faa0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005ed0:	e034      	b.n	8005f3c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	212c      	movs	r1, #44	; 0x2c
 8005ed8:	fb01 f303 	mul.w	r3, r1, r3
 8005edc:	4413      	add	r3, r2
 8005ede:	333f      	adds	r3, #63	; 0x3f
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d12a      	bne.n	8005f3c <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	212c      	movs	r1, #44	; 0x2c
 8005eec:	fb01 f303 	mul.w	r3, r1, r3
 8005ef0:	4413      	add	r3, r2
 8005ef2:	3360      	adds	r3, #96	; 0x60
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	212c      	movs	r1, #44	; 0x2c
 8005efe:	fb01 f303 	mul.w	r3, r1, r3
 8005f02:	4413      	add	r3, r2
 8005f04:	3354      	adds	r3, #84	; 0x54
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	f083 0301 	eor.w	r3, r3, #1
 8005f0c:	b2d8      	uxtb	r0, r3
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	212c      	movs	r1, #44	; 0x2c
 8005f14:	fb01 f303 	mul.w	r3, r1, r3
 8005f18:	4413      	add	r3, r2
 8005f1a:	3354      	adds	r3, #84	; 0x54
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	b2d9      	uxtb	r1, r3
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	202c      	movs	r0, #44	; 0x2c
 8005f2a:	fb00 f303 	mul.w	r3, r0, r3
 8005f2e:	4413      	add	r3, r2
 8005f30:	3360      	adds	r3, #96	; 0x60
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	461a      	mov	r2, r3
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f009 fdb2 	bl	800faa0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d12b      	bne.n	8005f9c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	212c      	movs	r1, #44	; 0x2c
 8005f4a:	fb01 f303 	mul.w	r3, r1, r3
 8005f4e:	4413      	add	r3, r2
 8005f50:	3348      	adds	r3, #72	; 0x48
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6879      	ldr	r1, [r7, #4]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	202c      	movs	r0, #44	; 0x2c
 8005f5a:	fb00 f202 	mul.w	r2, r0, r2
 8005f5e:	440a      	add	r2, r1
 8005f60:	3240      	adds	r2, #64	; 0x40
 8005f62:	8812      	ldrh	r2, [r2, #0]
 8005f64:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 81be 	beq.w	80062ee <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	212c      	movs	r1, #44	; 0x2c
 8005f78:	fb01 f303 	mul.w	r3, r1, r3
 8005f7c:	4413      	add	r3, r2
 8005f7e:	3354      	adds	r3, #84	; 0x54
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	f083 0301 	eor.w	r3, r3, #1
 8005f86:	b2d8      	uxtb	r0, r3
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	212c      	movs	r1, #44	; 0x2c
 8005f8e:	fb01 f303 	mul.w	r3, r1, r3
 8005f92:	4413      	add	r3, r2
 8005f94:	3354      	adds	r3, #84	; 0x54
 8005f96:	4602      	mov	r2, r0
 8005f98:	701a      	strb	r2, [r3, #0]
}
 8005f9a:	e1a8      	b.n	80062ee <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	212c      	movs	r1, #44	; 0x2c
 8005fa2:	fb01 f303 	mul.w	r3, r1, r3
 8005fa6:	4413      	add	r3, r2
 8005fa8:	3354      	adds	r3, #84	; 0x54
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	f083 0301 	eor.w	r3, r3, #1
 8005fb0:	b2d8      	uxtb	r0, r3
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	212c      	movs	r1, #44	; 0x2c
 8005fb8:	fb01 f303 	mul.w	r3, r1, r3
 8005fbc:	4413      	add	r3, r2
 8005fbe:	3354      	adds	r3, #84	; 0x54
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	701a      	strb	r2, [r3, #0]
}
 8005fc4:	e193      	b.n	80062ee <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f003 0302 	and.w	r3, r3, #2
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	f040 8106 	bne.w	80061ea <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	0151      	lsls	r1, r2, #5
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	440a      	add	r2, r1
 8005ff4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ff8:	f023 0302 	bic.w	r3, r3, #2
 8005ffc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	212c      	movs	r1, #44	; 0x2c
 8006004:	fb01 f303 	mul.w	r3, r1, r3
 8006008:	4413      	add	r3, r2
 800600a:	3361      	adds	r3, #97	; 0x61
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d109      	bne.n	8006026 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	212c      	movs	r1, #44	; 0x2c
 8006018:	fb01 f303 	mul.w	r3, r1, r3
 800601c:	4413      	add	r3, r2
 800601e:	3360      	adds	r3, #96	; 0x60
 8006020:	2201      	movs	r2, #1
 8006022:	701a      	strb	r2, [r3, #0]
 8006024:	e0c9      	b.n	80061ba <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	212c      	movs	r1, #44	; 0x2c
 800602c:	fb01 f303 	mul.w	r3, r1, r3
 8006030:	4413      	add	r3, r2
 8006032:	3361      	adds	r3, #97	; 0x61
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	2b05      	cmp	r3, #5
 8006038:	d109      	bne.n	800604e <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	212c      	movs	r1, #44	; 0x2c
 8006040:	fb01 f303 	mul.w	r3, r1, r3
 8006044:	4413      	add	r3, r2
 8006046:	3360      	adds	r3, #96	; 0x60
 8006048:	2205      	movs	r2, #5
 800604a:	701a      	strb	r2, [r3, #0]
 800604c:	e0b5      	b.n	80061ba <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	212c      	movs	r1, #44	; 0x2c
 8006054:	fb01 f303 	mul.w	r3, r1, r3
 8006058:	4413      	add	r3, r2
 800605a:	3361      	adds	r3, #97	; 0x61
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	2b06      	cmp	r3, #6
 8006060:	d009      	beq.n	8006076 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	212c      	movs	r1, #44	; 0x2c
 8006068:	fb01 f303 	mul.w	r3, r1, r3
 800606c:	4413      	add	r3, r2
 800606e:	3361      	adds	r3, #97	; 0x61
 8006070:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006072:	2b08      	cmp	r3, #8
 8006074:	d150      	bne.n	8006118 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	212c      	movs	r1, #44	; 0x2c
 800607c:	fb01 f303 	mul.w	r3, r1, r3
 8006080:	4413      	add	r3, r2
 8006082:	335c      	adds	r3, #92	; 0x5c
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	6879      	ldr	r1, [r7, #4]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	202c      	movs	r0, #44	; 0x2c
 800608e:	fb00 f303 	mul.w	r3, r0, r3
 8006092:	440b      	add	r3, r1
 8006094:	335c      	adds	r3, #92	; 0x5c
 8006096:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	212c      	movs	r1, #44	; 0x2c
 800609e:	fb01 f303 	mul.w	r3, r1, r3
 80060a2:	4413      	add	r3, r2
 80060a4:	335c      	adds	r3, #92	; 0x5c
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d912      	bls.n	80060d2 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	212c      	movs	r1, #44	; 0x2c
 80060b2:	fb01 f303 	mul.w	r3, r1, r3
 80060b6:	4413      	add	r3, r2
 80060b8:	335c      	adds	r3, #92	; 0x5c
 80060ba:	2200      	movs	r2, #0
 80060bc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	212c      	movs	r1, #44	; 0x2c
 80060c4:	fb01 f303 	mul.w	r3, r1, r3
 80060c8:	4413      	add	r3, r2
 80060ca:	3360      	adds	r3, #96	; 0x60
 80060cc:	2204      	movs	r2, #4
 80060ce:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80060d0:	e073      	b.n	80061ba <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	212c      	movs	r1, #44	; 0x2c
 80060d8:	fb01 f303 	mul.w	r3, r1, r3
 80060dc:	4413      	add	r3, r2
 80060de:	3360      	adds	r3, #96	; 0x60
 80060e0:	2202      	movs	r2, #2
 80060e2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060fa:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006102:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	4413      	add	r3, r2
 800610c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006110:	461a      	mov	r2, r3
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006116:	e050      	b.n	80061ba <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	212c      	movs	r1, #44	; 0x2c
 800611e:	fb01 f303 	mul.w	r3, r1, r3
 8006122:	4413      	add	r3, r2
 8006124:	3361      	adds	r3, #97	; 0x61
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b03      	cmp	r3, #3
 800612a:	d122      	bne.n	8006172 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	212c      	movs	r1, #44	; 0x2c
 8006132:	fb01 f303 	mul.w	r3, r1, r3
 8006136:	4413      	add	r3, r2
 8006138:	3360      	adds	r3, #96	; 0x60
 800613a:	2202      	movs	r2, #2
 800613c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	4413      	add	r3, r2
 8006146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006154:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800615c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	015a      	lsls	r2, r3, #5
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	4413      	add	r3, r2
 8006166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800616a:	461a      	mov	r2, r3
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	e023      	b.n	80061ba <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	212c      	movs	r1, #44	; 0x2c
 8006178:	fb01 f303 	mul.w	r3, r1, r3
 800617c:	4413      	add	r3, r2
 800617e:	3361      	adds	r3, #97	; 0x61
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	2b07      	cmp	r3, #7
 8006184:	d119      	bne.n	80061ba <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	212c      	movs	r1, #44	; 0x2c
 800618c:	fb01 f303 	mul.w	r3, r1, r3
 8006190:	4413      	add	r3, r2
 8006192:	335c      	adds	r3, #92	; 0x5c
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	202c      	movs	r0, #44	; 0x2c
 800619e:	fb00 f303 	mul.w	r3, r0, r3
 80061a2:	440b      	add	r3, r1
 80061a4:	335c      	adds	r3, #92	; 0x5c
 80061a6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	212c      	movs	r1, #44	; 0x2c
 80061ae:	fb01 f303 	mul.w	r3, r1, r3
 80061b2:	4413      	add	r3, r2
 80061b4:	3360      	adds	r3, #96	; 0x60
 80061b6:	2204      	movs	r2, #4
 80061b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c6:	461a      	mov	r2, r3
 80061c8:	2302      	movs	r3, #2
 80061ca:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	b2d9      	uxtb	r1, r3
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	202c      	movs	r0, #44	; 0x2c
 80061d6:	fb00 f303 	mul.w	r3, r0, r3
 80061da:	4413      	add	r3, r2
 80061dc:	3360      	adds	r3, #96	; 0x60
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	461a      	mov	r2, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f009 fc5c 	bl	800faa0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80061e8:	e081      	b.n	80062ee <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f003 0310 	and.w	r3, r3, #16
 80061fc:	2b10      	cmp	r3, #16
 80061fe:	d176      	bne.n	80062ee <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	212c      	movs	r1, #44	; 0x2c
 8006206:	fb01 f303 	mul.w	r3, r1, r3
 800620a:	4413      	add	r3, r2
 800620c:	333f      	adds	r3, #63	; 0x3f
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	2b03      	cmp	r3, #3
 8006212:	d121      	bne.n	8006258 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	212c      	movs	r1, #44	; 0x2c
 800621a:	fb01 f303 	mul.w	r3, r1, r3
 800621e:	4413      	add	r3, r2
 8006220:	335c      	adds	r3, #92	; 0x5c
 8006222:	2200      	movs	r2, #0
 8006224:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	4413      	add	r3, r2
 800622e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	0151      	lsls	r1, r2, #5
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	440a      	add	r2, r1
 800623c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006240:	f043 0302 	orr.w	r3, r3, #2
 8006244:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	b2d2      	uxtb	r2, r2
 800624e:	4611      	mov	r1, r2
 8006250:	4618      	mov	r0, r3
 8006252:	f003 fe2d 	bl	8009eb0 <USB_HC_Halt>
 8006256:	e041      	b.n	80062dc <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	212c      	movs	r1, #44	; 0x2c
 800625e:	fb01 f303 	mul.w	r3, r1, r3
 8006262:	4413      	add	r3, r2
 8006264:	333f      	adds	r3, #63	; 0x3f
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d009      	beq.n	8006280 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	212c      	movs	r1, #44	; 0x2c
 8006272:	fb01 f303 	mul.w	r3, r1, r3
 8006276:	4413      	add	r3, r2
 8006278:	333f      	adds	r3, #63	; 0x3f
 800627a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800627c:	2b02      	cmp	r3, #2
 800627e:	d12d      	bne.n	80062dc <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	212c      	movs	r1, #44	; 0x2c
 8006286:	fb01 f303 	mul.w	r3, r1, r3
 800628a:	4413      	add	r3, r2
 800628c:	335c      	adds	r3, #92	; 0x5c
 800628e:	2200      	movs	r2, #0
 8006290:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d120      	bne.n	80062dc <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	212c      	movs	r1, #44	; 0x2c
 80062a0:	fb01 f303 	mul.w	r3, r1, r3
 80062a4:	4413      	add	r3, r2
 80062a6:	3361      	adds	r3, #97	; 0x61
 80062a8:	2203      	movs	r2, #3
 80062aa:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	0151      	lsls	r1, r2, #5
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	440a      	add	r2, r1
 80062c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062c6:	f043 0302 	orr.w	r3, r3, #2
 80062ca:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	4611      	mov	r1, r2
 80062d6:	4618      	mov	r0, r3
 80062d8:	f003 fdea 	bl	8009eb0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e8:	461a      	mov	r2, r3
 80062ea:	2310      	movs	r3, #16
 80062ec:	6093      	str	r3, [r2, #8]
}
 80062ee:	bf00      	nop
 80062f0:	3718      	adds	r7, #24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b088      	sub	sp, #32
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	460b      	mov	r3, r1
 8006300:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800630c:	78fb      	ldrb	r3, [r7, #3]
 800630e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	4413      	add	r3, r2
 8006318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f003 0304 	and.w	r3, r3, #4
 8006322:	2b04      	cmp	r3, #4
 8006324:	d119      	bne.n	800635a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	4413      	add	r3, r2
 800632e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006332:	461a      	mov	r2, r3
 8006334:	2304      	movs	r3, #4
 8006336:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	4413      	add	r3, r2
 8006340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	0151      	lsls	r1, r2, #5
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	440a      	add	r2, r1
 800634e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006352:	f043 0302 	orr.w	r3, r3, #2
 8006356:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8006358:	e3ca      	b.n	8006af0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	4413      	add	r3, r2
 8006362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	2b20      	cmp	r3, #32
 800636e:	d13e      	bne.n	80063ee <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	4413      	add	r3, r2
 8006378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800637c:	461a      	mov	r2, r3
 800637e:	2320      	movs	r3, #32
 8006380:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	212c      	movs	r1, #44	; 0x2c
 8006388:	fb01 f303 	mul.w	r3, r1, r3
 800638c:	4413      	add	r3, r2
 800638e:	333d      	adds	r3, #61	; 0x3d
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b01      	cmp	r3, #1
 8006394:	f040 83ac 	bne.w	8006af0 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	212c      	movs	r1, #44	; 0x2c
 800639e:	fb01 f303 	mul.w	r3, r1, r3
 80063a2:	4413      	add	r3, r2
 80063a4:	333d      	adds	r3, #61	; 0x3d
 80063a6:	2200      	movs	r2, #0
 80063a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	212c      	movs	r1, #44	; 0x2c
 80063b0:	fb01 f303 	mul.w	r3, r1, r3
 80063b4:	4413      	add	r3, r2
 80063b6:	3360      	adds	r3, #96	; 0x60
 80063b8:	2202      	movs	r2, #2
 80063ba:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	0151      	lsls	r1, r2, #5
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	440a      	add	r2, r1
 80063d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063d6:	f043 0302 	orr.w	r3, r3, #2
 80063da:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	b2d2      	uxtb	r2, r2
 80063e4:	4611      	mov	r1, r2
 80063e6:	4618      	mov	r0, r3
 80063e8:	f003 fd62 	bl	8009eb0 <USB_HC_Halt>
}
 80063ec:	e380      	b.n	8006af0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006404:	d122      	bne.n	800644c <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	4413      	add	r3, r2
 800640e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	0151      	lsls	r1, r2, #5
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	440a      	add	r2, r1
 800641c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006420:	f043 0302 	orr.w	r3, r3, #2
 8006424:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	b2d2      	uxtb	r2, r2
 800642e:	4611      	mov	r1, r2
 8006430:	4618      	mov	r0, r3
 8006432:	f003 fd3d 	bl	8009eb0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	4413      	add	r3, r2
 800643e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006442:	461a      	mov	r2, r3
 8006444:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006448:	6093      	str	r3, [r2, #8]
}
 800644a:	e351      	b.n	8006af0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	4413      	add	r3, r2
 8006454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b01      	cmp	r3, #1
 8006460:	d150      	bne.n	8006504 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	212c      	movs	r1, #44	; 0x2c
 8006468:	fb01 f303 	mul.w	r3, r1, r3
 800646c:	4413      	add	r3, r2
 800646e:	335c      	adds	r3, #92	; 0x5c
 8006470:	2200      	movs	r2, #0
 8006472:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	4413      	add	r3, r2
 800647c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006486:	2b40      	cmp	r3, #64	; 0x40
 8006488:	d111      	bne.n	80064ae <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	212c      	movs	r1, #44	; 0x2c
 8006490:	fb01 f303 	mul.w	r3, r1, r3
 8006494:	4413      	add	r3, r2
 8006496:	333d      	adds	r3, #61	; 0x3d
 8006498:	2201      	movs	r2, #1
 800649a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a8:	461a      	mov	r2, r3
 80064aa:	2340      	movs	r3, #64	; 0x40
 80064ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	0151      	lsls	r1, r2, #5
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	440a      	add	r2, r1
 80064c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064c8:	f043 0302 	orr.w	r3, r3, #2
 80064cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	b2d2      	uxtb	r2, r2
 80064d6:	4611      	mov	r1, r2
 80064d8:	4618      	mov	r0, r3
 80064da:	f003 fce9 	bl	8009eb0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	015a      	lsls	r2, r3, #5
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ea:	461a      	mov	r2, r3
 80064ec:	2301      	movs	r3, #1
 80064ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	212c      	movs	r1, #44	; 0x2c
 80064f6:	fb01 f303 	mul.w	r3, r1, r3
 80064fa:	4413      	add	r3, r2
 80064fc:	3361      	adds	r3, #97	; 0x61
 80064fe:	2201      	movs	r2, #1
 8006500:	701a      	strb	r2, [r3, #0]
}
 8006502:	e2f5      	b.n	8006af0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	4413      	add	r3, r2
 800650c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006516:	2b40      	cmp	r3, #64	; 0x40
 8006518:	d13c      	bne.n	8006594 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	212c      	movs	r1, #44	; 0x2c
 8006520:	fb01 f303 	mul.w	r3, r1, r3
 8006524:	4413      	add	r3, r2
 8006526:	3361      	adds	r3, #97	; 0x61
 8006528:	2204      	movs	r2, #4
 800652a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	212c      	movs	r1, #44	; 0x2c
 8006532:	fb01 f303 	mul.w	r3, r1, r3
 8006536:	4413      	add	r3, r2
 8006538:	333d      	adds	r3, #61	; 0x3d
 800653a:	2201      	movs	r2, #1
 800653c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	212c      	movs	r1, #44	; 0x2c
 8006544:	fb01 f303 	mul.w	r3, r1, r3
 8006548:	4413      	add	r3, r2
 800654a:	335c      	adds	r3, #92	; 0x5c
 800654c:	2200      	movs	r2, #0
 800654e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	4413      	add	r3, r2
 8006558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	0151      	lsls	r1, r2, #5
 8006562:	69ba      	ldr	r2, [r7, #24]
 8006564:	440a      	add	r2, r1
 8006566:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800656a:	f043 0302 	orr.w	r3, r3, #2
 800656e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	4611      	mov	r1, r2
 800657a:	4618      	mov	r0, r3
 800657c:	f003 fc98 	bl	8009eb0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	015a      	lsls	r2, r3, #5
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	4413      	add	r3, r2
 8006588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800658c:	461a      	mov	r2, r3
 800658e:	2340      	movs	r3, #64	; 0x40
 8006590:	6093      	str	r3, [r2, #8]
}
 8006592:	e2ad      	b.n	8006af0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	4413      	add	r3, r2
 800659c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f003 0308 	and.w	r3, r3, #8
 80065a6:	2b08      	cmp	r3, #8
 80065a8:	d12a      	bne.n	8006600 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b6:	461a      	mov	r2, r3
 80065b8:	2308      	movs	r3, #8
 80065ba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	0151      	lsls	r1, r2, #5
 80065ce:	69ba      	ldr	r2, [r7, #24]
 80065d0:	440a      	add	r2, r1
 80065d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065d6:	f043 0302 	orr.w	r3, r3, #2
 80065da:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	b2d2      	uxtb	r2, r2
 80065e4:	4611      	mov	r1, r2
 80065e6:	4618      	mov	r0, r3
 80065e8:	f003 fc62 	bl	8009eb0 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	212c      	movs	r1, #44	; 0x2c
 80065f2:	fb01 f303 	mul.w	r3, r1, r3
 80065f6:	4413      	add	r3, r2
 80065f8:	3361      	adds	r3, #97	; 0x61
 80065fa:	2205      	movs	r2, #5
 80065fc:	701a      	strb	r2, [r3, #0]
}
 80065fe:	e277      	b.n	8006af0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	4413      	add	r3, r2
 8006608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f003 0310 	and.w	r3, r3, #16
 8006612:	2b10      	cmp	r3, #16
 8006614:	d150      	bne.n	80066b8 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	212c      	movs	r1, #44	; 0x2c
 800661c:	fb01 f303 	mul.w	r3, r1, r3
 8006620:	4413      	add	r3, r2
 8006622:	335c      	adds	r3, #92	; 0x5c
 8006624:	2200      	movs	r2, #0
 8006626:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	212c      	movs	r1, #44	; 0x2c
 800662e:	fb01 f303 	mul.w	r3, r1, r3
 8006632:	4413      	add	r3, r2
 8006634:	3361      	adds	r3, #97	; 0x61
 8006636:	2203      	movs	r2, #3
 8006638:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	212c      	movs	r1, #44	; 0x2c
 8006640:	fb01 f303 	mul.w	r3, r1, r3
 8006644:	4413      	add	r3, r2
 8006646:	333d      	adds	r3, #61	; 0x3d
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d112      	bne.n	8006674 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	212c      	movs	r1, #44	; 0x2c
 8006654:	fb01 f303 	mul.w	r3, r1, r3
 8006658:	4413      	add	r3, r2
 800665a:	333c      	adds	r3, #60	; 0x3c
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d108      	bne.n	8006674 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	212c      	movs	r1, #44	; 0x2c
 8006668:	fb01 f303 	mul.w	r3, r1, r3
 800666c:	4413      	add	r3, r2
 800666e:	333d      	adds	r3, #61	; 0x3d
 8006670:	2201      	movs	r2, #1
 8006672:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	4413      	add	r3, r2
 800667c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	0151      	lsls	r1, r2, #5
 8006686:	69ba      	ldr	r2, [r7, #24]
 8006688:	440a      	add	r2, r1
 800668a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800668e:	f043 0302 	orr.w	r3, r3, #2
 8006692:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	4611      	mov	r1, r2
 800669e:	4618      	mov	r0, r3
 80066a0:	f003 fc06 	bl	8009eb0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b0:	461a      	mov	r2, r3
 80066b2:	2310      	movs	r3, #16
 80066b4:	6093      	str	r3, [r2, #8]
}
 80066b6:	e21b      	b.n	8006af0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ca:	2b80      	cmp	r3, #128	; 0x80
 80066cc:	d174      	bne.n	80067b8 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d121      	bne.n	800671a <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	212c      	movs	r1, #44	; 0x2c
 80066dc:	fb01 f303 	mul.w	r3, r1, r3
 80066e0:	4413      	add	r3, r2
 80066e2:	3361      	adds	r3, #97	; 0x61
 80066e4:	2206      	movs	r2, #6
 80066e6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	0151      	lsls	r1, r2, #5
 80066fa:	69ba      	ldr	r2, [r7, #24]
 80066fc:	440a      	add	r2, r1
 80066fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006702:	f043 0302 	orr.w	r3, r3, #2
 8006706:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	b2d2      	uxtb	r2, r2
 8006710:	4611      	mov	r1, r2
 8006712:	4618      	mov	r0, r3
 8006714:	f003 fbcc 	bl	8009eb0 <USB_HC_Halt>
 8006718:	e044      	b.n	80067a4 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	212c      	movs	r1, #44	; 0x2c
 8006720:	fb01 f303 	mul.w	r3, r1, r3
 8006724:	4413      	add	r3, r2
 8006726:	335c      	adds	r3, #92	; 0x5c
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	1c5a      	adds	r2, r3, #1
 800672c:	6879      	ldr	r1, [r7, #4]
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	202c      	movs	r0, #44	; 0x2c
 8006732:	fb00 f303 	mul.w	r3, r0, r3
 8006736:	440b      	add	r3, r1
 8006738:	335c      	adds	r3, #92	; 0x5c
 800673a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	212c      	movs	r1, #44	; 0x2c
 8006742:	fb01 f303 	mul.w	r3, r1, r3
 8006746:	4413      	add	r3, r2
 8006748:	335c      	adds	r3, #92	; 0x5c
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b02      	cmp	r3, #2
 800674e:	d920      	bls.n	8006792 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	212c      	movs	r1, #44	; 0x2c
 8006756:	fb01 f303 	mul.w	r3, r1, r3
 800675a:	4413      	add	r3, r2
 800675c:	335c      	adds	r3, #92	; 0x5c
 800675e:	2200      	movs	r2, #0
 8006760:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	212c      	movs	r1, #44	; 0x2c
 8006768:	fb01 f303 	mul.w	r3, r1, r3
 800676c:	4413      	add	r3, r2
 800676e:	3360      	adds	r3, #96	; 0x60
 8006770:	2204      	movs	r2, #4
 8006772:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	b2d9      	uxtb	r1, r3
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	202c      	movs	r0, #44	; 0x2c
 800677e:	fb00 f303 	mul.w	r3, r0, r3
 8006782:	4413      	add	r3, r2
 8006784:	3360      	adds	r3, #96	; 0x60
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	461a      	mov	r2, r3
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f009 f988 	bl	800faa0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006790:	e008      	b.n	80067a4 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	212c      	movs	r1, #44	; 0x2c
 8006798:	fb01 f303 	mul.w	r3, r1, r3
 800679c:	4413      	add	r3, r2
 800679e:	3360      	adds	r3, #96	; 0x60
 80067a0:	2202      	movs	r2, #2
 80067a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b0:	461a      	mov	r2, r3
 80067b2:	2380      	movs	r3, #128	; 0x80
 80067b4:	6093      	str	r3, [r2, #8]
}
 80067b6:	e19b      	b.n	8006af0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ce:	d134      	bne.n	800683a <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	0151      	lsls	r1, r2, #5
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	440a      	add	r2, r1
 80067e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067ea:	f043 0302 	orr.w	r3, r3, #2
 80067ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	b2d2      	uxtb	r2, r2
 80067f8:	4611      	mov	r1, r2
 80067fa:	4618      	mov	r0, r3
 80067fc:	f003 fb58 	bl	8009eb0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	4413      	add	r3, r2
 8006808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800680c:	461a      	mov	r2, r3
 800680e:	2310      	movs	r3, #16
 8006810:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	4413      	add	r3, r2
 800681a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800681e:	461a      	mov	r2, r3
 8006820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006824:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	212c      	movs	r1, #44	; 0x2c
 800682c:	fb01 f303 	mul.w	r3, r1, r3
 8006830:	4413      	add	r3, r2
 8006832:	3361      	adds	r3, #97	; 0x61
 8006834:	2208      	movs	r2, #8
 8006836:	701a      	strb	r2, [r3, #0]
}
 8006838:	e15a      	b.n	8006af0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	015a      	lsls	r2, r3, #5
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	4413      	add	r3, r2
 8006842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f003 0302 	and.w	r3, r3, #2
 800684c:	2b02      	cmp	r3, #2
 800684e:	f040 814f 	bne.w	8006af0 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	4413      	add	r3, r2
 800685a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	0151      	lsls	r1, r2, #5
 8006864:	69ba      	ldr	r2, [r7, #24]
 8006866:	440a      	add	r2, r1
 8006868:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800686c:	f023 0302 	bic.w	r3, r3, #2
 8006870:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	212c      	movs	r1, #44	; 0x2c
 8006878:	fb01 f303 	mul.w	r3, r1, r3
 800687c:	4413      	add	r3, r2
 800687e:	3361      	adds	r3, #97	; 0x61
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d17d      	bne.n	8006982 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	212c      	movs	r1, #44	; 0x2c
 800688c:	fb01 f303 	mul.w	r3, r1, r3
 8006890:	4413      	add	r3, r2
 8006892:	3360      	adds	r3, #96	; 0x60
 8006894:	2201      	movs	r2, #1
 8006896:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	212c      	movs	r1, #44	; 0x2c
 800689e:	fb01 f303 	mul.w	r3, r1, r3
 80068a2:	4413      	add	r3, r2
 80068a4:	333f      	adds	r3, #63	; 0x3f
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d00a      	beq.n	80068c2 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	212c      	movs	r1, #44	; 0x2c
 80068b2:	fb01 f303 	mul.w	r3, r1, r3
 80068b6:	4413      	add	r3, r2
 80068b8:	333f      	adds	r3, #63	; 0x3f
 80068ba:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80068bc:	2b03      	cmp	r3, #3
 80068be:	f040 8100 	bne.w	8006ac2 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d113      	bne.n	80068f2 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	212c      	movs	r1, #44	; 0x2c
 80068d0:	fb01 f303 	mul.w	r3, r1, r3
 80068d4:	4413      	add	r3, r2
 80068d6:	3355      	adds	r3, #85	; 0x55
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	f083 0301 	eor.w	r3, r3, #1
 80068de:	b2d8      	uxtb	r0, r3
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	212c      	movs	r1, #44	; 0x2c
 80068e6:	fb01 f303 	mul.w	r3, r1, r3
 80068ea:	4413      	add	r3, r2
 80068ec:	3355      	adds	r3, #85	; 0x55
 80068ee:	4602      	mov	r2, r0
 80068f0:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	f040 80e3 	bne.w	8006ac2 <HCD_HC_OUT_IRQHandler+0x7cc>
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	212c      	movs	r1, #44	; 0x2c
 8006902:	fb01 f303 	mul.w	r3, r1, r3
 8006906:	4413      	add	r3, r2
 8006908:	334c      	adds	r3, #76	; 0x4c
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 80d8 	beq.w	8006ac2 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	212c      	movs	r1, #44	; 0x2c
 8006918:	fb01 f303 	mul.w	r3, r1, r3
 800691c:	4413      	add	r3, r2
 800691e:	334c      	adds	r3, #76	; 0x4c
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6879      	ldr	r1, [r7, #4]
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	202c      	movs	r0, #44	; 0x2c
 8006928:	fb00 f202 	mul.w	r2, r0, r2
 800692c:	440a      	add	r2, r1
 800692e:	3240      	adds	r2, #64	; 0x40
 8006930:	8812      	ldrh	r2, [r2, #0]
 8006932:	4413      	add	r3, r2
 8006934:	3b01      	subs	r3, #1
 8006936:	6879      	ldr	r1, [r7, #4]
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	202c      	movs	r0, #44	; 0x2c
 800693c:	fb00 f202 	mul.w	r2, r0, r2
 8006940:	440a      	add	r2, r1
 8006942:	3240      	adds	r2, #64	; 0x40
 8006944:	8812      	ldrh	r2, [r2, #0]
 8006946:	fbb3 f3f2 	udiv	r3, r3, r2
 800694a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	f000 80b5 	beq.w	8006ac2 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	212c      	movs	r1, #44	; 0x2c
 800695e:	fb01 f303 	mul.w	r3, r1, r3
 8006962:	4413      	add	r3, r2
 8006964:	3355      	adds	r3, #85	; 0x55
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	f083 0301 	eor.w	r3, r3, #1
 800696c:	b2d8      	uxtb	r0, r3
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	212c      	movs	r1, #44	; 0x2c
 8006974:	fb01 f303 	mul.w	r3, r1, r3
 8006978:	4413      	add	r3, r2
 800697a:	3355      	adds	r3, #85	; 0x55
 800697c:	4602      	mov	r2, r0
 800697e:	701a      	strb	r2, [r3, #0]
 8006980:	e09f      	b.n	8006ac2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	212c      	movs	r1, #44	; 0x2c
 8006988:	fb01 f303 	mul.w	r3, r1, r3
 800698c:	4413      	add	r3, r2
 800698e:	3361      	adds	r3, #97	; 0x61
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	2b03      	cmp	r3, #3
 8006994:	d109      	bne.n	80069aa <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	212c      	movs	r1, #44	; 0x2c
 800699c:	fb01 f303 	mul.w	r3, r1, r3
 80069a0:	4413      	add	r3, r2
 80069a2:	3360      	adds	r3, #96	; 0x60
 80069a4:	2202      	movs	r2, #2
 80069a6:	701a      	strb	r2, [r3, #0]
 80069a8:	e08b      	b.n	8006ac2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	212c      	movs	r1, #44	; 0x2c
 80069b0:	fb01 f303 	mul.w	r3, r1, r3
 80069b4:	4413      	add	r3, r2
 80069b6:	3361      	adds	r3, #97	; 0x61
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	2b04      	cmp	r3, #4
 80069bc:	d109      	bne.n	80069d2 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	212c      	movs	r1, #44	; 0x2c
 80069c4:	fb01 f303 	mul.w	r3, r1, r3
 80069c8:	4413      	add	r3, r2
 80069ca:	3360      	adds	r3, #96	; 0x60
 80069cc:	2202      	movs	r2, #2
 80069ce:	701a      	strb	r2, [r3, #0]
 80069d0:	e077      	b.n	8006ac2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	212c      	movs	r1, #44	; 0x2c
 80069d8:	fb01 f303 	mul.w	r3, r1, r3
 80069dc:	4413      	add	r3, r2
 80069de:	3361      	adds	r3, #97	; 0x61
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	2b05      	cmp	r3, #5
 80069e4:	d109      	bne.n	80069fa <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	212c      	movs	r1, #44	; 0x2c
 80069ec:	fb01 f303 	mul.w	r3, r1, r3
 80069f0:	4413      	add	r3, r2
 80069f2:	3360      	adds	r3, #96	; 0x60
 80069f4:	2205      	movs	r2, #5
 80069f6:	701a      	strb	r2, [r3, #0]
 80069f8:	e063      	b.n	8006ac2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	212c      	movs	r1, #44	; 0x2c
 8006a00:	fb01 f303 	mul.w	r3, r1, r3
 8006a04:	4413      	add	r3, r2
 8006a06:	3361      	adds	r3, #97	; 0x61
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	2b06      	cmp	r3, #6
 8006a0c:	d009      	beq.n	8006a22 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	212c      	movs	r1, #44	; 0x2c
 8006a14:	fb01 f303 	mul.w	r3, r1, r3
 8006a18:	4413      	add	r3, r2
 8006a1a:	3361      	adds	r3, #97	; 0x61
 8006a1c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006a1e:	2b08      	cmp	r3, #8
 8006a20:	d14f      	bne.n	8006ac2 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	212c      	movs	r1, #44	; 0x2c
 8006a28:	fb01 f303 	mul.w	r3, r1, r3
 8006a2c:	4413      	add	r3, r2
 8006a2e:	335c      	adds	r3, #92	; 0x5c
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	1c5a      	adds	r2, r3, #1
 8006a34:	6879      	ldr	r1, [r7, #4]
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	202c      	movs	r0, #44	; 0x2c
 8006a3a:	fb00 f303 	mul.w	r3, r0, r3
 8006a3e:	440b      	add	r3, r1
 8006a40:	335c      	adds	r3, #92	; 0x5c
 8006a42:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	212c      	movs	r1, #44	; 0x2c
 8006a4a:	fb01 f303 	mul.w	r3, r1, r3
 8006a4e:	4413      	add	r3, r2
 8006a50:	335c      	adds	r3, #92	; 0x5c
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d912      	bls.n	8006a7e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	212c      	movs	r1, #44	; 0x2c
 8006a5e:	fb01 f303 	mul.w	r3, r1, r3
 8006a62:	4413      	add	r3, r2
 8006a64:	335c      	adds	r3, #92	; 0x5c
 8006a66:	2200      	movs	r2, #0
 8006a68:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	212c      	movs	r1, #44	; 0x2c
 8006a70:	fb01 f303 	mul.w	r3, r1, r3
 8006a74:	4413      	add	r3, r2
 8006a76:	3360      	adds	r3, #96	; 0x60
 8006a78:	2204      	movs	r2, #4
 8006a7a:	701a      	strb	r2, [r3, #0]
 8006a7c:	e021      	b.n	8006ac2 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	212c      	movs	r1, #44	; 0x2c
 8006a84:	fb01 f303 	mul.w	r3, r1, r3
 8006a88:	4413      	add	r3, r2
 8006a8a:	3360      	adds	r3, #96	; 0x60
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006aa6:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006aae:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006abc:	461a      	mov	r2, r3
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	015a      	lsls	r2, r3, #5
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ace:	461a      	mov	r2, r3
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	b2d9      	uxtb	r1, r3
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	202c      	movs	r0, #44	; 0x2c
 8006ade:	fb00 f303 	mul.w	r3, r0, r3
 8006ae2:	4413      	add	r3, r2
 8006ae4:	3360      	adds	r3, #96	; 0x60
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f008 ffd8 	bl	800faa0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006af0:	bf00      	nop
 8006af2:	3720      	adds	r7, #32
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08a      	sub	sp, #40	; 0x28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	f003 030f 	and.w	r3, r3, #15
 8006b18:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	0c5b      	lsrs	r3, r3, #17
 8006b1e:	f003 030f 	and.w	r3, r3, #15
 8006b22:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	091b      	lsrs	r3, r3, #4
 8006b28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b2c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d004      	beq.n	8006b3e <HCD_RXQLVL_IRQHandler+0x46>
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	2b05      	cmp	r3, #5
 8006b38:	f000 80a9 	beq.w	8006c8e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006b3c:	e0aa      	b.n	8006c94 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 80a6 	beq.w	8006c92 <HCD_RXQLVL_IRQHandler+0x19a>
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	212c      	movs	r1, #44	; 0x2c
 8006b4c:	fb01 f303 	mul.w	r3, r1, r3
 8006b50:	4413      	add	r3, r2
 8006b52:	3344      	adds	r3, #68	; 0x44
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f000 809b 	beq.w	8006c92 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	212c      	movs	r1, #44	; 0x2c
 8006b62:	fb01 f303 	mul.w	r3, r1, r3
 8006b66:	4413      	add	r3, r2
 8006b68:	3350      	adds	r3, #80	; 0x50
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	441a      	add	r2, r3
 8006b70:	6879      	ldr	r1, [r7, #4]
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	202c      	movs	r0, #44	; 0x2c
 8006b76:	fb00 f303 	mul.w	r3, r0, r3
 8006b7a:	440b      	add	r3, r1
 8006b7c:	334c      	adds	r3, #76	; 0x4c
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d87a      	bhi.n	8006c7a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6818      	ldr	r0, [r3, #0]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	212c      	movs	r1, #44	; 0x2c
 8006b8e:	fb01 f303 	mul.w	r3, r1, r3
 8006b92:	4413      	add	r3, r2
 8006b94:	3344      	adds	r3, #68	; 0x44
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	b292      	uxth	r2, r2
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	f002 fd0a 	bl	80095b6 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	212c      	movs	r1, #44	; 0x2c
 8006ba8:	fb01 f303 	mul.w	r3, r1, r3
 8006bac:	4413      	add	r3, r2
 8006bae:	3344      	adds	r3, #68	; 0x44
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	441a      	add	r2, r3
 8006bb6:	6879      	ldr	r1, [r7, #4]
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	202c      	movs	r0, #44	; 0x2c
 8006bbc:	fb00 f303 	mul.w	r3, r0, r3
 8006bc0:	440b      	add	r3, r1
 8006bc2:	3344      	adds	r3, #68	; 0x44
 8006bc4:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	212c      	movs	r1, #44	; 0x2c
 8006bcc:	fb01 f303 	mul.w	r3, r1, r3
 8006bd0:	4413      	add	r3, r2
 8006bd2:	3350      	adds	r3, #80	; 0x50
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	441a      	add	r2, r3
 8006bda:	6879      	ldr	r1, [r7, #4]
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	202c      	movs	r0, #44	; 0x2c
 8006be0:	fb00 f303 	mul.w	r3, r0, r3
 8006be4:	440b      	add	r3, r1
 8006be6:	3350      	adds	r3, #80	; 0x50
 8006be8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	015a      	lsls	r2, r3, #5
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	0cdb      	lsrs	r3, r3, #19
 8006bfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bfe:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	212c      	movs	r1, #44	; 0x2c
 8006c06:	fb01 f303 	mul.w	r3, r1, r3
 8006c0a:	4413      	add	r3, r2
 8006c0c:	3340      	adds	r3, #64	; 0x40
 8006c0e:	881b      	ldrh	r3, [r3, #0]
 8006c10:	461a      	mov	r2, r3
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d13c      	bne.n	8006c92 <HCD_RXQLVL_IRQHandler+0x19a>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d039      	beq.n	8006c92 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c34:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c3c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	212c      	movs	r1, #44	; 0x2c
 8006c56:	fb01 f303 	mul.w	r3, r1, r3
 8006c5a:	4413      	add	r3, r2
 8006c5c:	3354      	adds	r3, #84	; 0x54
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	f083 0301 	eor.w	r3, r3, #1
 8006c64:	b2d8      	uxtb	r0, r3
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	212c      	movs	r1, #44	; 0x2c
 8006c6c:	fb01 f303 	mul.w	r3, r1, r3
 8006c70:	4413      	add	r3, r2
 8006c72:	3354      	adds	r3, #84	; 0x54
 8006c74:	4602      	mov	r2, r0
 8006c76:	701a      	strb	r2, [r3, #0]
      break;
 8006c78:	e00b      	b.n	8006c92 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	212c      	movs	r1, #44	; 0x2c
 8006c80:	fb01 f303 	mul.w	r3, r1, r3
 8006c84:	4413      	add	r3, r2
 8006c86:	3360      	adds	r3, #96	; 0x60
 8006c88:	2204      	movs	r2, #4
 8006c8a:	701a      	strb	r2, [r3, #0]
      break;
 8006c8c:	e001      	b.n	8006c92 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006c8e:	bf00      	nop
 8006c90:	e000      	b.n	8006c94 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006c92:	bf00      	nop
  }
}
 8006c94:	bf00      	nop
 8006c96:	3728      	adds	r7, #40	; 0x28
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006cc8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d10b      	bne.n	8006cec <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d102      	bne.n	8006ce4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f008 fec2 	bl	800fa68 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	f043 0302 	orr.w	r3, r3, #2
 8006cea:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f003 0308 	and.w	r3, r3, #8
 8006cf2:	2b08      	cmp	r3, #8
 8006cf4:	d132      	bne.n	8006d5c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	f043 0308 	orr.w	r3, r3, #8
 8006cfc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f003 0304 	and.w	r3, r3, #4
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	d126      	bne.n	8006d56 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d113      	bne.n	8006d38 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006d16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d1a:	d106      	bne.n	8006d2a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2102      	movs	r1, #2
 8006d22:	4618      	mov	r0, r3
 8006d24:	f002 fda2 	bl	800986c <USB_InitFSLSPClkSel>
 8006d28:	e011      	b.n	8006d4e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2101      	movs	r1, #1
 8006d30:	4618      	mov	r0, r3
 8006d32:	f002 fd9b 	bl	800986c <USB_InitFSLSPClkSel>
 8006d36:	e00a      	b.n	8006d4e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d106      	bne.n	8006d4e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d46:	461a      	mov	r2, r3
 8006d48:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006d4c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f008 feb3 	bl	800faba <HAL_HCD_PortEnabled_Callback>
 8006d54:	e002      	b.n	8006d5c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f008 febd 	bl	800fad6 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f003 0320 	and.w	r3, r3, #32
 8006d62:	2b20      	cmp	r3, #32
 8006d64:	d103      	bne.n	8006d6e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	f043 0320 	orr.w	r3, r3, #32
 8006d6c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006d74:	461a      	mov	r2, r3
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	6013      	str	r3, [r2, #0]
}
 8006d7a:	bf00      	nop
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
	...

08006d84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e12b      	b.n	8006fee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d106      	bne.n	8006db0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7fd fa08 	bl	80041c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2224      	movs	r2, #36	; 0x24
 8006db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f022 0201 	bic.w	r2, r2, #1
 8006dc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006de6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006de8:	f002 f944 	bl	8009074 <HAL_RCC_GetPCLK1Freq>
 8006dec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	4a81      	ldr	r2, [pc, #516]	; (8006ff8 <HAL_I2C_Init+0x274>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d807      	bhi.n	8006e08 <HAL_I2C_Init+0x84>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4a80      	ldr	r2, [pc, #512]	; (8006ffc <HAL_I2C_Init+0x278>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	bf94      	ite	ls
 8006e00:	2301      	movls	r3, #1
 8006e02:	2300      	movhi	r3, #0
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	e006      	b.n	8006e16 <HAL_I2C_Init+0x92>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	4a7d      	ldr	r2, [pc, #500]	; (8007000 <HAL_I2C_Init+0x27c>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	bf94      	ite	ls
 8006e10:	2301      	movls	r3, #1
 8006e12:	2300      	movhi	r3, #0
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d001      	beq.n	8006e1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e0e7      	b.n	8006fee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	4a78      	ldr	r2, [pc, #480]	; (8007004 <HAL_I2C_Init+0x280>)
 8006e22:	fba2 2303 	umull	r2, r3, r2, r3
 8006e26:	0c9b      	lsrs	r3, r3, #18
 8006e28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	4a6a      	ldr	r2, [pc, #424]	; (8006ff8 <HAL_I2C_Init+0x274>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d802      	bhi.n	8006e58 <HAL_I2C_Init+0xd4>
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	3301      	adds	r3, #1
 8006e56:	e009      	b.n	8006e6c <HAL_I2C_Init+0xe8>
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006e5e:	fb02 f303 	mul.w	r3, r2, r3
 8006e62:	4a69      	ldr	r2, [pc, #420]	; (8007008 <HAL_I2C_Init+0x284>)
 8006e64:	fba2 2303 	umull	r2, r3, r2, r3
 8006e68:	099b      	lsrs	r3, r3, #6
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	6812      	ldr	r2, [r2, #0]
 8006e70:	430b      	orrs	r3, r1
 8006e72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006e7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	495c      	ldr	r1, [pc, #368]	; (8006ff8 <HAL_I2C_Init+0x274>)
 8006e88:	428b      	cmp	r3, r1
 8006e8a:	d819      	bhi.n	8006ec0 <HAL_I2C_Init+0x13c>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	1e59      	subs	r1, r3, #1
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	005b      	lsls	r3, r3, #1
 8006e96:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e9a:	1c59      	adds	r1, r3, #1
 8006e9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006ea0:	400b      	ands	r3, r1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00a      	beq.n	8006ebc <HAL_I2C_Init+0x138>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	1e59      	subs	r1, r3, #1
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	005b      	lsls	r3, r3, #1
 8006eb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006eba:	e051      	b.n	8006f60 <HAL_I2C_Init+0x1dc>
 8006ebc:	2304      	movs	r3, #4
 8006ebe:	e04f      	b.n	8006f60 <HAL_I2C_Init+0x1dc>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d111      	bne.n	8006eec <HAL_I2C_Init+0x168>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	1e58      	subs	r0, r3, #1
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6859      	ldr	r1, [r3, #4]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	440b      	add	r3, r1
 8006ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006eda:	3301      	adds	r3, #1
 8006edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	bf0c      	ite	eq
 8006ee4:	2301      	moveq	r3, #1
 8006ee6:	2300      	movne	r3, #0
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	e012      	b.n	8006f12 <HAL_I2C_Init+0x18e>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	1e58      	subs	r0, r3, #1
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6859      	ldr	r1, [r3, #4]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	440b      	add	r3, r1
 8006efa:	0099      	lsls	r1, r3, #2
 8006efc:	440b      	add	r3, r1
 8006efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f02:	3301      	adds	r3, #1
 8006f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	bf0c      	ite	eq
 8006f0c:	2301      	moveq	r3, #1
 8006f0e:	2300      	movne	r3, #0
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <HAL_I2C_Init+0x196>
 8006f16:	2301      	movs	r3, #1
 8006f18:	e022      	b.n	8006f60 <HAL_I2C_Init+0x1dc>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10e      	bne.n	8006f40 <HAL_I2C_Init+0x1bc>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	1e58      	subs	r0, r3, #1
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6859      	ldr	r1, [r3, #4]
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	005b      	lsls	r3, r3, #1
 8006f2e:	440b      	add	r3, r1
 8006f30:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f34:	3301      	adds	r3, #1
 8006f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f3e:	e00f      	b.n	8006f60 <HAL_I2C_Init+0x1dc>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	1e58      	subs	r0, r3, #1
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6859      	ldr	r1, [r3, #4]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	440b      	add	r3, r1
 8006f4e:	0099      	lsls	r1, r3, #2
 8006f50:	440b      	add	r3, r1
 8006f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f56:	3301      	adds	r3, #1
 8006f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f60:	6879      	ldr	r1, [r7, #4]
 8006f62:	6809      	ldr	r1, [r1, #0]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	69da      	ldr	r2, [r3, #28]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	431a      	orrs	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006f8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	6911      	ldr	r1, [r2, #16]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	68d2      	ldr	r2, [r2, #12]
 8006f9a:	4311      	orrs	r1, r2
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	6812      	ldr	r2, [r2, #0]
 8006fa0:	430b      	orrs	r3, r1
 8006fa2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	695a      	ldr	r2, [r3, #20]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f042 0201 	orr.w	r2, r2, #1
 8006fce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2220      	movs	r2, #32
 8006fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	000186a0 	.word	0x000186a0
 8006ffc:	001e847f 	.word	0x001e847f
 8007000:	003d08ff 	.word	0x003d08ff
 8007004:	431bde83 	.word	0x431bde83
 8007008:	10624dd3 	.word	0x10624dd3

0800700c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b088      	sub	sp, #32
 8007010:	af02      	add	r7, sp, #8
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	607a      	str	r2, [r7, #4]
 8007016:	461a      	mov	r2, r3
 8007018:	460b      	mov	r3, r1
 800701a:	817b      	strh	r3, [r7, #10]
 800701c:	4613      	mov	r3, r2
 800701e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007020:	f7fd facc 	bl	80045bc <HAL_GetTick>
 8007024:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b20      	cmp	r3, #32
 8007030:	f040 80e0 	bne.w	80071f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	2319      	movs	r3, #25
 800703a:	2201      	movs	r2, #1
 800703c:	4970      	ldr	r1, [pc, #448]	; (8007200 <HAL_I2C_Master_Transmit+0x1f4>)
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 fc58 	bl	80078f4 <I2C_WaitOnFlagUntilTimeout>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800704a:	2302      	movs	r3, #2
 800704c:	e0d3      	b.n	80071f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007054:	2b01      	cmp	r3, #1
 8007056:	d101      	bne.n	800705c <HAL_I2C_Master_Transmit+0x50>
 8007058:	2302      	movs	r3, #2
 800705a:	e0cc      	b.n	80071f6 <HAL_I2C_Master_Transmit+0x1ea>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0301 	and.w	r3, r3, #1
 800706e:	2b01      	cmp	r3, #1
 8007070:	d007      	beq.n	8007082 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f042 0201 	orr.w	r2, r2, #1
 8007080:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007090:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2221      	movs	r2, #33	; 0x21
 8007096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2210      	movs	r2, #16
 800709e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	893a      	ldrh	r2, [r7, #8]
 80070b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	4a50      	ldr	r2, [pc, #320]	; (8007204 <HAL_I2C_Master_Transmit+0x1f8>)
 80070c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80070c4:	8979      	ldrh	r1, [r7, #10]
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	6a3a      	ldr	r2, [r7, #32]
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f000 fac2 	bl	8007654 <I2C_MasterRequestWrite>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e08d      	b.n	80071f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070da:	2300      	movs	r3, #0
 80070dc:	613b      	str	r3, [r7, #16]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	695b      	ldr	r3, [r3, #20]
 80070e4:	613b      	str	r3, [r7, #16]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	613b      	str	r3, [r7, #16]
 80070ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80070f0:	e066      	b.n	80071c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	6a39      	ldr	r1, [r7, #32]
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 fcd2 	bl	8007aa0 <I2C_WaitOnTXEFlagUntilTimeout>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00d      	beq.n	800711e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007106:	2b04      	cmp	r3, #4
 8007108:	d107      	bne.n	800711a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007118:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e06b      	b.n	80071f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	781a      	ldrb	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712e:	1c5a      	adds	r2, r3, #1
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007138:	b29b      	uxth	r3, r3
 800713a:	3b01      	subs	r3, #1
 800713c:	b29a      	uxth	r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007146:	3b01      	subs	r3, #1
 8007148:	b29a      	uxth	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	f003 0304 	and.w	r3, r3, #4
 8007158:	2b04      	cmp	r3, #4
 800715a:	d11b      	bne.n	8007194 <HAL_I2C_Master_Transmit+0x188>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007160:	2b00      	cmp	r3, #0
 8007162:	d017      	beq.n	8007194 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007168:	781a      	ldrb	r2, [r3, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007174:	1c5a      	adds	r2, r3, #1
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800717e:	b29b      	uxth	r3, r3
 8007180:	3b01      	subs	r3, #1
 8007182:	b29a      	uxth	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800718c:	3b01      	subs	r3, #1
 800718e:	b29a      	uxth	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	6a39      	ldr	r1, [r7, #32]
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 fcc2 	bl	8007b22 <I2C_WaitOnBTFFlagUntilTimeout>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00d      	beq.n	80071c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a8:	2b04      	cmp	r3, #4
 80071aa:	d107      	bne.n	80071bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e01a      	b.n	80071f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d194      	bne.n	80070f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2220      	movs	r2, #32
 80071dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80071f0:	2300      	movs	r3, #0
 80071f2:	e000      	b.n	80071f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80071f4:	2302      	movs	r3, #2
  }
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3718      	adds	r7, #24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	00100002 	.word	0x00100002
 8007204:	ffff0000 	.word	0xffff0000

08007208 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b08c      	sub	sp, #48	; 0x30
 800720c:	af02      	add	r7, sp, #8
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	607a      	str	r2, [r7, #4]
 8007212:	461a      	mov	r2, r3
 8007214:	460b      	mov	r3, r1
 8007216:	817b      	strh	r3, [r7, #10]
 8007218:	4613      	mov	r3, r2
 800721a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800721c:	f7fd f9ce 	bl	80045bc <HAL_GetTick>
 8007220:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b20      	cmp	r3, #32
 800722c:	f040 820b 	bne.w	8007646 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	2319      	movs	r3, #25
 8007236:	2201      	movs	r2, #1
 8007238:	497c      	ldr	r1, [pc, #496]	; (800742c <HAL_I2C_Master_Receive+0x224>)
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 fb5a 	bl	80078f4 <I2C_WaitOnFlagUntilTimeout>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007246:	2302      	movs	r3, #2
 8007248:	e1fe      	b.n	8007648 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007250:	2b01      	cmp	r3, #1
 8007252:	d101      	bne.n	8007258 <HAL_I2C_Master_Receive+0x50>
 8007254:	2302      	movs	r3, #2
 8007256:	e1f7      	b.n	8007648 <HAL_I2C_Master_Receive+0x440>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b01      	cmp	r3, #1
 800726c:	d007      	beq.n	800727e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f042 0201 	orr.w	r2, r2, #1
 800727c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800728c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2222      	movs	r2, #34	; 0x22
 8007292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2210      	movs	r2, #16
 800729a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	893a      	ldrh	r2, [r7, #8]
 80072ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	4a5c      	ldr	r2, [pc, #368]	; (8007430 <HAL_I2C_Master_Receive+0x228>)
 80072be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80072c0:	8979      	ldrh	r1, [r7, #10]
 80072c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f000 fa46 	bl	8007758 <I2C_MasterRequestRead>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e1b8      	b.n	8007648 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d113      	bne.n	8007306 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072de:	2300      	movs	r3, #0
 80072e0:	623b      	str	r3, [r7, #32]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	695b      	ldr	r3, [r3, #20]
 80072e8:	623b      	str	r3, [r7, #32]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	623b      	str	r3, [r7, #32]
 80072f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	e18c      	b.n	8007620 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800730a:	2b01      	cmp	r3, #1
 800730c:	d11b      	bne.n	8007346 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800731c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800731e:	2300      	movs	r3, #0
 8007320:	61fb      	str	r3, [r7, #28]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	61fb      	str	r3, [r7, #28]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	61fb      	str	r3, [r7, #28]
 8007332:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	e16c      	b.n	8007620 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800734a:	2b02      	cmp	r3, #2
 800734c:	d11b      	bne.n	8007386 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800735c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800736c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800736e:	2300      	movs	r3, #0
 8007370:	61bb      	str	r3, [r7, #24]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	61bb      	str	r3, [r7, #24]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	61bb      	str	r3, [r7, #24]
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	e14c      	b.n	8007620 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007394:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007396:	2300      	movs	r3, #0
 8007398:	617b      	str	r3, [r7, #20]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	695b      	ldr	r3, [r3, #20]
 80073a0:	617b      	str	r3, [r7, #20]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	617b      	str	r3, [r7, #20]
 80073aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80073ac:	e138      	b.n	8007620 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	f200 80f1 	bhi.w	800759a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d123      	bne.n	8007408 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f000 fbed 	bl	8007ba4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d001      	beq.n	80073d4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e139      	b.n	8007648 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	691a      	ldr	r2, [r3, #16]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073de:	b2d2      	uxtb	r2, r2
 80073e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e6:	1c5a      	adds	r2, r3, #1
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073f0:	3b01      	subs	r3, #1
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	3b01      	subs	r3, #1
 8007400:	b29a      	uxth	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007406:	e10b      	b.n	8007620 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800740c:	2b02      	cmp	r3, #2
 800740e:	d14e      	bne.n	80074ae <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007416:	2200      	movs	r2, #0
 8007418:	4906      	ldr	r1, [pc, #24]	; (8007434 <HAL_I2C_Master_Receive+0x22c>)
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 fa6a 	bl	80078f4 <I2C_WaitOnFlagUntilTimeout>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d008      	beq.n	8007438 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e10e      	b.n	8007648 <HAL_I2C_Master_Receive+0x440>
 800742a:	bf00      	nop
 800742c:	00100002 	.word	0x00100002
 8007430:	ffff0000 	.word	0xffff0000
 8007434:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007446:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	691a      	ldr	r2, [r3, #16]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007452:	b2d2      	uxtb	r2, r2
 8007454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745a:	1c5a      	adds	r2, r3, #1
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007464:	3b01      	subs	r3, #1
 8007466:	b29a      	uxth	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007470:	b29b      	uxth	r3, r3
 8007472:	3b01      	subs	r3, #1
 8007474:	b29a      	uxth	r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	691a      	ldr	r2, [r3, #16]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007484:	b2d2      	uxtb	r2, r2
 8007486:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748c:	1c5a      	adds	r2, r3, #1
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007496:	3b01      	subs	r3, #1
 8007498:	b29a      	uxth	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	3b01      	subs	r3, #1
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074ac:	e0b8      	b.n	8007620 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b4:	2200      	movs	r2, #0
 80074b6:	4966      	ldr	r1, [pc, #408]	; (8007650 <HAL_I2C_Master_Receive+0x448>)
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f000 fa1b 	bl	80078f4 <I2C_WaitOnFlagUntilTimeout>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e0bf      	b.n	8007648 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	691a      	ldr	r2, [r3, #16]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e2:	b2d2      	uxtb	r2, r2
 80074e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ea:	1c5a      	adds	r2, r3, #1
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074f4:	3b01      	subs	r3, #1
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007500:	b29b      	uxth	r3, r3
 8007502:	3b01      	subs	r3, #1
 8007504:	b29a      	uxth	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	2200      	movs	r2, #0
 8007512:	494f      	ldr	r1, [pc, #316]	; (8007650 <HAL_I2C_Master_Receive+0x448>)
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f000 f9ed 	bl	80078f4 <I2C_WaitOnFlagUntilTimeout>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d001      	beq.n	8007524 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e091      	b.n	8007648 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007532:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	691a      	ldr	r2, [r3, #16]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753e:	b2d2      	uxtb	r2, r2
 8007540:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007546:	1c5a      	adds	r2, r3, #1
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007550:	3b01      	subs	r3, #1
 8007552:	b29a      	uxth	r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800755c:	b29b      	uxth	r3, r3
 800755e:	3b01      	subs	r3, #1
 8007560:	b29a      	uxth	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	691a      	ldr	r2, [r3, #16]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007570:	b2d2      	uxtb	r2, r2
 8007572:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007582:	3b01      	subs	r3, #1
 8007584:	b29a      	uxth	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800758e:	b29b      	uxth	r3, r3
 8007590:	3b01      	subs	r3, #1
 8007592:	b29a      	uxth	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007598:	e042      	b.n	8007620 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800759a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800759c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f000 fb00 	bl	8007ba4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e04c      	b.n	8007648 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	691a      	ldr	r2, [r3, #16]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b8:	b2d2      	uxtb	r2, r2
 80075ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c0:	1c5a      	adds	r2, r3, #1
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ca:	3b01      	subs	r3, #1
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	3b01      	subs	r3, #1
 80075da:	b29a      	uxth	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	f003 0304 	and.w	r3, r3, #4
 80075ea:	2b04      	cmp	r3, #4
 80075ec:	d118      	bne.n	8007620 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	691a      	ldr	r2, [r3, #16]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f8:	b2d2      	uxtb	r2, r2
 80075fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007600:	1c5a      	adds	r2, r3, #1
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800760a:	3b01      	subs	r3, #1
 800760c:	b29a      	uxth	r2, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007616:	b29b      	uxth	r3, r3
 8007618:	3b01      	subs	r3, #1
 800761a:	b29a      	uxth	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007624:	2b00      	cmp	r3, #0
 8007626:	f47f aec2 	bne.w	80073ae <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2220      	movs	r2, #32
 800762e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007642:	2300      	movs	r3, #0
 8007644:	e000      	b.n	8007648 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007646:	2302      	movs	r3, #2
  }
}
 8007648:	4618      	mov	r0, r3
 800764a:	3728      	adds	r7, #40	; 0x28
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	00010004 	.word	0x00010004

08007654 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b088      	sub	sp, #32
 8007658:	af02      	add	r7, sp, #8
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	607a      	str	r2, [r7, #4]
 800765e:	603b      	str	r3, [r7, #0]
 8007660:	460b      	mov	r3, r1
 8007662:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007668:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	2b08      	cmp	r3, #8
 800766e:	d006      	beq.n	800767e <I2C_MasterRequestWrite+0x2a>
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d003      	beq.n	800767e <I2C_MasterRequestWrite+0x2a>
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800767c:	d108      	bne.n	8007690 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	e00b      	b.n	80076a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007694:	2b12      	cmp	r3, #18
 8007696:	d107      	bne.n	80076a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 f91d 	bl	80078f4 <I2C_WaitOnFlagUntilTimeout>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00d      	beq.n	80076dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076ce:	d103      	bne.n	80076d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80076d8:	2303      	movs	r3, #3
 80076da:	e035      	b.n	8007748 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076e4:	d108      	bne.n	80076f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80076e6:	897b      	ldrh	r3, [r7, #10]
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	461a      	mov	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80076f4:	611a      	str	r2, [r3, #16]
 80076f6:	e01b      	b.n	8007730 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80076f8:	897b      	ldrh	r3, [r7, #10]
 80076fa:	11db      	asrs	r3, r3, #7
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	f003 0306 	and.w	r3, r3, #6
 8007702:	b2db      	uxtb	r3, r3
 8007704:	f063 030f 	orn	r3, r3, #15
 8007708:	b2da      	uxtb	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	490e      	ldr	r1, [pc, #56]	; (8007750 <I2C_MasterRequestWrite+0xfc>)
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f000 f943 	bl	80079a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e010      	b.n	8007748 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007726:	897b      	ldrh	r3, [r7, #10]
 8007728:	b2da      	uxtb	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	4907      	ldr	r1, [pc, #28]	; (8007754 <I2C_MasterRequestWrite+0x100>)
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f000 f933 	bl	80079a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e000      	b.n	8007748 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3718      	adds	r7, #24
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	00010008 	.word	0x00010008
 8007754:	00010002 	.word	0x00010002

08007758 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b088      	sub	sp, #32
 800775c:	af02      	add	r7, sp, #8
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	607a      	str	r2, [r7, #4]
 8007762:	603b      	str	r3, [r7, #0]
 8007764:	460b      	mov	r3, r1
 8007766:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800777c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	2b08      	cmp	r3, #8
 8007782:	d006      	beq.n	8007792 <I2C_MasterRequestRead+0x3a>
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d003      	beq.n	8007792 <I2C_MasterRequestRead+0x3a>
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007790:	d108      	bne.n	80077a4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	e00b      	b.n	80077bc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a8:	2b11      	cmp	r3, #17
 80077aa:	d107      	bne.n	80077bc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f000 f893 	bl	80078f4 <I2C_WaitOnFlagUntilTimeout>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00d      	beq.n	80077f0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077e2:	d103      	bne.n	80077ec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e079      	b.n	80078e4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077f8:	d108      	bne.n	800780c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80077fa:	897b      	ldrh	r3, [r7, #10]
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	f043 0301 	orr.w	r3, r3, #1
 8007802:	b2da      	uxtb	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	611a      	str	r2, [r3, #16]
 800780a:	e05f      	b.n	80078cc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800780c:	897b      	ldrh	r3, [r7, #10]
 800780e:	11db      	asrs	r3, r3, #7
 8007810:	b2db      	uxtb	r3, r3
 8007812:	f003 0306 	and.w	r3, r3, #6
 8007816:	b2db      	uxtb	r3, r3
 8007818:	f063 030f 	orn	r3, r3, #15
 800781c:	b2da      	uxtb	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	4930      	ldr	r1, [pc, #192]	; (80078ec <I2C_MasterRequestRead+0x194>)
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 f8b9 	bl	80079a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d001      	beq.n	800783a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e054      	b.n	80078e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800783a:	897b      	ldrh	r3, [r7, #10]
 800783c:	b2da      	uxtb	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	4929      	ldr	r1, [pc, #164]	; (80078f0 <I2C_MasterRequestRead+0x198>)
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f000 f8a9 	bl	80079a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e044      	b.n	80078e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800785a:	2300      	movs	r3, #0
 800785c:	613b      	str	r3, [r7, #16]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	613b      	str	r3, [r7, #16]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	613b      	str	r3, [r7, #16]
 800786e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800787e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f000 f831 	bl	80078f4 <I2C_WaitOnFlagUntilTimeout>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00d      	beq.n	80078b4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078a6:	d103      	bne.n	80078b0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078ae:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e017      	b.n	80078e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80078b4:	897b      	ldrh	r3, [r7, #10]
 80078b6:	11db      	asrs	r3, r3, #7
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	f003 0306 	and.w	r3, r3, #6
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	f063 030e 	orn	r3, r3, #14
 80078c4:	b2da      	uxtb	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	4907      	ldr	r1, [pc, #28]	; (80078f0 <I2C_MasterRequestRead+0x198>)
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f000 f865 	bl	80079a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e000      	b.n	80078e4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3718      	adds	r7, #24
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	00010008 	.word	0x00010008
 80078f0:	00010002 	.word	0x00010002

080078f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	603b      	str	r3, [r7, #0]
 8007900:	4613      	mov	r3, r2
 8007902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007904:	e025      	b.n	8007952 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800790c:	d021      	beq.n	8007952 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800790e:	f7fc fe55 	bl	80045bc <HAL_GetTick>
 8007912:	4602      	mov	r2, r0
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	429a      	cmp	r2, r3
 800791c:	d302      	bcc.n	8007924 <I2C_WaitOnFlagUntilTimeout+0x30>
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d116      	bne.n	8007952 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2220      	movs	r2, #32
 800792e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793e:	f043 0220 	orr.w	r2, r3, #32
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e023      	b.n	800799a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	0c1b      	lsrs	r3, r3, #16
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b01      	cmp	r3, #1
 800795a:	d10d      	bne.n	8007978 <I2C_WaitOnFlagUntilTimeout+0x84>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	43da      	mvns	r2, r3
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	4013      	ands	r3, r2
 8007968:	b29b      	uxth	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	bf0c      	ite	eq
 800796e:	2301      	moveq	r3, #1
 8007970:	2300      	movne	r3, #0
 8007972:	b2db      	uxtb	r3, r3
 8007974:	461a      	mov	r2, r3
 8007976:	e00c      	b.n	8007992 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	43da      	mvns	r2, r3
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	4013      	ands	r3, r2
 8007984:	b29b      	uxth	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	bf0c      	ite	eq
 800798a:	2301      	moveq	r3, #1
 800798c:	2300      	movne	r3, #0
 800798e:	b2db      	uxtb	r3, r3
 8007990:	461a      	mov	r2, r3
 8007992:	79fb      	ldrb	r3, [r7, #7]
 8007994:	429a      	cmp	r2, r3
 8007996:	d0b6      	beq.n	8007906 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b084      	sub	sp, #16
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	60f8      	str	r0, [r7, #12]
 80079aa:	60b9      	str	r1, [r7, #8]
 80079ac:	607a      	str	r2, [r7, #4]
 80079ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80079b0:	e051      	b.n	8007a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079c0:	d123      	bne.n	8007a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80079da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2200      	movs	r2, #0
 80079e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2220      	movs	r2, #32
 80079e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f6:	f043 0204 	orr.w	r2, r3, #4
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e046      	b.n	8007a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a10:	d021      	beq.n	8007a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a12:	f7fc fdd3 	bl	80045bc <HAL_GetTick>
 8007a16:	4602      	mov	r2, r0
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d302      	bcc.n	8007a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d116      	bne.n	8007a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2220      	movs	r2, #32
 8007a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a42:	f043 0220 	orr.w	r2, r3, #32
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e020      	b.n	8007a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	0c1b      	lsrs	r3, r3, #16
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d10c      	bne.n	8007a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	43da      	mvns	r2, r3
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	bf14      	ite	ne
 8007a72:	2301      	movne	r3, #1
 8007a74:	2300      	moveq	r3, #0
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	e00b      	b.n	8007a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	43da      	mvns	r2, r3
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	4013      	ands	r3, r2
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	bf14      	ite	ne
 8007a8c:	2301      	movne	r3, #1
 8007a8e:	2300      	moveq	r3, #0
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d18d      	bne.n	80079b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007aac:	e02d      	b.n	8007b0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 f8ce 	bl	8007c50 <I2C_IsAcknowledgeFailed>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e02d      	b.n	8007b1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ac4:	d021      	beq.n	8007b0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ac6:	f7fc fd79 	bl	80045bc <HAL_GetTick>
 8007aca:	4602      	mov	r2, r0
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d302      	bcc.n	8007adc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d116      	bne.n	8007b0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2220      	movs	r2, #32
 8007ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af6:	f043 0220 	orr.w	r2, r3, #32
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e007      	b.n	8007b1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	695b      	ldr	r3, [r3, #20]
 8007b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b14:	2b80      	cmp	r3, #128	; 0x80
 8007b16:	d1ca      	bne.n	8007aae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	60f8      	str	r0, [r7, #12]
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b2e:	e02d      	b.n	8007b8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f000 f88d 	bl	8007c50 <I2C_IsAcknowledgeFailed>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d001      	beq.n	8007b40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e02d      	b.n	8007b9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b46:	d021      	beq.n	8007b8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b48:	f7fc fd38 	bl	80045bc <HAL_GetTick>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d302      	bcc.n	8007b5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d116      	bne.n	8007b8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2220      	movs	r2, #32
 8007b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b78:	f043 0220 	orr.w	r2, r3, #32
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e007      	b.n	8007b9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	f003 0304 	and.w	r3, r3, #4
 8007b96:	2b04      	cmp	r3, #4
 8007b98:	d1ca      	bne.n	8007b30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007bb0:	e042      	b.n	8007c38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	f003 0310 	and.w	r3, r3, #16
 8007bbc:	2b10      	cmp	r3, #16
 8007bbe:	d119      	bne.n	8007bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f06f 0210 	mvn.w	r2, #16
 8007bc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e029      	b.n	8007c48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bf4:	f7fc fce2 	bl	80045bc <HAL_GetTick>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	1ad3      	subs	r3, r2, r3
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d302      	bcc.n	8007c0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d116      	bne.n	8007c38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2220      	movs	r2, #32
 8007c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c24:	f043 0220 	orr.w	r2, r3, #32
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e007      	b.n	8007c48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c42:	2b40      	cmp	r3, #64	; 0x40
 8007c44:	d1b5      	bne.n	8007bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	695b      	ldr	r3, [r3, #20]
 8007c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c66:	d11b      	bne.n	8007ca0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2220      	movs	r2, #32
 8007c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8c:	f043 0204 	orr.w	r2, r3, #4
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e000      	b.n	8007ca2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	370c      	adds	r7, #12
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bc80      	pop	{r7}
 8007caa:	4770      	bx	lr

08007cac <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b088      	sub	sp, #32
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e128      	b.n	8007f10 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d109      	bne.n	8007cde <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a90      	ldr	r2, [pc, #576]	; (8007f18 <HAL_I2S_Init+0x26c>)
 8007cd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7fc fab9 	bl	8004250 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	69db      	ldr	r3, [r3, #28]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	6812      	ldr	r2, [r2, #0]
 8007cf0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8007cf4:	f023 030f 	bic.w	r3, r3, #15
 8007cf8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2202      	movs	r2, #2
 8007d00:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	695b      	ldr	r3, [r3, #20]
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d060      	beq.n	8007dcc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d102      	bne.n	8007d18 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8007d12:	2310      	movs	r3, #16
 8007d14:	617b      	str	r3, [r7, #20]
 8007d16:	e001      	b.n	8007d1c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8007d18:	2320      	movs	r3, #32
 8007d1a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	2b20      	cmp	r3, #32
 8007d22:	d802      	bhi.n	8007d2a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	005b      	lsls	r3, r3, #1
 8007d28:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8007d2a:	2001      	movs	r0, #1
 8007d2c:	f001 fa98 	bl	8009260 <HAL_RCCEx_GetPeriphCLKFreq>
 8007d30:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d3a:	d125      	bne.n	8007d88 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d010      	beq.n	8007d66 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d4e:	4613      	mov	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4413      	add	r3, r2
 8007d54:	005b      	lsls	r3, r3, #1
 8007d56:	461a      	mov	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	695b      	ldr	r3, [r3, #20]
 8007d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d60:	3305      	adds	r3, #5
 8007d62:	613b      	str	r3, [r7, #16]
 8007d64:	e01f      	b.n	8007da6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	00db      	lsls	r3, r3, #3
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d70:	4613      	mov	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	4413      	add	r3, r2
 8007d76:	005b      	lsls	r3, r3, #1
 8007d78:	461a      	mov	r2, r3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d82:	3305      	adds	r3, #5
 8007d84:	613b      	str	r3, [r7, #16]
 8007d86:	e00e      	b.n	8007da6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d90:	4613      	mov	r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	4413      	add	r3, r2
 8007d96:	005b      	lsls	r3, r3, #1
 8007d98:	461a      	mov	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	695b      	ldr	r3, [r3, #20]
 8007d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da2:	3305      	adds	r3, #5
 8007da4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	4a5c      	ldr	r2, [pc, #368]	; (8007f1c <HAL_I2S_Init+0x270>)
 8007daa:	fba2 2303 	umull	r2, r3, r2, r3
 8007dae:	08db      	lsrs	r3, r3, #3
 8007db0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	f003 0301 	and.w	r3, r3, #1
 8007db8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8007dba:	693a      	ldr	r2, [r7, #16]
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	085b      	lsrs	r3, r3, #1
 8007dc2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	021b      	lsls	r3, r3, #8
 8007dc8:	61bb      	str	r3, [r7, #24]
 8007dca:	e003      	b.n	8007dd4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8007dcc:	2302      	movs	r3, #2
 8007dce:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d902      	bls.n	8007de0 <HAL_I2S_Init+0x134>
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	2bff      	cmp	r3, #255	; 0xff
 8007dde:	d907      	bls.n	8007df0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de4:	f043 0210 	orr.w	r2, r3, #16
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e08f      	b.n	8007f10 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	691a      	ldr	r2, [r3, #16]
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	ea42 0103 	orr.w	r1, r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	69fa      	ldr	r2, [r7, #28]
 8007e00:	430a      	orrs	r2, r1
 8007e02:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	69db      	ldr	r3, [r3, #28]
 8007e0a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8007e0e:	f023 030f 	bic.w	r3, r3, #15
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	6851      	ldr	r1, [r2, #4]
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	6892      	ldr	r2, [r2, #8]
 8007e1a:	4311      	orrs	r1, r2
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	68d2      	ldr	r2, [r2, #12]
 8007e20:	4311      	orrs	r1, r2
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	6992      	ldr	r2, [r2, #24]
 8007e26:	430a      	orrs	r2, r1
 8007e28:	431a      	orrs	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e32:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a1b      	ldr	r3, [r3, #32]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d161      	bne.n	8007f00 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a38      	ldr	r2, [pc, #224]	; (8007f20 <HAL_I2S_Init+0x274>)
 8007e40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a37      	ldr	r2, [pc, #220]	; (8007f24 <HAL_I2S_Init+0x278>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d101      	bne.n	8007e50 <HAL_I2S_Init+0x1a4>
 8007e4c:	4b36      	ldr	r3, [pc, #216]	; (8007f28 <HAL_I2S_Init+0x27c>)
 8007e4e:	e001      	b.n	8007e54 <HAL_I2S_Init+0x1a8>
 8007e50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007e54:	69db      	ldr	r3, [r3, #28]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	6812      	ldr	r2, [r2, #0]
 8007e5a:	4932      	ldr	r1, [pc, #200]	; (8007f24 <HAL_I2S_Init+0x278>)
 8007e5c:	428a      	cmp	r2, r1
 8007e5e:	d101      	bne.n	8007e64 <HAL_I2S_Init+0x1b8>
 8007e60:	4a31      	ldr	r2, [pc, #196]	; (8007f28 <HAL_I2S_Init+0x27c>)
 8007e62:	e001      	b.n	8007e68 <HAL_I2S_Init+0x1bc>
 8007e64:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8007e68:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8007e6c:	f023 030f 	bic.w	r3, r3, #15
 8007e70:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a2b      	ldr	r2, [pc, #172]	; (8007f24 <HAL_I2S_Init+0x278>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d101      	bne.n	8007e80 <HAL_I2S_Init+0x1d4>
 8007e7c:	4b2a      	ldr	r3, [pc, #168]	; (8007f28 <HAL_I2S_Init+0x27c>)
 8007e7e:	e001      	b.n	8007e84 <HAL_I2S_Init+0x1d8>
 8007e80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007e84:	2202      	movs	r2, #2
 8007e86:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a25      	ldr	r2, [pc, #148]	; (8007f24 <HAL_I2S_Init+0x278>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d101      	bne.n	8007e96 <HAL_I2S_Init+0x1ea>
 8007e92:	4b25      	ldr	r3, [pc, #148]	; (8007f28 <HAL_I2S_Init+0x27c>)
 8007e94:	e001      	b.n	8007e9a <HAL_I2S_Init+0x1ee>
 8007e96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007e9a:	69db      	ldr	r3, [r3, #28]
 8007e9c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ea6:	d003      	beq.n	8007eb0 <HAL_I2S_Init+0x204>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d103      	bne.n	8007eb8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8007eb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007eb4:	613b      	str	r3, [r7, #16]
 8007eb6:	e001      	b.n	8007ebc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007eda:	4313      	orrs	r3, r2
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	897b      	ldrh	r3, [r7, #10]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007ee8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a0d      	ldr	r2, [pc, #52]	; (8007f24 <HAL_I2S_Init+0x278>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d101      	bne.n	8007ef8 <HAL_I2S_Init+0x24c>
 8007ef4:	4b0c      	ldr	r3, [pc, #48]	; (8007f28 <HAL_I2S_Init+0x27c>)
 8007ef6:	e001      	b.n	8007efc <HAL_I2S_Init+0x250>
 8007ef8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007efc:	897a      	ldrh	r2, [r7, #10]
 8007efe:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3720      	adds	r7, #32
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	0800821d 	.word	0x0800821d
 8007f1c:	cccccccd 	.word	0xcccccccd
 8007f20:	08008331 	.word	0x08008331
 8007f24:	40003800 	.word	0x40003800
 8007f28:	40003400 	.word	0x40003400

08007f2c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	4613      	mov	r3, r2
 8007f38:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d002      	beq.n	8007f46 <HAL_I2S_Transmit_DMA+0x1a>
 8007f40:	88fb      	ldrh	r3, [r7, #6]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e08e      	b.n	8008068 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d101      	bne.n	8007f5a <HAL_I2S_Transmit_DMA+0x2e>
 8007f56:	2302      	movs	r3, #2
 8007f58:	e086      	b.n	8008068 <HAL_I2S_Transmit_DMA+0x13c>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d005      	beq.n	8007f7a <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8007f76:	2302      	movs	r3, #2
 8007f78:	e076      	b.n	8008068 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2203      	movs	r2, #3
 8007f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	69db      	ldr	r3, [r3, #28]
 8007f94:	f003 0307 	and.w	r3, r3, #7
 8007f98:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	2b03      	cmp	r3, #3
 8007f9e:	d002      	beq.n	8007fa6 <HAL_I2S_Transmit_DMA+0x7a>
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	2b05      	cmp	r3, #5
 8007fa4:	d10a      	bne.n	8007fbc <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8007fa6:	88fb      	ldrh	r3, [r7, #6]
 8007fa8:	005b      	lsls	r3, r3, #1
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8007fb0:	88fb      	ldrh	r3, [r7, #6]
 8007fb2:	005b      	lsls	r3, r3, #1
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007fba:	e005      	b.n	8007fc8 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	88fa      	ldrh	r2, [r7, #6]
 8007fc0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	88fa      	ldrh	r2, [r7, #6]
 8007fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fcc:	4a28      	ldr	r2, [pc, #160]	; (8008070 <HAL_I2S_Transmit_DMA+0x144>)
 8007fce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd4:	4a27      	ldr	r2, [pc, #156]	; (8008074 <HAL_I2S_Transmit_DMA+0x148>)
 8007fd6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fdc:	4a26      	ldr	r2, [pc, #152]	; (8008078 <HAL_I2S_Transmit_DMA+0x14c>)
 8007fde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007fe8:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007ff0:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ff6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007ff8:	f7fc fce6 	bl	80049c8 <HAL_DMA_Start_IT>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00f      	beq.n	8008022 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008006:	f043 0208 	orr.w	r2, r3, #8
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e022      	b.n	8008068 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	69db      	ldr	r3, [r3, #28]
 8008028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800802c:	2b00      	cmp	r3, #0
 800802e:	d107      	bne.n	8008040 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	69da      	ldr	r2, [r3, #28]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800803e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	f003 0302 	and.w	r3, r3, #2
 800804a:	2b00      	cmp	r3, #0
 800804c:	d107      	bne.n	800805e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	685a      	ldr	r2, [r3, #4]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f042 0202 	orr.w	r2, r2, #2
 800805c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3718      	adds	r7, #24
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	080080fb 	.word	0x080080fb
 8008074:	080080b9 	.word	0x080080b9
 8008078:	08008117 	.word	0x08008117

0800807c <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	4798      	blx	r3
}
 800808c:	bf00      	nop
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bc80      	pop	{r7}
 80080a4:	4770      	bx	lr

080080a6 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80080ae:	bf00      	nop
 80080b0:	370c      	adds	r7, #12
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bc80      	pop	{r7}
 80080b6:	4770      	bx	lr

080080b8 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	69db      	ldr	r3, [r3, #28]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10e      	bne.n	80080ec <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	685a      	ldr	r2, [r3, #4]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f022 0202 	bic.w	r2, r2, #2
 80080dc:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f7fb ffe7 	bl	80040c0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80080f2:	bf00      	nop
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b084      	sub	sp, #16
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008106:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f7fb fff7 	bl	80040fc <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800810e:	bf00      	nop
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b084      	sub	sp, #16
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008122:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	685a      	ldr	r2, [r3, #4]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f022 0203 	bic.w	r2, r2, #3
 8008132:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800814c:	f043 0208 	orr.w	r2, r3, #8
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f7ff ffa6 	bl	80080a6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800815a:	bf00      	nop
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b082      	sub	sp, #8
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816e:	881a      	ldrh	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817a:	1c9a      	adds	r2, r3, #2
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008184:	b29b      	uxth	r3, r3
 8008186:	3b01      	subs	r3, #1
 8008188:	b29a      	uxth	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008192:	b29b      	uxth	r3, r3
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10e      	bne.n	80081b6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	685a      	ldr	r2, [r3, #4]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80081a6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f7fb ff85 	bl	80040c0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80081b6:	bf00      	nop
 80081b8:	3708      	adds	r7, #8
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b082      	sub	sp, #8
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68da      	ldr	r2, [r3, #12]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d0:	b292      	uxth	r2, r2
 80081d2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d8:	1c9a      	adds	r2, r3, #2
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	3b01      	subs	r3, #1
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10e      	bne.n	8008214 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	685a      	ldr	r2, [r3, #4]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008204:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2201      	movs	r2, #1
 800820a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f7ff ff40 	bl	8008094 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008214:	bf00      	nop
 8008216:	3708      	adds	r7, #8
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b086      	sub	sp, #24
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008232:	b2db      	uxtb	r3, r3
 8008234:	2b04      	cmp	r3, #4
 8008236:	d13a      	bne.n	80082ae <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	f003 0301 	and.w	r3, r3, #1
 800823e:	2b01      	cmp	r3, #1
 8008240:	d109      	bne.n	8008256 <I2S_IRQHandler+0x3a>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800824c:	2b40      	cmp	r3, #64	; 0x40
 800824e:	d102      	bne.n	8008256 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f7ff ffb4 	bl	80081be <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800825c:	2b40      	cmp	r3, #64	; 0x40
 800825e:	d126      	bne.n	80082ae <I2S_IRQHandler+0x92>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	f003 0320 	and.w	r3, r3, #32
 800826a:	2b20      	cmp	r3, #32
 800826c:	d11f      	bne.n	80082ae <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	685a      	ldr	r2, [r3, #4]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800827c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800827e:	2300      	movs	r3, #0
 8008280:	613b      	str	r3, [r7, #16]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	613b      	str	r3, [r7, #16]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	613b      	str	r3, [r7, #16]
 8008292:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082a0:	f043 0202 	orr.w	r2, r3, #2
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f7ff fefc 	bl	80080a6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b03      	cmp	r3, #3
 80082b8:	d136      	bne.n	8008328 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	f003 0302 	and.w	r3, r3, #2
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d109      	bne.n	80082d8 <I2S_IRQHandler+0xbc>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ce:	2b80      	cmp	r3, #128	; 0x80
 80082d0:	d102      	bne.n	80082d8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7ff ff45 	bl	8008162 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	f003 0308 	and.w	r3, r3, #8
 80082de:	2b08      	cmp	r3, #8
 80082e0:	d122      	bne.n	8008328 <I2S_IRQHandler+0x10c>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	f003 0320 	and.w	r3, r3, #32
 80082ec:	2b20      	cmp	r3, #32
 80082ee:	d11b      	bne.n	8008328 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	685a      	ldr	r2, [r3, #4]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80082fe:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008300:	2300      	movs	r3, #0
 8008302:	60fb      	str	r3, [r7, #12]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	60fb      	str	r3, [r7, #12]
 800830c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2201      	movs	r2, #1
 8008312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800831a:	f043 0204 	orr.w	r2, r3, #4
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f7ff febf 	bl	80080a6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008328:	bf00      	nop
 800832a:	3718      	adds	r7, #24
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b088      	sub	sp, #32
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4aa2      	ldr	r2, [pc, #648]	; (80085d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d101      	bne.n	800834e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800834a:	4ba2      	ldr	r3, [pc, #648]	; (80085d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800834c:	e001      	b.n	8008352 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800834e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a9b      	ldr	r2, [pc, #620]	; (80085d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d101      	bne.n	800836c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8008368:	4b9a      	ldr	r3, [pc, #616]	; (80085d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800836a:	e001      	b.n	8008370 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800836c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800837c:	d004      	beq.n	8008388 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	f040 8099 	bne.w	80084ba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	f003 0302 	and.w	r3, r3, #2
 800838e:	2b02      	cmp	r3, #2
 8008390:	d107      	bne.n	80083a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008398:	2b00      	cmp	r3, #0
 800839a:	d002      	beq.n	80083a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f924 	bl	80085ea <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	f003 0301 	and.w	r3, r3, #1
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d107      	bne.n	80083bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d002      	beq.n	80083bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f9c6 	bl	8008748 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c2:	2b40      	cmp	r3, #64	; 0x40
 80083c4:	d13a      	bne.n	800843c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	f003 0320 	and.w	r3, r3, #32
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d035      	beq.n	800843c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a7e      	ldr	r2, [pc, #504]	; (80085d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d101      	bne.n	80083de <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80083da:	4b7e      	ldr	r3, [pc, #504]	; (80085d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80083dc:	e001      	b.n	80083e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80083de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4979      	ldr	r1, [pc, #484]	; (80085d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80083ea:	428b      	cmp	r3, r1
 80083ec:	d101      	bne.n	80083f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80083ee:	4b79      	ldr	r3, [pc, #484]	; (80085d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80083f0:	e001      	b.n	80083f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80083f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80083f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80083fa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800840a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800840c:	2300      	movs	r3, #0
 800840e:	60fb      	str	r3, [r7, #12]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	60fb      	str	r3, [r7, #12]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	60fb      	str	r3, [r7, #12]
 8008420:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800842e:	f043 0202 	orr.w	r2, r3, #2
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f7ff fe35 	bl	80080a6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	f003 0308 	and.w	r3, r3, #8
 8008442:	2b08      	cmp	r3, #8
 8008444:	f040 80be 	bne.w	80085c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	f003 0320 	and.w	r3, r3, #32
 800844e:	2b00      	cmp	r3, #0
 8008450:	f000 80b8 	beq.w	80085c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008462:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a59      	ldr	r2, [pc, #356]	; (80085d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d101      	bne.n	8008472 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800846e:	4b59      	ldr	r3, [pc, #356]	; (80085d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8008470:	e001      	b.n	8008476 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8008472:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008476:	685a      	ldr	r2, [r3, #4]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4954      	ldr	r1, [pc, #336]	; (80085d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800847e:	428b      	cmp	r3, r1
 8008480:	d101      	bne.n	8008486 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8008482:	4b54      	ldr	r3, [pc, #336]	; (80085d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8008484:	e001      	b.n	800848a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8008486:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800848a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800848e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008490:	2300      	movs	r3, #0
 8008492:	60bb      	str	r3, [r7, #8]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	60bb      	str	r3, [r7, #8]
 800849c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2201      	movs	r2, #1
 80084a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084aa:	f043 0204 	orr.w	r2, r3, #4
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f7ff fdf7 	bl	80080a6 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80084b8:	e084      	b.n	80085c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	f003 0302 	and.w	r3, r3, #2
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d107      	bne.n	80084d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d002      	beq.n	80084d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f8bc 	bl	800864c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d107      	bne.n	80084ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d002      	beq.n	80084ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 f8fb 	bl	80086e4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f4:	2b40      	cmp	r3, #64	; 0x40
 80084f6:	d12f      	bne.n	8008558 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	f003 0320 	and.w	r3, r3, #32
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d02a      	beq.n	8008558 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	685a      	ldr	r2, [r3, #4]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008510:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a2e      	ldr	r2, [pc, #184]	; (80085d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d101      	bne.n	8008520 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800851c:	4b2d      	ldr	r3, [pc, #180]	; (80085d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800851e:	e001      	b.n	8008524 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8008520:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008524:	685a      	ldr	r2, [r3, #4]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4929      	ldr	r1, [pc, #164]	; (80085d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800852c:	428b      	cmp	r3, r1
 800852e:	d101      	bne.n	8008534 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8008530:	4b28      	ldr	r3, [pc, #160]	; (80085d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8008532:	e001      	b.n	8008538 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8008534:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008538:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800853c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2201      	movs	r2, #1
 8008542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800854a:	f043 0202 	orr.w	r2, r3, #2
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7ff fda7 	bl	80080a6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	f003 0308 	and.w	r3, r3, #8
 800855e:	2b08      	cmp	r3, #8
 8008560:	d131      	bne.n	80085c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	f003 0320 	and.w	r3, r3, #32
 8008568:	2b00      	cmp	r3, #0
 800856a:	d02c      	beq.n	80085c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a17      	ldr	r2, [pc, #92]	; (80085d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d101      	bne.n	800857a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8008576:	4b17      	ldr	r3, [pc, #92]	; (80085d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8008578:	e001      	b.n	800857e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800857a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4912      	ldr	r1, [pc, #72]	; (80085d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008586:	428b      	cmp	r3, r1
 8008588:	d101      	bne.n	800858e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800858a:	4b12      	ldr	r3, [pc, #72]	; (80085d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800858c:	e001      	b.n	8008592 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800858e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008592:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008596:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	685a      	ldr	r2, [r3, #4]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80085a6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085b4:	f043 0204 	orr.w	r2, r3, #4
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f7ff fd72 	bl	80080a6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80085c2:	e000      	b.n	80085c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80085c4:	bf00      	nop
}
 80085c6:	bf00      	nop
 80085c8:	3720      	adds	r7, #32
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	40003800 	.word	0x40003800
 80085d4:	40003400 	.word	0x40003400

080085d8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bc80      	pop	{r7}
 80085e8:	4770      	bx	lr

080085ea <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b082      	sub	sp, #8
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f6:	1c99      	adds	r1, r3, #2
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	6251      	str	r1, [r2, #36]	; 0x24
 80085fc:	881a      	ldrh	r2, [r3, #0]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008608:	b29b      	uxth	r3, r3
 800860a:	3b01      	subs	r3, #1
 800860c:	b29a      	uxth	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008616:	b29b      	uxth	r3, r3
 8008618:	2b00      	cmp	r3, #0
 800861a:	d113      	bne.n	8008644 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	685a      	ldr	r2, [r3, #4]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800862a:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008630:	b29b      	uxth	r3, r3
 8008632:	2b00      	cmp	r3, #0
 8008634:	d106      	bne.n	8008644 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7ff ffca 	bl	80085d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008644:	bf00      	nop
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008658:	1c99      	adds	r1, r3, #2
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	6251      	str	r1, [r2, #36]	; 0x24
 800865e:	8819      	ldrh	r1, [r3, #0]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a1d      	ldr	r2, [pc, #116]	; (80086dc <I2SEx_TxISR_I2SExt+0x90>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d101      	bne.n	800866e <I2SEx_TxISR_I2SExt+0x22>
 800866a:	4b1d      	ldr	r3, [pc, #116]	; (80086e0 <I2SEx_TxISR_I2SExt+0x94>)
 800866c:	e001      	b.n	8008672 <I2SEx_TxISR_I2SExt+0x26>
 800866e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008672:	460a      	mov	r2, r1
 8008674:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800867a:	b29b      	uxth	r3, r3
 800867c:	3b01      	subs	r3, #1
 800867e:	b29a      	uxth	r2, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008688:	b29b      	uxth	r3, r3
 800868a:	2b00      	cmp	r3, #0
 800868c:	d121      	bne.n	80086d2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a12      	ldr	r2, [pc, #72]	; (80086dc <I2SEx_TxISR_I2SExt+0x90>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d101      	bne.n	800869c <I2SEx_TxISR_I2SExt+0x50>
 8008698:	4b11      	ldr	r3, [pc, #68]	; (80086e0 <I2SEx_TxISR_I2SExt+0x94>)
 800869a:	e001      	b.n	80086a0 <I2SEx_TxISR_I2SExt+0x54>
 800869c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80086a0:	685a      	ldr	r2, [r3, #4]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	490d      	ldr	r1, [pc, #52]	; (80086dc <I2SEx_TxISR_I2SExt+0x90>)
 80086a8:	428b      	cmp	r3, r1
 80086aa:	d101      	bne.n	80086b0 <I2SEx_TxISR_I2SExt+0x64>
 80086ac:	4b0c      	ldr	r3, [pc, #48]	; (80086e0 <I2SEx_TxISR_I2SExt+0x94>)
 80086ae:	e001      	b.n	80086b4 <I2SEx_TxISR_I2SExt+0x68>
 80086b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80086b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80086b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80086be:	b29b      	uxth	r3, r3
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d106      	bne.n	80086d2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7ff ff83 	bl	80085d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80086d2:	bf00      	nop
 80086d4:	3708      	adds	r7, #8
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	40003800 	.word	0x40003800
 80086e0:	40003400 	.word	0x40003400

080086e4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68d8      	ldr	r0, [r3, #12]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f6:	1c99      	adds	r1, r3, #2
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	62d1      	str	r1, [r2, #44]	; 0x2c
 80086fc:	b282      	uxth	r2, r0
 80086fe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008704:	b29b      	uxth	r3, r3
 8008706:	3b01      	subs	r3, #1
 8008708:	b29a      	uxth	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008712:	b29b      	uxth	r3, r3
 8008714:	2b00      	cmp	r3, #0
 8008716:	d113      	bne.n	8008740 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	685a      	ldr	r2, [r3, #4]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008726:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800872c:	b29b      	uxth	r3, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	d106      	bne.n	8008740 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7ff ff4c 	bl	80085d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008740:	bf00      	nop
 8008742:	3708      	adds	r7, #8
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a20      	ldr	r2, [pc, #128]	; (80087d8 <I2SEx_RxISR_I2SExt+0x90>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d101      	bne.n	800875e <I2SEx_RxISR_I2SExt+0x16>
 800875a:	4b20      	ldr	r3, [pc, #128]	; (80087dc <I2SEx_RxISR_I2SExt+0x94>)
 800875c:	e001      	b.n	8008762 <I2SEx_RxISR_I2SExt+0x1a>
 800875e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008762:	68d8      	ldr	r0, [r3, #12]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008768:	1c99      	adds	r1, r3, #2
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800876e:	b282      	uxth	r2, r0
 8008770:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008776:	b29b      	uxth	r3, r3
 8008778:	3b01      	subs	r3, #1
 800877a:	b29a      	uxth	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008784:	b29b      	uxth	r3, r3
 8008786:	2b00      	cmp	r3, #0
 8008788:	d121      	bne.n	80087ce <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a12      	ldr	r2, [pc, #72]	; (80087d8 <I2SEx_RxISR_I2SExt+0x90>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d101      	bne.n	8008798 <I2SEx_RxISR_I2SExt+0x50>
 8008794:	4b11      	ldr	r3, [pc, #68]	; (80087dc <I2SEx_RxISR_I2SExt+0x94>)
 8008796:	e001      	b.n	800879c <I2SEx_RxISR_I2SExt+0x54>
 8008798:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800879c:	685a      	ldr	r2, [r3, #4]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	490d      	ldr	r1, [pc, #52]	; (80087d8 <I2SEx_RxISR_I2SExt+0x90>)
 80087a4:	428b      	cmp	r3, r1
 80087a6:	d101      	bne.n	80087ac <I2SEx_RxISR_I2SExt+0x64>
 80087a8:	4b0c      	ldr	r3, [pc, #48]	; (80087dc <I2SEx_RxISR_I2SExt+0x94>)
 80087aa:	e001      	b.n	80087b0 <I2SEx_RxISR_I2SExt+0x68>
 80087ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80087b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80087b4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d106      	bne.n	80087ce <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f7ff ff05 	bl	80085d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80087ce:	bf00      	nop
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	40003800 	.word	0x40003800
 80087dc:	40003400 	.word	0x40003400

080087e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b086      	sub	sp, #24
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d101      	bne.n	80087f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e264      	b.n	8008cbc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 0301 	and.w	r3, r3, #1
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d075      	beq.n	80088ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80087fe:	4ba3      	ldr	r3, [pc, #652]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	f003 030c 	and.w	r3, r3, #12
 8008806:	2b04      	cmp	r3, #4
 8008808:	d00c      	beq.n	8008824 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800880a:	4ba0      	ldr	r3, [pc, #640]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008812:	2b08      	cmp	r3, #8
 8008814:	d112      	bne.n	800883c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008816:	4b9d      	ldr	r3, [pc, #628]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800881e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008822:	d10b      	bne.n	800883c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008824:	4b99      	ldr	r3, [pc, #612]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800882c:	2b00      	cmp	r3, #0
 800882e:	d05b      	beq.n	80088e8 <HAL_RCC_OscConfig+0x108>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d157      	bne.n	80088e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	e23f      	b.n	8008cbc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008844:	d106      	bne.n	8008854 <HAL_RCC_OscConfig+0x74>
 8008846:	4b91      	ldr	r3, [pc, #580]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a90      	ldr	r2, [pc, #576]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 800884c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008850:	6013      	str	r3, [r2, #0]
 8008852:	e01d      	b.n	8008890 <HAL_RCC_OscConfig+0xb0>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800885c:	d10c      	bne.n	8008878 <HAL_RCC_OscConfig+0x98>
 800885e:	4b8b      	ldr	r3, [pc, #556]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a8a      	ldr	r2, [pc, #552]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 8008864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008868:	6013      	str	r3, [r2, #0]
 800886a:	4b88      	ldr	r3, [pc, #544]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a87      	ldr	r2, [pc, #540]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 8008870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008874:	6013      	str	r3, [r2, #0]
 8008876:	e00b      	b.n	8008890 <HAL_RCC_OscConfig+0xb0>
 8008878:	4b84      	ldr	r3, [pc, #528]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a83      	ldr	r2, [pc, #524]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 800887e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008882:	6013      	str	r3, [r2, #0]
 8008884:	4b81      	ldr	r3, [pc, #516]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a80      	ldr	r2, [pc, #512]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 800888a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800888e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d013      	beq.n	80088c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008898:	f7fb fe90 	bl	80045bc <HAL_GetTick>
 800889c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800889e:	e008      	b.n	80088b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80088a0:	f7fb fe8c 	bl	80045bc <HAL_GetTick>
 80088a4:	4602      	mov	r2, r0
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	2b64      	cmp	r3, #100	; 0x64
 80088ac:	d901      	bls.n	80088b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e204      	b.n	8008cbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088b2:	4b76      	ldr	r3, [pc, #472]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d0f0      	beq.n	80088a0 <HAL_RCC_OscConfig+0xc0>
 80088be:	e014      	b.n	80088ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088c0:	f7fb fe7c 	bl	80045bc <HAL_GetTick>
 80088c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088c6:	e008      	b.n	80088da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80088c8:	f7fb fe78 	bl	80045bc <HAL_GetTick>
 80088cc:	4602      	mov	r2, r0
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	2b64      	cmp	r3, #100	; 0x64
 80088d4:	d901      	bls.n	80088da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80088d6:	2303      	movs	r3, #3
 80088d8:	e1f0      	b.n	8008cbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088da:	4b6c      	ldr	r3, [pc, #432]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1f0      	bne.n	80088c8 <HAL_RCC_OscConfig+0xe8>
 80088e6:	e000      	b.n	80088ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 0302 	and.w	r3, r3, #2
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d063      	beq.n	80089be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80088f6:	4b65      	ldr	r3, [pc, #404]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	f003 030c 	and.w	r3, r3, #12
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00b      	beq.n	800891a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008902:	4b62      	ldr	r3, [pc, #392]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800890a:	2b08      	cmp	r3, #8
 800890c:	d11c      	bne.n	8008948 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800890e:	4b5f      	ldr	r3, [pc, #380]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008916:	2b00      	cmp	r3, #0
 8008918:	d116      	bne.n	8008948 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800891a:	4b5c      	ldr	r3, [pc, #368]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 0302 	and.w	r3, r3, #2
 8008922:	2b00      	cmp	r3, #0
 8008924:	d005      	beq.n	8008932 <HAL_RCC_OscConfig+0x152>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	2b01      	cmp	r3, #1
 800892c:	d001      	beq.n	8008932 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e1c4      	b.n	8008cbc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008932:	4b56      	ldr	r3, [pc, #344]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	00db      	lsls	r3, r3, #3
 8008940:	4952      	ldr	r1, [pc, #328]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 8008942:	4313      	orrs	r3, r2
 8008944:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008946:	e03a      	b.n	80089be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d020      	beq.n	8008992 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008950:	4b4f      	ldr	r3, [pc, #316]	; (8008a90 <HAL_RCC_OscConfig+0x2b0>)
 8008952:	2201      	movs	r2, #1
 8008954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008956:	f7fb fe31 	bl	80045bc <HAL_GetTick>
 800895a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800895c:	e008      	b.n	8008970 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800895e:	f7fb fe2d 	bl	80045bc <HAL_GetTick>
 8008962:	4602      	mov	r2, r0
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	2b02      	cmp	r3, #2
 800896a:	d901      	bls.n	8008970 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800896c:	2303      	movs	r3, #3
 800896e:	e1a5      	b.n	8008cbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008970:	4b46      	ldr	r3, [pc, #280]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 0302 	and.w	r3, r3, #2
 8008978:	2b00      	cmp	r3, #0
 800897a:	d0f0      	beq.n	800895e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800897c:	4b43      	ldr	r3, [pc, #268]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	00db      	lsls	r3, r3, #3
 800898a:	4940      	ldr	r1, [pc, #256]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 800898c:	4313      	orrs	r3, r2
 800898e:	600b      	str	r3, [r1, #0]
 8008990:	e015      	b.n	80089be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008992:	4b3f      	ldr	r3, [pc, #252]	; (8008a90 <HAL_RCC_OscConfig+0x2b0>)
 8008994:	2200      	movs	r2, #0
 8008996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008998:	f7fb fe10 	bl	80045bc <HAL_GetTick>
 800899c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800899e:	e008      	b.n	80089b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80089a0:	f7fb fe0c 	bl	80045bc <HAL_GetTick>
 80089a4:	4602      	mov	r2, r0
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d901      	bls.n	80089b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80089ae:	2303      	movs	r3, #3
 80089b0:	e184      	b.n	8008cbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80089b2:	4b36      	ldr	r3, [pc, #216]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 0302 	and.w	r3, r3, #2
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1f0      	bne.n	80089a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 0308 	and.w	r3, r3, #8
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d030      	beq.n	8008a2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d016      	beq.n	8008a00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80089d2:	4b30      	ldr	r3, [pc, #192]	; (8008a94 <HAL_RCC_OscConfig+0x2b4>)
 80089d4:	2201      	movs	r2, #1
 80089d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089d8:	f7fb fdf0 	bl	80045bc <HAL_GetTick>
 80089dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089de:	e008      	b.n	80089f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089e0:	f7fb fdec 	bl	80045bc <HAL_GetTick>
 80089e4:	4602      	mov	r2, r0
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d901      	bls.n	80089f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e164      	b.n	8008cbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089f2:	4b26      	ldr	r3, [pc, #152]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 80089f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089f6:	f003 0302 	and.w	r3, r3, #2
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d0f0      	beq.n	80089e0 <HAL_RCC_OscConfig+0x200>
 80089fe:	e015      	b.n	8008a2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a00:	4b24      	ldr	r3, [pc, #144]	; (8008a94 <HAL_RCC_OscConfig+0x2b4>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a06:	f7fb fdd9 	bl	80045bc <HAL_GetTick>
 8008a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a0c:	e008      	b.n	8008a20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a0e:	f7fb fdd5 	bl	80045bc <HAL_GetTick>
 8008a12:	4602      	mov	r2, r0
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d901      	bls.n	8008a20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008a1c:	2303      	movs	r3, #3
 8008a1e:	e14d      	b.n	8008cbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a20:	4b1a      	ldr	r3, [pc, #104]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 8008a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a24:	f003 0302 	and.w	r3, r3, #2
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1f0      	bne.n	8008a0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 0304 	and.w	r3, r3, #4
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f000 80a0 	beq.w	8008b7a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a3e:	4b13      	ldr	r3, [pc, #76]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 8008a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10f      	bne.n	8008a6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	60bb      	str	r3, [r7, #8]
 8008a4e:	4b0f      	ldr	r3, [pc, #60]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 8008a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a52:	4a0e      	ldr	r2, [pc, #56]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 8008a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a58:	6413      	str	r3, [r2, #64]	; 0x40
 8008a5a:	4b0c      	ldr	r3, [pc, #48]	; (8008a8c <HAL_RCC_OscConfig+0x2ac>)
 8008a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a62:	60bb      	str	r3, [r7, #8]
 8008a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a66:	2301      	movs	r3, #1
 8008a68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a6a:	4b0b      	ldr	r3, [pc, #44]	; (8008a98 <HAL_RCC_OscConfig+0x2b8>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d121      	bne.n	8008aba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a76:	4b08      	ldr	r3, [pc, #32]	; (8008a98 <HAL_RCC_OscConfig+0x2b8>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a07      	ldr	r2, [pc, #28]	; (8008a98 <HAL_RCC_OscConfig+0x2b8>)
 8008a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a82:	f7fb fd9b 	bl	80045bc <HAL_GetTick>
 8008a86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a88:	e011      	b.n	8008aae <HAL_RCC_OscConfig+0x2ce>
 8008a8a:	bf00      	nop
 8008a8c:	40023800 	.word	0x40023800
 8008a90:	42470000 	.word	0x42470000
 8008a94:	42470e80 	.word	0x42470e80
 8008a98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a9c:	f7fb fd8e 	bl	80045bc <HAL_GetTick>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d901      	bls.n	8008aae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e106      	b.n	8008cbc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008aae:	4b85      	ldr	r3, [pc, #532]	; (8008cc4 <HAL_RCC_OscConfig+0x4e4>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d0f0      	beq.n	8008a9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d106      	bne.n	8008ad0 <HAL_RCC_OscConfig+0x2f0>
 8008ac2:	4b81      	ldr	r3, [pc, #516]	; (8008cc8 <HAL_RCC_OscConfig+0x4e8>)
 8008ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ac6:	4a80      	ldr	r2, [pc, #512]	; (8008cc8 <HAL_RCC_OscConfig+0x4e8>)
 8008ac8:	f043 0301 	orr.w	r3, r3, #1
 8008acc:	6713      	str	r3, [r2, #112]	; 0x70
 8008ace:	e01c      	b.n	8008b0a <HAL_RCC_OscConfig+0x32a>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	2b05      	cmp	r3, #5
 8008ad6:	d10c      	bne.n	8008af2 <HAL_RCC_OscConfig+0x312>
 8008ad8:	4b7b      	ldr	r3, [pc, #492]	; (8008cc8 <HAL_RCC_OscConfig+0x4e8>)
 8008ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008adc:	4a7a      	ldr	r2, [pc, #488]	; (8008cc8 <HAL_RCC_OscConfig+0x4e8>)
 8008ade:	f043 0304 	orr.w	r3, r3, #4
 8008ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8008ae4:	4b78      	ldr	r3, [pc, #480]	; (8008cc8 <HAL_RCC_OscConfig+0x4e8>)
 8008ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ae8:	4a77      	ldr	r2, [pc, #476]	; (8008cc8 <HAL_RCC_OscConfig+0x4e8>)
 8008aea:	f043 0301 	orr.w	r3, r3, #1
 8008aee:	6713      	str	r3, [r2, #112]	; 0x70
 8008af0:	e00b      	b.n	8008b0a <HAL_RCC_OscConfig+0x32a>
 8008af2:	4b75      	ldr	r3, [pc, #468]	; (8008cc8 <HAL_RCC_OscConfig+0x4e8>)
 8008af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008af6:	4a74      	ldr	r2, [pc, #464]	; (8008cc8 <HAL_RCC_OscConfig+0x4e8>)
 8008af8:	f023 0301 	bic.w	r3, r3, #1
 8008afc:	6713      	str	r3, [r2, #112]	; 0x70
 8008afe:	4b72      	ldr	r3, [pc, #456]	; (8008cc8 <HAL_RCC_OscConfig+0x4e8>)
 8008b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b02:	4a71      	ldr	r2, [pc, #452]	; (8008cc8 <HAL_RCC_OscConfig+0x4e8>)
 8008b04:	f023 0304 	bic.w	r3, r3, #4
 8008b08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d015      	beq.n	8008b3e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b12:	f7fb fd53 	bl	80045bc <HAL_GetTick>
 8008b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b18:	e00a      	b.n	8008b30 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b1a:	f7fb fd4f 	bl	80045bc <HAL_GetTick>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	1ad3      	subs	r3, r2, r3
 8008b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d901      	bls.n	8008b30 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	e0c5      	b.n	8008cbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b30:	4b65      	ldr	r3, [pc, #404]	; (8008cc8 <HAL_RCC_OscConfig+0x4e8>)
 8008b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b34:	f003 0302 	and.w	r3, r3, #2
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d0ee      	beq.n	8008b1a <HAL_RCC_OscConfig+0x33a>
 8008b3c:	e014      	b.n	8008b68 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b3e:	f7fb fd3d 	bl	80045bc <HAL_GetTick>
 8008b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b44:	e00a      	b.n	8008b5c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b46:	f7fb fd39 	bl	80045bc <HAL_GetTick>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	1ad3      	subs	r3, r2, r3
 8008b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d901      	bls.n	8008b5c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	e0af      	b.n	8008cbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b5c:	4b5a      	ldr	r3, [pc, #360]	; (8008cc8 <HAL_RCC_OscConfig+0x4e8>)
 8008b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b60:	f003 0302 	and.w	r3, r3, #2
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1ee      	bne.n	8008b46 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008b68:	7dfb      	ldrb	r3, [r7, #23]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d105      	bne.n	8008b7a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b6e:	4b56      	ldr	r3, [pc, #344]	; (8008cc8 <HAL_RCC_OscConfig+0x4e8>)
 8008b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b72:	4a55      	ldr	r2, [pc, #340]	; (8008cc8 <HAL_RCC_OscConfig+0x4e8>)
 8008b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	f000 809b 	beq.w	8008cba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008b84:	4b50      	ldr	r3, [pc, #320]	; (8008cc8 <HAL_RCC_OscConfig+0x4e8>)
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	f003 030c 	and.w	r3, r3, #12
 8008b8c:	2b08      	cmp	r3, #8
 8008b8e:	d05c      	beq.n	8008c4a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	699b      	ldr	r3, [r3, #24]
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d141      	bne.n	8008c1c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b98:	4b4c      	ldr	r3, [pc, #304]	; (8008ccc <HAL_RCC_OscConfig+0x4ec>)
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b9e:	f7fb fd0d 	bl	80045bc <HAL_GetTick>
 8008ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ba4:	e008      	b.n	8008bb8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ba6:	f7fb fd09 	bl	80045bc <HAL_GetTick>
 8008baa:	4602      	mov	r2, r0
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	1ad3      	subs	r3, r2, r3
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d901      	bls.n	8008bb8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008bb4:	2303      	movs	r3, #3
 8008bb6:	e081      	b.n	8008cbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bb8:	4b43      	ldr	r3, [pc, #268]	; (8008cc8 <HAL_RCC_OscConfig+0x4e8>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1f0      	bne.n	8008ba6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	69da      	ldr	r2, [r3, #28]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a1b      	ldr	r3, [r3, #32]
 8008bcc:	431a      	orrs	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd2:	019b      	lsls	r3, r3, #6
 8008bd4:	431a      	orrs	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bda:	085b      	lsrs	r3, r3, #1
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	041b      	lsls	r3, r3, #16
 8008be0:	431a      	orrs	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be6:	061b      	lsls	r3, r3, #24
 8008be8:	4937      	ldr	r1, [pc, #220]	; (8008cc8 <HAL_RCC_OscConfig+0x4e8>)
 8008bea:	4313      	orrs	r3, r2
 8008bec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008bee:	4b37      	ldr	r3, [pc, #220]	; (8008ccc <HAL_RCC_OscConfig+0x4ec>)
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bf4:	f7fb fce2 	bl	80045bc <HAL_GetTick>
 8008bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bfa:	e008      	b.n	8008c0e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bfc:	f7fb fcde 	bl	80045bc <HAL_GetTick>
 8008c00:	4602      	mov	r2, r0
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d901      	bls.n	8008c0e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e056      	b.n	8008cbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c0e:	4b2e      	ldr	r3, [pc, #184]	; (8008cc8 <HAL_RCC_OscConfig+0x4e8>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d0f0      	beq.n	8008bfc <HAL_RCC_OscConfig+0x41c>
 8008c1a:	e04e      	b.n	8008cba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c1c:	4b2b      	ldr	r3, [pc, #172]	; (8008ccc <HAL_RCC_OscConfig+0x4ec>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c22:	f7fb fccb 	bl	80045bc <HAL_GetTick>
 8008c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c28:	e008      	b.n	8008c3c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c2a:	f7fb fcc7 	bl	80045bc <HAL_GetTick>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	1ad3      	subs	r3, r2, r3
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d901      	bls.n	8008c3c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	e03f      	b.n	8008cbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c3c:	4b22      	ldr	r3, [pc, #136]	; (8008cc8 <HAL_RCC_OscConfig+0x4e8>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1f0      	bne.n	8008c2a <HAL_RCC_OscConfig+0x44a>
 8008c48:	e037      	b.n	8008cba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	699b      	ldr	r3, [r3, #24]
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d101      	bne.n	8008c56 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e032      	b.n	8008cbc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008c56:	4b1c      	ldr	r3, [pc, #112]	; (8008cc8 <HAL_RCC_OscConfig+0x4e8>)
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d028      	beq.n	8008cb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d121      	bne.n	8008cb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d11a      	bne.n	8008cb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008c86:	4013      	ands	r3, r2
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008c8c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d111      	bne.n	8008cb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c9c:	085b      	lsrs	r3, r3, #1
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d107      	bne.n	8008cb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d001      	beq.n	8008cba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e000      	b.n	8008cbc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3718      	adds	r7, #24
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	40007000 	.word	0x40007000
 8008cc8:	40023800 	.word	0x40023800
 8008ccc:	42470060 	.word	0x42470060

08008cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d101      	bne.n	8008ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e0cc      	b.n	8008e7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008ce4:	4b68      	ldr	r3, [pc, #416]	; (8008e88 <HAL_RCC_ClockConfig+0x1b8>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 0307 	and.w	r3, r3, #7
 8008cec:	683a      	ldr	r2, [r7, #0]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d90c      	bls.n	8008d0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cf2:	4b65      	ldr	r3, [pc, #404]	; (8008e88 <HAL_RCC_ClockConfig+0x1b8>)
 8008cf4:	683a      	ldr	r2, [r7, #0]
 8008cf6:	b2d2      	uxtb	r2, r2
 8008cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cfa:	4b63      	ldr	r3, [pc, #396]	; (8008e88 <HAL_RCC_ClockConfig+0x1b8>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 0307 	and.w	r3, r3, #7
 8008d02:	683a      	ldr	r2, [r7, #0]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d001      	beq.n	8008d0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e0b8      	b.n	8008e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 0302 	and.w	r3, r3, #2
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d020      	beq.n	8008d5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f003 0304 	and.w	r3, r3, #4
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d005      	beq.n	8008d30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d24:	4b59      	ldr	r3, [pc, #356]	; (8008e8c <HAL_RCC_ClockConfig+0x1bc>)
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	4a58      	ldr	r2, [pc, #352]	; (8008e8c <HAL_RCC_ClockConfig+0x1bc>)
 8008d2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008d2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 0308 	and.w	r3, r3, #8
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d005      	beq.n	8008d48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d3c:	4b53      	ldr	r3, [pc, #332]	; (8008e8c <HAL_RCC_ClockConfig+0x1bc>)
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	4a52      	ldr	r2, [pc, #328]	; (8008e8c <HAL_RCC_ClockConfig+0x1bc>)
 8008d42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008d46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d48:	4b50      	ldr	r3, [pc, #320]	; (8008e8c <HAL_RCC_ClockConfig+0x1bc>)
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	494d      	ldr	r1, [pc, #308]	; (8008e8c <HAL_RCC_ClockConfig+0x1bc>)
 8008d56:	4313      	orrs	r3, r2
 8008d58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 0301 	and.w	r3, r3, #1
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d044      	beq.n	8008df0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d107      	bne.n	8008d7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d6e:	4b47      	ldr	r3, [pc, #284]	; (8008e8c <HAL_RCC_ClockConfig+0x1bc>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d119      	bne.n	8008dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e07f      	b.n	8008e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	d003      	beq.n	8008d8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d8a:	2b03      	cmp	r3, #3
 8008d8c:	d107      	bne.n	8008d9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d8e:	4b3f      	ldr	r3, [pc, #252]	; (8008e8c <HAL_RCC_ClockConfig+0x1bc>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d109      	bne.n	8008dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e06f      	b.n	8008e7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d9e:	4b3b      	ldr	r3, [pc, #236]	; (8008e8c <HAL_RCC_ClockConfig+0x1bc>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f003 0302 	and.w	r3, r3, #2
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d101      	bne.n	8008dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e067      	b.n	8008e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008dae:	4b37      	ldr	r3, [pc, #220]	; (8008e8c <HAL_RCC_ClockConfig+0x1bc>)
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	f023 0203 	bic.w	r2, r3, #3
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	4934      	ldr	r1, [pc, #208]	; (8008e8c <HAL_RCC_ClockConfig+0x1bc>)
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008dc0:	f7fb fbfc 	bl	80045bc <HAL_GetTick>
 8008dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dc6:	e00a      	b.n	8008dde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008dc8:	f7fb fbf8 	bl	80045bc <HAL_GetTick>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d901      	bls.n	8008dde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	e04f      	b.n	8008e7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dde:	4b2b      	ldr	r3, [pc, #172]	; (8008e8c <HAL_RCC_ClockConfig+0x1bc>)
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	f003 020c 	and.w	r2, r3, #12
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d1eb      	bne.n	8008dc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008df0:	4b25      	ldr	r3, [pc, #148]	; (8008e88 <HAL_RCC_ClockConfig+0x1b8>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 0307 	and.w	r3, r3, #7
 8008df8:	683a      	ldr	r2, [r7, #0]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d20c      	bcs.n	8008e18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dfe:	4b22      	ldr	r3, [pc, #136]	; (8008e88 <HAL_RCC_ClockConfig+0x1b8>)
 8008e00:	683a      	ldr	r2, [r7, #0]
 8008e02:	b2d2      	uxtb	r2, r2
 8008e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e06:	4b20      	ldr	r3, [pc, #128]	; (8008e88 <HAL_RCC_ClockConfig+0x1b8>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 0307 	and.w	r3, r3, #7
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d001      	beq.n	8008e18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	e032      	b.n	8008e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 0304 	and.w	r3, r3, #4
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d008      	beq.n	8008e36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e24:	4b19      	ldr	r3, [pc, #100]	; (8008e8c <HAL_RCC_ClockConfig+0x1bc>)
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	4916      	ldr	r1, [pc, #88]	; (8008e8c <HAL_RCC_ClockConfig+0x1bc>)
 8008e32:	4313      	orrs	r3, r2
 8008e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f003 0308 	and.w	r3, r3, #8
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d009      	beq.n	8008e56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008e42:	4b12      	ldr	r3, [pc, #72]	; (8008e8c <HAL_RCC_ClockConfig+0x1bc>)
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	00db      	lsls	r3, r3, #3
 8008e50:	490e      	ldr	r1, [pc, #56]	; (8008e8c <HAL_RCC_ClockConfig+0x1bc>)
 8008e52:	4313      	orrs	r3, r2
 8008e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008e56:	f000 f821 	bl	8008e9c <HAL_RCC_GetSysClockFreq>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	4b0b      	ldr	r3, [pc, #44]	; (8008e8c <HAL_RCC_ClockConfig+0x1bc>)
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	091b      	lsrs	r3, r3, #4
 8008e62:	f003 030f 	and.w	r3, r3, #15
 8008e66:	490a      	ldr	r1, [pc, #40]	; (8008e90 <HAL_RCC_ClockConfig+0x1c0>)
 8008e68:	5ccb      	ldrb	r3, [r1, r3]
 8008e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e6e:	4a09      	ldr	r2, [pc, #36]	; (8008e94 <HAL_RCC_ClockConfig+0x1c4>)
 8008e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008e72:	4b09      	ldr	r3, [pc, #36]	; (8008e98 <HAL_RCC_ClockConfig+0x1c8>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7fb fb5e 	bl	8004538 <HAL_InitTick>

  return HAL_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3710      	adds	r7, #16
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	40023c00 	.word	0x40023c00
 8008e8c:	40023800 	.word	0x40023800
 8008e90:	080101d0 	.word	0x080101d0
 8008e94:	20000000 	.word	0x20000000
 8008e98:	20000004 	.word	0x20000004

08008e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008ea0:	b084      	sub	sp, #16
 8008ea2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	607b      	str	r3, [r7, #4]
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	60fb      	str	r3, [r7, #12]
 8008eac:	2300      	movs	r3, #0
 8008eae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008eb4:	4b67      	ldr	r3, [pc, #412]	; (8009054 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	f003 030c 	and.w	r3, r3, #12
 8008ebc:	2b08      	cmp	r3, #8
 8008ebe:	d00d      	beq.n	8008edc <HAL_RCC_GetSysClockFreq+0x40>
 8008ec0:	2b08      	cmp	r3, #8
 8008ec2:	f200 80bd 	bhi.w	8009040 <HAL_RCC_GetSysClockFreq+0x1a4>
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d002      	beq.n	8008ed0 <HAL_RCC_GetSysClockFreq+0x34>
 8008eca:	2b04      	cmp	r3, #4
 8008ecc:	d003      	beq.n	8008ed6 <HAL_RCC_GetSysClockFreq+0x3a>
 8008ece:	e0b7      	b.n	8009040 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ed0:	4b61      	ldr	r3, [pc, #388]	; (8009058 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008ed2:	60bb      	str	r3, [r7, #8]
       break;
 8008ed4:	e0b7      	b.n	8009046 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ed6:	4b61      	ldr	r3, [pc, #388]	; (800905c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008ed8:	60bb      	str	r3, [r7, #8]
      break;
 8008eda:	e0b4      	b.n	8009046 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008edc:	4b5d      	ldr	r3, [pc, #372]	; (8009054 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ee4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ee6:	4b5b      	ldr	r3, [pc, #364]	; (8009054 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d04d      	beq.n	8008f8e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ef2:	4b58      	ldr	r3, [pc, #352]	; (8009054 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	099b      	lsrs	r3, r3, #6
 8008ef8:	461a      	mov	r2, r3
 8008efa:	f04f 0300 	mov.w	r3, #0
 8008efe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008f02:	f04f 0100 	mov.w	r1, #0
 8008f06:	ea02 0800 	and.w	r8, r2, r0
 8008f0a:	ea03 0901 	and.w	r9, r3, r1
 8008f0e:	4640      	mov	r0, r8
 8008f10:	4649      	mov	r1, r9
 8008f12:	f04f 0200 	mov.w	r2, #0
 8008f16:	f04f 0300 	mov.w	r3, #0
 8008f1a:	014b      	lsls	r3, r1, #5
 8008f1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008f20:	0142      	lsls	r2, r0, #5
 8008f22:	4610      	mov	r0, r2
 8008f24:	4619      	mov	r1, r3
 8008f26:	ebb0 0008 	subs.w	r0, r0, r8
 8008f2a:	eb61 0109 	sbc.w	r1, r1, r9
 8008f2e:	f04f 0200 	mov.w	r2, #0
 8008f32:	f04f 0300 	mov.w	r3, #0
 8008f36:	018b      	lsls	r3, r1, #6
 8008f38:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008f3c:	0182      	lsls	r2, r0, #6
 8008f3e:	1a12      	subs	r2, r2, r0
 8008f40:	eb63 0301 	sbc.w	r3, r3, r1
 8008f44:	f04f 0000 	mov.w	r0, #0
 8008f48:	f04f 0100 	mov.w	r1, #0
 8008f4c:	00d9      	lsls	r1, r3, #3
 8008f4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f52:	00d0      	lsls	r0, r2, #3
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	eb12 0208 	adds.w	r2, r2, r8
 8008f5c:	eb43 0309 	adc.w	r3, r3, r9
 8008f60:	f04f 0000 	mov.w	r0, #0
 8008f64:	f04f 0100 	mov.w	r1, #0
 8008f68:	0259      	lsls	r1, r3, #9
 8008f6a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008f6e:	0250      	lsls	r0, r2, #9
 8008f70:	4602      	mov	r2, r0
 8008f72:	460b      	mov	r3, r1
 8008f74:	4610      	mov	r0, r2
 8008f76:	4619      	mov	r1, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	f04f 0300 	mov.w	r3, #0
 8008f80:	f7fa fa5a 	bl	8003438 <__aeabi_uldivmod>
 8008f84:	4602      	mov	r2, r0
 8008f86:	460b      	mov	r3, r1
 8008f88:	4613      	mov	r3, r2
 8008f8a:	60fb      	str	r3, [r7, #12]
 8008f8c:	e04a      	b.n	8009024 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f8e:	4b31      	ldr	r3, [pc, #196]	; (8009054 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	099b      	lsrs	r3, r3, #6
 8008f94:	461a      	mov	r2, r3
 8008f96:	f04f 0300 	mov.w	r3, #0
 8008f9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008f9e:	f04f 0100 	mov.w	r1, #0
 8008fa2:	ea02 0400 	and.w	r4, r2, r0
 8008fa6:	ea03 0501 	and.w	r5, r3, r1
 8008faa:	4620      	mov	r0, r4
 8008fac:	4629      	mov	r1, r5
 8008fae:	f04f 0200 	mov.w	r2, #0
 8008fb2:	f04f 0300 	mov.w	r3, #0
 8008fb6:	014b      	lsls	r3, r1, #5
 8008fb8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008fbc:	0142      	lsls	r2, r0, #5
 8008fbe:	4610      	mov	r0, r2
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	1b00      	subs	r0, r0, r4
 8008fc4:	eb61 0105 	sbc.w	r1, r1, r5
 8008fc8:	f04f 0200 	mov.w	r2, #0
 8008fcc:	f04f 0300 	mov.w	r3, #0
 8008fd0:	018b      	lsls	r3, r1, #6
 8008fd2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008fd6:	0182      	lsls	r2, r0, #6
 8008fd8:	1a12      	subs	r2, r2, r0
 8008fda:	eb63 0301 	sbc.w	r3, r3, r1
 8008fde:	f04f 0000 	mov.w	r0, #0
 8008fe2:	f04f 0100 	mov.w	r1, #0
 8008fe6:	00d9      	lsls	r1, r3, #3
 8008fe8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008fec:	00d0      	lsls	r0, r2, #3
 8008fee:	4602      	mov	r2, r0
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	1912      	adds	r2, r2, r4
 8008ff4:	eb45 0303 	adc.w	r3, r5, r3
 8008ff8:	f04f 0000 	mov.w	r0, #0
 8008ffc:	f04f 0100 	mov.w	r1, #0
 8009000:	0299      	lsls	r1, r3, #10
 8009002:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009006:	0290      	lsls	r0, r2, #10
 8009008:	4602      	mov	r2, r0
 800900a:	460b      	mov	r3, r1
 800900c:	4610      	mov	r0, r2
 800900e:	4619      	mov	r1, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	461a      	mov	r2, r3
 8009014:	f04f 0300 	mov.w	r3, #0
 8009018:	f7fa fa0e 	bl	8003438 <__aeabi_uldivmod>
 800901c:	4602      	mov	r2, r0
 800901e:	460b      	mov	r3, r1
 8009020:	4613      	mov	r3, r2
 8009022:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009024:	4b0b      	ldr	r3, [pc, #44]	; (8009054 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	0c1b      	lsrs	r3, r3, #16
 800902a:	f003 0303 	and.w	r3, r3, #3
 800902e:	3301      	adds	r3, #1
 8009030:	005b      	lsls	r3, r3, #1
 8009032:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	fbb2 f3f3 	udiv	r3, r2, r3
 800903c:	60bb      	str	r3, [r7, #8]
      break;
 800903e:	e002      	b.n	8009046 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009040:	4b05      	ldr	r3, [pc, #20]	; (8009058 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009042:	60bb      	str	r3, [r7, #8]
      break;
 8009044:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009046:	68bb      	ldr	r3, [r7, #8]
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009052:	bf00      	nop
 8009054:	40023800 	.word	0x40023800
 8009058:	00f42400 	.word	0x00f42400
 800905c:	007a1200 	.word	0x007a1200

08009060 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009060:	b480      	push	{r7}
 8009062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009064:	4b02      	ldr	r3, [pc, #8]	; (8009070 <HAL_RCC_GetHCLKFreq+0x10>)
 8009066:	681b      	ldr	r3, [r3, #0]
}
 8009068:	4618      	mov	r0, r3
 800906a:	46bd      	mov	sp, r7
 800906c:	bc80      	pop	{r7}
 800906e:	4770      	bx	lr
 8009070:	20000000 	.word	0x20000000

08009074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009078:	f7ff fff2 	bl	8009060 <HAL_RCC_GetHCLKFreq>
 800907c:	4602      	mov	r2, r0
 800907e:	4b05      	ldr	r3, [pc, #20]	; (8009094 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	0a9b      	lsrs	r3, r3, #10
 8009084:	f003 0307 	and.w	r3, r3, #7
 8009088:	4903      	ldr	r1, [pc, #12]	; (8009098 <HAL_RCC_GetPCLK1Freq+0x24>)
 800908a:	5ccb      	ldrb	r3, [r1, r3]
 800908c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009090:	4618      	mov	r0, r3
 8009092:	bd80      	pop	{r7, pc}
 8009094:	40023800 	.word	0x40023800
 8009098:	080101e0 	.word	0x080101e0

0800909c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b086      	sub	sp, #24
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80090a4:	2300      	movs	r3, #0
 80090a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80090a8:	2300      	movs	r3, #0
 80090aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f003 0301 	and.w	r3, r3, #1
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d105      	bne.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d035      	beq.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80090c4:	4b62      	ldr	r3, [pc, #392]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80090c6:	2200      	movs	r2, #0
 80090c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80090ca:	f7fb fa77 	bl	80045bc <HAL_GetTick>
 80090ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80090d0:	e008      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80090d2:	f7fb fa73 	bl	80045bc <HAL_GetTick>
 80090d6:	4602      	mov	r2, r0
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	1ad3      	subs	r3, r2, r3
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d901      	bls.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80090e0:	2303      	movs	r3, #3
 80090e2:	e0b0      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80090e4:	4b5b      	ldr	r3, [pc, #364]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1f0      	bne.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	019a      	lsls	r2, r3, #6
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	071b      	lsls	r3, r3, #28
 80090fc:	4955      	ldr	r1, [pc, #340]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80090fe:	4313      	orrs	r3, r2
 8009100:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009104:	4b52      	ldr	r3, [pc, #328]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009106:	2201      	movs	r2, #1
 8009108:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800910a:	f7fb fa57 	bl	80045bc <HAL_GetTick>
 800910e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009110:	e008      	b.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009112:	f7fb fa53 	bl	80045bc <HAL_GetTick>
 8009116:	4602      	mov	r2, r0
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	1ad3      	subs	r3, r2, r3
 800911c:	2b02      	cmp	r3, #2
 800911e:	d901      	bls.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009120:	2303      	movs	r3, #3
 8009122:	e090      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009124:	4b4b      	ldr	r3, [pc, #300]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800912c:	2b00      	cmp	r3, #0
 800912e:	d0f0      	beq.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 0302 	and.w	r3, r3, #2
 8009138:	2b00      	cmp	r3, #0
 800913a:	f000 8083 	beq.w	8009244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800913e:	2300      	movs	r3, #0
 8009140:	60fb      	str	r3, [r7, #12]
 8009142:	4b44      	ldr	r3, [pc, #272]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009146:	4a43      	ldr	r2, [pc, #268]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800914c:	6413      	str	r3, [r2, #64]	; 0x40
 800914e:	4b41      	ldr	r3, [pc, #260]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009156:	60fb      	str	r3, [r7, #12]
 8009158:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800915a:	4b3f      	ldr	r3, [pc, #252]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a3e      	ldr	r2, [pc, #248]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009164:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009166:	f7fb fa29 	bl	80045bc <HAL_GetTick>
 800916a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800916c:	e008      	b.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800916e:	f7fb fa25 	bl	80045bc <HAL_GetTick>
 8009172:	4602      	mov	r2, r0
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	1ad3      	subs	r3, r2, r3
 8009178:	2b02      	cmp	r3, #2
 800917a:	d901      	bls.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800917c:	2303      	movs	r3, #3
 800917e:	e062      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009180:	4b35      	ldr	r3, [pc, #212]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009188:	2b00      	cmp	r3, #0
 800918a:	d0f0      	beq.n	800916e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800918c:	4b31      	ldr	r3, [pc, #196]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800918e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009190:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009194:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d02f      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091a4:	693a      	ldr	r2, [r7, #16]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d028      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80091aa:	4b2a      	ldr	r3, [pc, #168]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80091ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091b2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80091b4:	4b29      	ldr	r3, [pc, #164]	; (800925c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80091b6:	2201      	movs	r2, #1
 80091b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80091ba:	4b28      	ldr	r3, [pc, #160]	; (800925c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80091bc:	2200      	movs	r2, #0
 80091be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80091c0:	4a24      	ldr	r2, [pc, #144]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80091c6:	4b23      	ldr	r3, [pc, #140]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80091c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ca:	f003 0301 	and.w	r3, r3, #1
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d114      	bne.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80091d2:	f7fb f9f3 	bl	80045bc <HAL_GetTick>
 80091d6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091d8:	e00a      	b.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091da:	f7fb f9ef 	bl	80045bc <HAL_GetTick>
 80091de:	4602      	mov	r2, r0
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d901      	bls.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80091ec:	2303      	movs	r3, #3
 80091ee:	e02a      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091f0:	4b18      	ldr	r3, [pc, #96]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80091f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091f4:	f003 0302 	and.w	r3, r3, #2
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d0ee      	beq.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009204:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009208:	d10d      	bne.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800920a:	4b12      	ldr	r3, [pc, #72]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800921a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800921e:	490d      	ldr	r1, [pc, #52]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009220:	4313      	orrs	r3, r2
 8009222:	608b      	str	r3, [r1, #8]
 8009224:	e005      	b.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009226:	4b0b      	ldr	r3, [pc, #44]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	4a0a      	ldr	r2, [pc, #40]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800922c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009230:	6093      	str	r3, [r2, #8]
 8009232:	4b08      	ldr	r3, [pc, #32]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009234:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800923e:	4905      	ldr	r1, [pc, #20]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009240:	4313      	orrs	r3, r2
 8009242:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3718      	adds	r7, #24
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	42470068 	.word	0x42470068
 8009254:	40023800 	.word	0x40023800
 8009258:	40007000 	.word	0x40007000
 800925c:	42470e40 	.word	0x42470e40

08009260 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009260:	b480      	push	{r7}
 8009262:	b087      	sub	sp, #28
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8009268:	2300      	movs	r3, #0
 800926a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800926c:	2300      	movs	r3, #0
 800926e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8009270:	2300      	movs	r3, #0
 8009272:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8009274:	2300      	movs	r3, #0
 8009276:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2b01      	cmp	r3, #1
 800927c:	d13e      	bne.n	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800927e:	4b22      	ldr	r3, [pc, #136]	; (8009308 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009286:	60fb      	str	r3, [r7, #12]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d005      	beq.n	800929a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2b01      	cmp	r3, #1
 8009292:	d12f      	bne.n	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8009294:	4b1d      	ldr	r3, [pc, #116]	; (800930c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8009296:	617b      	str	r3, [r7, #20]
          break;
 8009298:	e02f      	b.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800929a:	4b1b      	ldr	r3, [pc, #108]	; (8009308 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092a6:	d108      	bne.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80092a8:	4b17      	ldr	r3, [pc, #92]	; (8009308 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092b0:	4a17      	ldr	r2, [pc, #92]	; (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80092b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80092b6:	613b      	str	r3, [r7, #16]
 80092b8:	e007      	b.n	80092ca <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80092ba:	4b13      	ldr	r3, [pc, #76]	; (8009308 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092c2:	4a14      	ldr	r2, [pc, #80]	; (8009314 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80092c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80092c8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80092ca:	4b0f      	ldr	r3, [pc, #60]	; (8009308 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80092cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092d0:	099b      	lsrs	r3, r3, #6
 80092d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	fb02 f303 	mul.w	r3, r2, r3
 80092dc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80092de:	4b0a      	ldr	r3, [pc, #40]	; (8009308 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80092e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092e4:	0f1b      	lsrs	r3, r3, #28
 80092e6:	f003 0307 	and.w	r3, r3, #7
 80092ea:	68ba      	ldr	r2, [r7, #8]
 80092ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80092f0:	617b      	str	r3, [r7, #20]
          break;
 80092f2:	e002      	b.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80092f4:	2300      	movs	r3, #0
 80092f6:	617b      	str	r3, [r7, #20]
          break;
 80092f8:	bf00      	nop
        }
      }
      break;
 80092fa:	bf00      	nop
    }
  }
  return frequency;
 80092fc:	697b      	ldr	r3, [r7, #20]
}
 80092fe:	4618      	mov	r0, r3
 8009300:	371c      	adds	r7, #28
 8009302:	46bd      	mov	sp, r7
 8009304:	bc80      	pop	{r7}
 8009306:	4770      	bx	lr
 8009308:	40023800 	.word	0x40023800
 800930c:	00bb8000 	.word	0x00bb8000
 8009310:	007a1200 	.word	0x007a1200
 8009314:	00f42400 	.word	0x00f42400

08009318 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009318:	b084      	sub	sp, #16
 800931a:	b580      	push	{r7, lr}
 800931c:	b084      	sub	sp, #16
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
 8009322:	f107 001c 	add.w	r0, r7, #28
 8009326:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800932a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932c:	2b01      	cmp	r3, #1
 800932e:	d122      	bne.n	8009376 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009334:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800935a:	2b01      	cmp	r3, #1
 800935c:	d105      	bne.n	800936a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 f99a 	bl	80096a4 <USB_CoreReset>
 8009370:	4603      	mov	r3, r0
 8009372:	73fb      	strb	r3, [r7, #15]
 8009374:	e01a      	b.n	80093ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f98e 	bl	80096a4 <USB_CoreReset>
 8009388:	4603      	mov	r3, r0
 800938a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800938c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800938e:	2b00      	cmp	r3, #0
 8009390:	d106      	bne.n	80093a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009396:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	639a      	str	r2, [r3, #56]	; 0x38
 800939e:	e005      	b.n	80093ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80093ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d10b      	bne.n	80093ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	f043 0206 	orr.w	r2, r3, #6
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	f043 0220 	orr.w	r2, r3, #32
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80093ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3710      	adds	r7, #16
 80093d0:	46bd      	mov	sp, r7
 80093d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093d6:	b004      	add	sp, #16
 80093d8:	4770      	bx	lr

080093da <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80093da:	b480      	push	{r7}
 80093dc:	b083      	sub	sp, #12
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	f043 0201 	orr.w	r2, r3, #1
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bc80      	pop	{r7}
 80093f8:	4770      	bx	lr

080093fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80093fa:	b480      	push	{r7}
 80093fc:	b083      	sub	sp, #12
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	f023 0201 	bic.w	r2, r3, #1
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	bc80      	pop	{r7}
 8009418:	4770      	bx	lr

0800941a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b084      	sub	sp, #16
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
 8009422:	460b      	mov	r3, r1
 8009424:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009426:	2300      	movs	r3, #0
 8009428:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009436:	78fb      	ldrb	r3, [r7, #3]
 8009438:	2b01      	cmp	r3, #1
 800943a:	d115      	bne.n	8009468 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009448:	2001      	movs	r0, #1
 800944a:	f7fb f8c1 	bl	80045d0 <HAL_Delay>
      ms++;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	3301      	adds	r3, #1
 8009452:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 f917 	bl	8009688 <USB_GetMode>
 800945a:	4603      	mov	r3, r0
 800945c:	2b01      	cmp	r3, #1
 800945e:	d01e      	beq.n	800949e <USB_SetCurrentMode+0x84>
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2b31      	cmp	r3, #49	; 0x31
 8009464:	d9f0      	bls.n	8009448 <USB_SetCurrentMode+0x2e>
 8009466:	e01a      	b.n	800949e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009468:	78fb      	ldrb	r3, [r7, #3]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d115      	bne.n	800949a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800947a:	2001      	movs	r0, #1
 800947c:	f7fb f8a8 	bl	80045d0 <HAL_Delay>
      ms++;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	3301      	adds	r3, #1
 8009484:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 f8fe 	bl	8009688 <USB_GetMode>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d005      	beq.n	800949e <USB_SetCurrentMode+0x84>
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2b31      	cmp	r3, #49	; 0x31
 8009496:	d9f0      	bls.n	800947a <USB_SetCurrentMode+0x60>
 8009498:	e001      	b.n	800949e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e005      	b.n	80094aa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2b32      	cmp	r3, #50	; 0x32
 80094a2:	d101      	bne.n	80094a8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	e000      	b.n	80094aa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
	...

080094b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b085      	sub	sp, #20
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80094be:	2300      	movs	r3, #0
 80094c0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	019b      	lsls	r3, r3, #6
 80094c6:	f043 0220 	orr.w	r2, r3, #32
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	3301      	adds	r3, #1
 80094d2:	60fb      	str	r3, [r7, #12]
 80094d4:	4a08      	ldr	r2, [pc, #32]	; (80094f8 <USB_FlushTxFifo+0x44>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d901      	bls.n	80094de <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80094da:	2303      	movs	r3, #3
 80094dc:	e006      	b.n	80094ec <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	f003 0320 	and.w	r3, r3, #32
 80094e6:	2b20      	cmp	r3, #32
 80094e8:	d0f1      	beq.n	80094ce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3714      	adds	r7, #20
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bc80      	pop	{r7}
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	00030d40 	.word	0x00030d40

080094fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b085      	sub	sp, #20
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009504:	2300      	movs	r3, #0
 8009506:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2210      	movs	r2, #16
 800950c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	3301      	adds	r3, #1
 8009512:	60fb      	str	r3, [r7, #12]
 8009514:	4a08      	ldr	r2, [pc, #32]	; (8009538 <USB_FlushRxFifo+0x3c>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d901      	bls.n	800951e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800951a:	2303      	movs	r3, #3
 800951c:	e006      	b.n	800952c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	f003 0310 	and.w	r3, r3, #16
 8009526:	2b10      	cmp	r3, #16
 8009528:	d0f1      	beq.n	800950e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	3714      	adds	r7, #20
 8009530:	46bd      	mov	sp, r7
 8009532:	bc80      	pop	{r7}
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	00030d40 	.word	0x00030d40

0800953c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800953c:	b480      	push	{r7}
 800953e:	b089      	sub	sp, #36	; 0x24
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	4611      	mov	r1, r2
 8009548:	461a      	mov	r2, r3
 800954a:	460b      	mov	r3, r1
 800954c:	71fb      	strb	r3, [r7, #7]
 800954e:	4613      	mov	r3, r2
 8009550:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800955a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800955e:	2b00      	cmp	r3, #0
 8009560:	d123      	bne.n	80095aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009562:	88bb      	ldrh	r3, [r7, #4]
 8009564:	3303      	adds	r3, #3
 8009566:	089b      	lsrs	r3, r3, #2
 8009568:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800956a:	2300      	movs	r3, #0
 800956c:	61bb      	str	r3, [r7, #24]
 800956e:	e018      	b.n	80095a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009570:	79fb      	ldrb	r3, [r7, #7]
 8009572:	031a      	lsls	r2, r3, #12
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	4413      	add	r3, r2
 8009578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800957c:	461a      	mov	r2, r3
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	3301      	adds	r3, #1
 8009588:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	3301      	adds	r3, #1
 800958e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	3301      	adds	r3, #1
 8009594:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	3301      	adds	r3, #1
 800959a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	3301      	adds	r3, #1
 80095a0:	61bb      	str	r3, [r7, #24]
 80095a2:	69ba      	ldr	r2, [r7, #24]
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d3e2      	bcc.n	8009570 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3724      	adds	r7, #36	; 0x24
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bc80      	pop	{r7}
 80095b4:	4770      	bx	lr

080095b6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80095b6:	b480      	push	{r7}
 80095b8:	b08b      	sub	sp, #44	; 0x2c
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	60f8      	str	r0, [r7, #12]
 80095be:	60b9      	str	r1, [r7, #8]
 80095c0:	4613      	mov	r3, r2
 80095c2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80095cc:	88fb      	ldrh	r3, [r7, #6]
 80095ce:	089b      	lsrs	r3, r3, #2
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80095d4:	88fb      	ldrh	r3, [r7, #6]
 80095d6:	f003 0303 	and.w	r3, r3, #3
 80095da:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80095dc:	2300      	movs	r3, #0
 80095de:	623b      	str	r3, [r7, #32]
 80095e0:	e014      	b.n	800960c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ec:	601a      	str	r2, [r3, #0]
    pDest++;
 80095ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f0:	3301      	adds	r3, #1
 80095f2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80095f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f6:	3301      	adds	r3, #1
 80095f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80095fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fc:	3301      	adds	r3, #1
 80095fe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009602:	3301      	adds	r3, #1
 8009604:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009606:	6a3b      	ldr	r3, [r7, #32]
 8009608:	3301      	adds	r3, #1
 800960a:	623b      	str	r3, [r7, #32]
 800960c:	6a3a      	ldr	r2, [r7, #32]
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	429a      	cmp	r2, r3
 8009612:	d3e6      	bcc.n	80095e2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009614:	8bfb      	ldrh	r3, [r7, #30]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d01e      	beq.n	8009658 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800961a:	2300      	movs	r3, #0
 800961c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009624:	461a      	mov	r2, r3
 8009626:	f107 0310 	add.w	r3, r7, #16
 800962a:	6812      	ldr	r2, [r2, #0]
 800962c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800962e:	693a      	ldr	r2, [r7, #16]
 8009630:	6a3b      	ldr	r3, [r7, #32]
 8009632:	b2db      	uxtb	r3, r3
 8009634:	00db      	lsls	r3, r3, #3
 8009636:	fa22 f303 	lsr.w	r3, r2, r3
 800963a:	b2da      	uxtb	r2, r3
 800963c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963e:	701a      	strb	r2, [r3, #0]
      i++;
 8009640:	6a3b      	ldr	r3, [r7, #32]
 8009642:	3301      	adds	r3, #1
 8009644:	623b      	str	r3, [r7, #32]
      pDest++;
 8009646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009648:	3301      	adds	r3, #1
 800964a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800964c:	8bfb      	ldrh	r3, [r7, #30]
 800964e:	3b01      	subs	r3, #1
 8009650:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009652:	8bfb      	ldrh	r3, [r7, #30]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1ea      	bne.n	800962e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800965a:	4618      	mov	r0, r3
 800965c:	372c      	adds	r7, #44	; 0x2c
 800965e:	46bd      	mov	sp, r7
 8009660:	bc80      	pop	{r7}
 8009662:	4770      	bx	lr

08009664 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009664:	b480      	push	{r7}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	695b      	ldr	r3, [r3, #20]
 8009670:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	699b      	ldr	r3, [r3, #24]
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	4013      	ands	r3, r2
 800967a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800967c:	68fb      	ldr	r3, [r7, #12]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3714      	adds	r7, #20
 8009682:	46bd      	mov	sp, r7
 8009684:	bc80      	pop	{r7}
 8009686:	4770      	bx	lr

08009688 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	695b      	ldr	r3, [r3, #20]
 8009694:	f003 0301 	and.w	r3, r3, #1
}
 8009698:	4618      	mov	r0, r3
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	bc80      	pop	{r7}
 80096a0:	4770      	bx	lr
	...

080096a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80096ac:	2300      	movs	r3, #0
 80096ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	3301      	adds	r3, #1
 80096b4:	60fb      	str	r3, [r7, #12]
 80096b6:	4a12      	ldr	r2, [pc, #72]	; (8009700 <USB_CoreReset+0x5c>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d901      	bls.n	80096c0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80096bc:	2303      	movs	r3, #3
 80096be:	e01a      	b.n	80096f6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	daf3      	bge.n	80096b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80096c8:	2300      	movs	r3, #0
 80096ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	f043 0201 	orr.w	r2, r3, #1
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	3301      	adds	r3, #1
 80096dc:	60fb      	str	r3, [r7, #12]
 80096de:	4a08      	ldr	r2, [pc, #32]	; (8009700 <USB_CoreReset+0x5c>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d901      	bls.n	80096e8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80096e4:	2303      	movs	r3, #3
 80096e6:	e006      	b.n	80096f6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	f003 0301 	and.w	r3, r3, #1
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d0f1      	beq.n	80096d8 <USB_CoreReset+0x34>

  return HAL_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3714      	adds	r7, #20
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bc80      	pop	{r7}
 80096fe:	4770      	bx	lr
 8009700:	00030d40 	.word	0x00030d40

08009704 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009704:	b084      	sub	sp, #16
 8009706:	b580      	push	{r7, lr}
 8009708:	b084      	sub	sp, #16
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
 800970e:	f107 001c 	add.w	r0, r7, #28
 8009712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009720:	461a      	mov	r2, r3
 8009722:	2300      	movs	r3, #0
 8009724:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800972a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009736:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009742:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800974e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009752:	2b00      	cmp	r3, #0
 8009754:	d018      	beq.n	8009788 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009758:	2b01      	cmp	r3, #1
 800975a:	d10a      	bne.n	8009772 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	68ba      	ldr	r2, [r7, #8]
 8009766:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800976a:	f043 0304 	orr.w	r3, r3, #4
 800976e:	6013      	str	r3, [r2, #0]
 8009770:	e014      	b.n	800979c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009780:	f023 0304 	bic.w	r3, r3, #4
 8009784:	6013      	str	r3, [r2, #0]
 8009786:	e009      	b.n	800979c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	68ba      	ldr	r2, [r7, #8]
 8009792:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009796:	f023 0304 	bic.w	r3, r3, #4
 800979a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800979c:	2110      	movs	r1, #16
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f7ff fe88 	bl	80094b4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f7ff fea9 	bl	80094fc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80097aa:	2300      	movs	r3, #0
 80097ac:	60fb      	str	r3, [r7, #12]
 80097ae:	e015      	b.n	80097dc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	015a      	lsls	r2, r3, #5
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	4413      	add	r3, r2
 80097b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097bc:	461a      	mov	r2, r3
 80097be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097c2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	015a      	lsls	r2, r3, #5
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	4413      	add	r3, r2
 80097cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097d0:	461a      	mov	r2, r3
 80097d2:	2300      	movs	r3, #0
 80097d4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	3301      	adds	r3, #1
 80097da:	60fb      	str	r3, [r7, #12]
 80097dc:	6a3b      	ldr	r3, [r7, #32]
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d3e5      	bcc.n	80097b0 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097f0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00b      	beq.n	8009816 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009804:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4a13      	ldr	r2, [pc, #76]	; (8009858 <USB_HostInit+0x154>)
 800980a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4a13      	ldr	r2, [pc, #76]	; (800985c <USB_HostInit+0x158>)
 8009810:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009814:	e009      	b.n	800982a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2280      	movs	r2, #128	; 0x80
 800981a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a10      	ldr	r2, [pc, #64]	; (8009860 <USB_HostInit+0x15c>)
 8009820:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	4a0f      	ldr	r2, [pc, #60]	; (8009864 <USB_HostInit+0x160>)
 8009826:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800982a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982c:	2b00      	cmp	r3, #0
 800982e:	d105      	bne.n	800983c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	699b      	ldr	r3, [r3, #24]
 8009834:	f043 0210 	orr.w	r2, r3, #16
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	699a      	ldr	r2, [r3, #24]
 8009840:	4b09      	ldr	r3, [pc, #36]	; (8009868 <USB_HostInit+0x164>)
 8009842:	4313      	orrs	r3, r2
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009854:	b004      	add	sp, #16
 8009856:	4770      	bx	lr
 8009858:	01000200 	.word	0x01000200
 800985c:	00e00300 	.word	0x00e00300
 8009860:	00600080 	.word	0x00600080
 8009864:	004000e0 	.word	0x004000e0
 8009868:	a3200008 	.word	0xa3200008

0800986c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800986c:	b480      	push	{r7}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	460b      	mov	r3, r1
 8009876:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800988a:	f023 0303 	bic.w	r3, r3, #3
 800988e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	78fb      	ldrb	r3, [r7, #3]
 800989a:	f003 0303 	and.w	r3, r3, #3
 800989e:	68f9      	ldr	r1, [r7, #12]
 80098a0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80098a4:	4313      	orrs	r3, r2
 80098a6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80098a8:	78fb      	ldrb	r3, [r7, #3]
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d107      	bne.n	80098be <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098b4:	461a      	mov	r2, r3
 80098b6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80098ba:	6053      	str	r3, [r2, #4]
 80098bc:	e009      	b.n	80098d2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80098be:	78fb      	ldrb	r3, [r7, #3]
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	d106      	bne.n	80098d2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098ca:	461a      	mov	r2, r3
 80098cc:	f241 7370 	movw	r3, #6000	; 0x1770
 80098d0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3714      	adds	r7, #20
 80098d8:	46bd      	mov	sp, r7
 80098da:	bc80      	pop	{r7}
 80098dc:	4770      	bx	lr

080098de <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80098de:	b580      	push	{r7, lr}
 80098e0:	b084      	sub	sp, #16
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80098ea:	2300      	movs	r3, #0
 80098ec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80098fe:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800990c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800990e:	2064      	movs	r0, #100	; 0x64
 8009910:	f7fa fe5e 	bl	80045d0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	68fa      	ldr	r2, [r7, #12]
 8009918:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800991c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009920:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009922:	200a      	movs	r0, #10
 8009924:	f7fa fe54 	bl	80045d0 <HAL_Delay>

  return HAL_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009932:	b480      	push	{r7}
 8009934:	b085      	sub	sp, #20
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
 800993a:	460b      	mov	r3, r1
 800993c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009942:	2300      	movs	r3, #0
 8009944:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009956:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800995e:	2b00      	cmp	r3, #0
 8009960:	d109      	bne.n	8009976 <USB_DriveVbus+0x44>
 8009962:	78fb      	ldrb	r3, [r7, #3]
 8009964:	2b01      	cmp	r3, #1
 8009966:	d106      	bne.n	8009976 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	68fa      	ldr	r2, [r7, #12]
 800996c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009970:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009974:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800997c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009980:	d109      	bne.n	8009996 <USB_DriveVbus+0x64>
 8009982:	78fb      	ldrb	r3, [r7, #3]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d106      	bne.n	8009996 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009990:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009994:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	3714      	adds	r7, #20
 800999c:	46bd      	mov	sp, r7
 800999e:	bc80      	pop	{r7}
 80099a0:	4770      	bx	lr

080099a2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80099a2:	b480      	push	{r7}
 80099a4:	b085      	sub	sp, #20
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80099ae:	2300      	movs	r3, #0
 80099b0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	0c5b      	lsrs	r3, r3, #17
 80099c0:	f003 0303 	and.w	r3, r3, #3
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3714      	adds	r7, #20
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bc80      	pop	{r7}
 80099cc:	4770      	bx	lr

080099ce <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80099ce:	b480      	push	{r7}
 80099d0:	b085      	sub	sp, #20
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	b29b      	uxth	r3, r3
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3714      	adds	r7, #20
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bc80      	pop	{r7}
 80099ec:	4770      	bx	lr
	...

080099f0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b088      	sub	sp, #32
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	4608      	mov	r0, r1
 80099fa:	4611      	mov	r1, r2
 80099fc:	461a      	mov	r2, r3
 80099fe:	4603      	mov	r3, r0
 8009a00:	70fb      	strb	r3, [r7, #3]
 8009a02:	460b      	mov	r3, r1
 8009a04:	70bb      	strb	r3, [r7, #2]
 8009a06:	4613      	mov	r3, r2
 8009a08:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009a12:	78fb      	ldrb	r3, [r7, #3]
 8009a14:	015a      	lsls	r2, r3, #5
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	4413      	add	r3, r2
 8009a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a1e:	461a      	mov	r2, r3
 8009a20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a24:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009a26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009a2a:	2b03      	cmp	r3, #3
 8009a2c:	d87e      	bhi.n	8009b2c <USB_HC_Init+0x13c>
 8009a2e:	a201      	add	r2, pc, #4	; (adr r2, 8009a34 <USB_HC_Init+0x44>)
 8009a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a34:	08009a45 	.word	0x08009a45
 8009a38:	08009aef 	.word	0x08009aef
 8009a3c:	08009a45 	.word	0x08009a45
 8009a40:	08009ab1 	.word	0x08009ab1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009a44:	78fb      	ldrb	r3, [r7, #3]
 8009a46:	015a      	lsls	r2, r3, #5
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a50:	461a      	mov	r2, r3
 8009a52:	f240 439d 	movw	r3, #1181	; 0x49d
 8009a56:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009a58:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	da10      	bge.n	8009a82 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009a60:	78fb      	ldrb	r3, [r7, #3]
 8009a62:	015a      	lsls	r2, r3, #5
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	4413      	add	r3, r2
 8009a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	78fa      	ldrb	r2, [r7, #3]
 8009a70:	0151      	lsls	r1, r2, #5
 8009a72:	693a      	ldr	r2, [r7, #16]
 8009a74:	440a      	add	r2, r1
 8009a76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a7e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009a80:	e057      	b.n	8009b32 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d051      	beq.n	8009b32 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009a8e:	78fb      	ldrb	r3, [r7, #3]
 8009a90:	015a      	lsls	r2, r3, #5
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	4413      	add	r3, r2
 8009a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	78fa      	ldrb	r2, [r7, #3]
 8009a9e:	0151      	lsls	r1, r2, #5
 8009aa0:	693a      	ldr	r2, [r7, #16]
 8009aa2:	440a      	add	r2, r1
 8009aa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009aa8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009aac:	60d3      	str	r3, [r2, #12]
      break;
 8009aae:	e040      	b.n	8009b32 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009ab0:	78fb      	ldrb	r3, [r7, #3]
 8009ab2:	015a      	lsls	r2, r3, #5
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009abc:	461a      	mov	r2, r3
 8009abe:	f240 639d 	movw	r3, #1693	; 0x69d
 8009ac2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009ac4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	da34      	bge.n	8009b36 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009acc:	78fb      	ldrb	r3, [r7, #3]
 8009ace:	015a      	lsls	r2, r3, #5
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	78fa      	ldrb	r2, [r7, #3]
 8009adc:	0151      	lsls	r1, r2, #5
 8009ade:	693a      	ldr	r2, [r7, #16]
 8009ae0:	440a      	add	r2, r1
 8009ae2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009aea:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009aec:	e023      	b.n	8009b36 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009aee:	78fb      	ldrb	r3, [r7, #3]
 8009af0:	015a      	lsls	r2, r3, #5
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	4413      	add	r3, r2
 8009af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009afa:	461a      	mov	r2, r3
 8009afc:	f240 2325 	movw	r3, #549	; 0x225
 8009b00:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009b02:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	da17      	bge.n	8009b3a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009b0a:	78fb      	ldrb	r3, [r7, #3]
 8009b0c:	015a      	lsls	r2, r3, #5
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	4413      	add	r3, r2
 8009b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	78fa      	ldrb	r2, [r7, #3]
 8009b1a:	0151      	lsls	r1, r2, #5
 8009b1c:	693a      	ldr	r2, [r7, #16]
 8009b1e:	440a      	add	r2, r1
 8009b20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b24:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009b28:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009b2a:	e006      	b.n	8009b3a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	77fb      	strb	r3, [r7, #31]
      break;
 8009b30:	e004      	b.n	8009b3c <USB_HC_Init+0x14c>
      break;
 8009b32:	bf00      	nop
 8009b34:	e002      	b.n	8009b3c <USB_HC_Init+0x14c>
      break;
 8009b36:	bf00      	nop
 8009b38:	e000      	b.n	8009b3c <USB_HC_Init+0x14c>
      break;
 8009b3a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b42:	699a      	ldr	r2, [r3, #24]
 8009b44:	78fb      	ldrb	r3, [r7, #3]
 8009b46:	f003 030f 	and.w	r3, r3, #15
 8009b4a:	2101      	movs	r1, #1
 8009b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8009b50:	6939      	ldr	r1, [r7, #16]
 8009b52:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009b56:	4313      	orrs	r3, r2
 8009b58:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	699b      	ldr	r3, [r3, #24]
 8009b5e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009b66:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	da03      	bge.n	8009b76 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b72:	61bb      	str	r3, [r7, #24]
 8009b74:	e001      	b.n	8009b7a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8009b76:	2300      	movs	r3, #0
 8009b78:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f7ff ff11 	bl	80099a2 <USB_GetHostSpeed>
 8009b80:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009b82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009b86:	2b02      	cmp	r3, #2
 8009b88:	d106      	bne.n	8009b98 <USB_HC_Init+0x1a8>
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2b02      	cmp	r3, #2
 8009b8e:	d003      	beq.n	8009b98 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009b90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009b94:	617b      	str	r3, [r7, #20]
 8009b96:	e001      	b.n	8009b9c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009b9c:	787b      	ldrb	r3, [r7, #1]
 8009b9e:	059b      	lsls	r3, r3, #22
 8009ba0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009ba4:	78bb      	ldrb	r3, [r7, #2]
 8009ba6:	02db      	lsls	r3, r3, #11
 8009ba8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009bac:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009bae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009bb2:	049b      	lsls	r3, r3, #18
 8009bb4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009bb8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009bba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009bbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009bc0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009bc6:	78fb      	ldrb	r3, [r7, #3]
 8009bc8:	0159      	lsls	r1, r3, #5
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	440b      	add	r3, r1
 8009bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bd2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009bd8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8009bda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009bde:	2b03      	cmp	r3, #3
 8009be0:	d10f      	bne.n	8009c02 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009be2:	78fb      	ldrb	r3, [r7, #3]
 8009be4:	015a      	lsls	r2, r3, #5
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	4413      	add	r3, r2
 8009bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	78fa      	ldrb	r2, [r7, #3]
 8009bf2:	0151      	lsls	r1, r2, #5
 8009bf4:	693a      	ldr	r2, [r7, #16]
 8009bf6:	440a      	add	r2, r1
 8009bf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c00:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009c02:	7ffb      	ldrb	r3, [r7, #31]
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3720      	adds	r7, #32
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b08c      	sub	sp, #48	; 0x30
 8009c10:	af02      	add	r7, sp, #8
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	4613      	mov	r3, r2
 8009c18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	785b      	ldrb	r3, [r3, #1]
 8009c22:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c28:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d02d      	beq.n	8009c92 <USB_HC_StartXfer+0x86>
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	791b      	ldrb	r3, [r3, #4]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d129      	bne.n	8009c92 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009c3e:	79fb      	ldrb	r3, [r7, #7]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d117      	bne.n	8009c74 <USB_HC_StartXfer+0x68>
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	79db      	ldrb	r3, [r3, #7]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d003      	beq.n	8009c54 <USB_HC_StartXfer+0x48>
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	79db      	ldrb	r3, [r3, #7]
 8009c50:	2b02      	cmp	r3, #2
 8009c52:	d10f      	bne.n	8009c74 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	015a      	lsls	r2, r3, #5
 8009c58:	6a3b      	ldr	r3, [r7, #32]
 8009c5a:	4413      	add	r3, r2
 8009c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	69fa      	ldr	r2, [r7, #28]
 8009c64:	0151      	lsls	r1, r2, #5
 8009c66:	6a3a      	ldr	r2, [r7, #32]
 8009c68:	440a      	add	r2, r1
 8009c6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c72:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009c74:	79fb      	ldrb	r3, [r7, #7]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d10b      	bne.n	8009c92 <USB_HC_StartXfer+0x86>
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	795b      	ldrb	r3, [r3, #5]
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d107      	bne.n	8009c92 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	785b      	ldrb	r3, [r3, #1]
 8009c86:	4619      	mov	r1, r3
 8009c88:	68f8      	ldr	r0, [r7, #12]
 8009c8a:	f000 fa2d 	bl	800a0e8 <USB_DoPing>
      return HAL_OK;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	e0f8      	b.n	8009e84 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	695b      	ldr	r3, [r3, #20]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d018      	beq.n	8009ccc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	695b      	ldr	r3, [r3, #20]
 8009c9e:	68ba      	ldr	r2, [r7, #8]
 8009ca0:	8912      	ldrh	r2, [r2, #8]
 8009ca2:	4413      	add	r3, r2
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	68ba      	ldr	r2, [r7, #8]
 8009ca8:	8912      	ldrh	r2, [r2, #8]
 8009caa:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cae:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009cb0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009cb2:	8b7b      	ldrh	r3, [r7, #26]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d90b      	bls.n	8009cd0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009cb8:	8b7b      	ldrh	r3, [r7, #26]
 8009cba:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009cbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009cbe:	68ba      	ldr	r2, [r7, #8]
 8009cc0:	8912      	ldrh	r2, [r2, #8]
 8009cc2:	fb02 f203 	mul.w	r2, r2, r3
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	611a      	str	r2, [r3, #16]
 8009cca:	e001      	b.n	8009cd0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	78db      	ldrb	r3, [r3, #3]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d007      	beq.n	8009ce8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009cd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	8912      	ldrh	r2, [r2, #8]
 8009cde:	fb02 f203 	mul.w	r2, r2, r3
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	611a      	str	r2, [r3, #16]
 8009ce6:	e003      	b.n	8009cf0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	695a      	ldr	r2, [r3, #20]
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009cf8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009cfa:	04d9      	lsls	r1, r3, #19
 8009cfc:	4b63      	ldr	r3, [pc, #396]	; (8009e8c <USB_HC_StartXfer+0x280>)
 8009cfe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009d00:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	7a9b      	ldrb	r3, [r3, #10]
 8009d06:	075b      	lsls	r3, r3, #29
 8009d08:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009d0c:	69f9      	ldr	r1, [r7, #28]
 8009d0e:	0148      	lsls	r0, r1, #5
 8009d10:	6a39      	ldr	r1, [r7, #32]
 8009d12:	4401      	add	r1, r0
 8009d14:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009d18:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009d1a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009d1c:	79fb      	ldrb	r3, [r7, #7]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d009      	beq.n	8009d36 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	68d9      	ldr	r1, [r3, #12]
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	015a      	lsls	r2, r3, #5
 8009d2a:	6a3b      	ldr	r3, [r7, #32]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d32:	460a      	mov	r2, r1
 8009d34:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009d36:	6a3b      	ldr	r3, [r7, #32]
 8009d38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	f003 0301 	and.w	r3, r3, #1
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	bf0c      	ite	eq
 8009d46:	2301      	moveq	r3, #1
 8009d48:	2300      	movne	r3, #0
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	015a      	lsls	r2, r3, #5
 8009d52:	6a3b      	ldr	r3, [r7, #32]
 8009d54:	4413      	add	r3, r2
 8009d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	69fa      	ldr	r2, [r7, #28]
 8009d5e:	0151      	lsls	r1, r2, #5
 8009d60:	6a3a      	ldr	r2, [r7, #32]
 8009d62:	440a      	add	r2, r1
 8009d64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d68:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009d6c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	015a      	lsls	r2, r3, #5
 8009d72:	6a3b      	ldr	r3, [r7, #32]
 8009d74:	4413      	add	r3, r2
 8009d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	7e7b      	ldrb	r3, [r7, #25]
 8009d7e:	075b      	lsls	r3, r3, #29
 8009d80:	69f9      	ldr	r1, [r7, #28]
 8009d82:	0148      	lsls	r0, r1, #5
 8009d84:	6a39      	ldr	r1, [r7, #32]
 8009d86:	4401      	add	r1, r0
 8009d88:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	015a      	lsls	r2, r3, #5
 8009d94:	6a3b      	ldr	r3, [r7, #32]
 8009d96:	4413      	add	r3, r2
 8009d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009da6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	78db      	ldrb	r3, [r3, #3]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d004      	beq.n	8009dba <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009db6:	613b      	str	r3, [r7, #16]
 8009db8:	e003      	b.n	8009dc2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009dc0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009dc8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	015a      	lsls	r2, r3, #5
 8009dce:	6a3b      	ldr	r3, [r7, #32]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009ddc:	79fb      	ldrb	r3, [r7, #7]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d001      	beq.n	8009de6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	e04e      	b.n	8009e84 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	78db      	ldrb	r3, [r3, #3]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d149      	bne.n	8009e82 <USB_HC_StartXfer+0x276>
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	695b      	ldr	r3, [r3, #20]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d045      	beq.n	8009e82 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	79db      	ldrb	r3, [r3, #7]
 8009dfa:	2b03      	cmp	r3, #3
 8009dfc:	d830      	bhi.n	8009e60 <USB_HC_StartXfer+0x254>
 8009dfe:	a201      	add	r2, pc, #4	; (adr r2, 8009e04 <USB_HC_StartXfer+0x1f8>)
 8009e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e04:	08009e15 	.word	0x08009e15
 8009e08:	08009e39 	.word	0x08009e39
 8009e0c:	08009e15 	.word	0x08009e15
 8009e10:	08009e39 	.word	0x08009e39
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	695b      	ldr	r3, [r3, #20]
 8009e18:	3303      	adds	r3, #3
 8009e1a:	089b      	lsrs	r3, r3, #2
 8009e1c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009e1e:	8afa      	ldrh	r2, [r7, #22]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d91c      	bls.n	8009e64 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	699b      	ldr	r3, [r3, #24]
 8009e2e:	f043 0220 	orr.w	r2, r3, #32
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	619a      	str	r2, [r3, #24]
        }
        break;
 8009e36:	e015      	b.n	8009e64 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	695b      	ldr	r3, [r3, #20]
 8009e3c:	3303      	adds	r3, #3
 8009e3e:	089b      	lsrs	r3, r3, #2
 8009e40:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009e42:	8afa      	ldrh	r2, [r7, #22]
 8009e44:	6a3b      	ldr	r3, [r7, #32]
 8009e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d90a      	bls.n	8009e68 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	699b      	ldr	r3, [r3, #24]
 8009e56:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	619a      	str	r2, [r3, #24]
        }
        break;
 8009e5e:	e003      	b.n	8009e68 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009e60:	bf00      	nop
 8009e62:	e002      	b.n	8009e6a <USB_HC_StartXfer+0x25e>
        break;
 8009e64:	bf00      	nop
 8009e66:	e000      	b.n	8009e6a <USB_HC_StartXfer+0x25e>
        break;
 8009e68:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	68d9      	ldr	r1, [r3, #12]
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	785a      	ldrb	r2, [r3, #1]
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	695b      	ldr	r3, [r3, #20]
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	2000      	movs	r0, #0
 8009e7a:	9000      	str	r0, [sp, #0]
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f7ff fb5d 	bl	800953c <USB_WritePacket>
  }

  return HAL_OK;
 8009e82:	2300      	movs	r3, #0
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3728      	adds	r7, #40	; 0x28
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	1ff80000 	.word	0x1ff80000

08009e90 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ea2:	695b      	ldr	r3, [r3, #20]
 8009ea4:	b29b      	uxth	r3, r3
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3714      	adds	r7, #20
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bc80      	pop	{r7}
 8009eae:	4770      	bx	lr

08009eb0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b089      	sub	sp, #36	; 0x24
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	460b      	mov	r3, r1
 8009eba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8009ec0:	78fb      	ldrb	r3, [r7, #3]
 8009ec2:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	015a      	lsls	r2, r3, #5
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	4413      	add	r3, r2
 8009ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	0c9b      	lsrs	r3, r3, #18
 8009ed8:	f003 0303 	and.w	r3, r3, #3
 8009edc:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	015a      	lsls	r2, r3, #5
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	0fdb      	lsrs	r3, r3, #31
 8009eee:	f003 0301 	and.w	r3, r3, #1
 8009ef2:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	f003 0320 	and.w	r3, r3, #32
 8009efc:	2b20      	cmp	r3, #32
 8009efe:	d104      	bne.n	8009f0a <USB_HC_Halt+0x5a>
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d101      	bne.n	8009f0a <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009f06:	2300      	movs	r3, #0
 8009f08:	e0e8      	b.n	800a0dc <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d002      	beq.n	8009f16 <USB_HC_Halt+0x66>
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	d173      	bne.n	8009ffe <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	015a      	lsls	r2, r3, #5
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	697a      	ldr	r2, [r7, #20]
 8009f26:	0151      	lsls	r1, r2, #5
 8009f28:	69ba      	ldr	r2, [r7, #24]
 8009f2a:	440a      	add	r2, r1
 8009f2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f34:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	f003 0320 	and.w	r3, r3, #32
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	f040 80cb 	bne.w	800a0da <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d143      	bne.n	8009fd8 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	015a      	lsls	r2, r3, #5
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	4413      	add	r3, r2
 8009f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	697a      	ldr	r2, [r7, #20]
 8009f60:	0151      	lsls	r1, r2, #5
 8009f62:	69ba      	ldr	r2, [r7, #24]
 8009f64:	440a      	add	r2, r1
 8009f66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f6e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	015a      	lsls	r2, r3, #5
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	4413      	add	r3, r2
 8009f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	697a      	ldr	r2, [r7, #20]
 8009f80:	0151      	lsls	r1, r2, #5
 8009f82:	69ba      	ldr	r2, [r7, #24]
 8009f84:	440a      	add	r2, r1
 8009f86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f8e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	015a      	lsls	r2, r3, #5
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	4413      	add	r3, r2
 8009f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	0151      	lsls	r1, r2, #5
 8009fa2:	69ba      	ldr	r2, [r7, #24]
 8009fa4:	440a      	add	r2, r1
 8009fa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009faa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009fae:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	61fb      	str	r3, [r7, #28]
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009fbc:	d81d      	bhi.n	8009ffa <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	015a      	lsls	r2, r3, #5
 8009fc2:	69bb      	ldr	r3, [r7, #24]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fd4:	d0ec      	beq.n	8009fb0 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009fd6:	e080      	b.n	800a0da <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	015a      	lsls	r2, r3, #5
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	4413      	add	r3, r2
 8009fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	697a      	ldr	r2, [r7, #20]
 8009fe8:	0151      	lsls	r1, r2, #5
 8009fea:	69ba      	ldr	r2, [r7, #24]
 8009fec:	440a      	add	r2, r1
 8009fee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ff2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ff6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009ff8:	e06f      	b.n	800a0da <USB_HC_Halt+0x22a>
            break;
 8009ffa:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009ffc:	e06d      	b.n	800a0da <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	015a      	lsls	r2, r3, #5
 800a002:	69bb      	ldr	r3, [r7, #24]
 800a004:	4413      	add	r3, r2
 800a006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	697a      	ldr	r2, [r7, #20]
 800a00e:	0151      	lsls	r1, r2, #5
 800a010:	69ba      	ldr	r2, [r7, #24]
 800a012:	440a      	add	r2, r1
 800a014:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a018:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a01c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d143      	bne.n	800a0b6 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	015a      	lsls	r2, r3, #5
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	4413      	add	r3, r2
 800a036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	697a      	ldr	r2, [r7, #20]
 800a03e:	0151      	lsls	r1, r2, #5
 800a040:	69ba      	ldr	r2, [r7, #24]
 800a042:	440a      	add	r2, r1
 800a044:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a048:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a04c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	015a      	lsls	r2, r3, #5
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	4413      	add	r3, r2
 800a056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	697a      	ldr	r2, [r7, #20]
 800a05e:	0151      	lsls	r1, r2, #5
 800a060:	69ba      	ldr	r2, [r7, #24]
 800a062:	440a      	add	r2, r1
 800a064:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a068:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a06c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	015a      	lsls	r2, r3, #5
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	4413      	add	r3, r2
 800a076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	697a      	ldr	r2, [r7, #20]
 800a07e:	0151      	lsls	r1, r2, #5
 800a080:	69ba      	ldr	r2, [r7, #24]
 800a082:	440a      	add	r2, r1
 800a084:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a088:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a08c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	3301      	adds	r3, #1
 800a092:	61fb      	str	r3, [r7, #28]
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a09a:	d81d      	bhi.n	800a0d8 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	015a      	lsls	r2, r3, #5
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0b2:	d0ec      	beq.n	800a08e <USB_HC_Halt+0x1de>
 800a0b4:	e011      	b.n	800a0da <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	015a      	lsls	r2, r3, #5
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	4413      	add	r3, r2
 800a0be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	697a      	ldr	r2, [r7, #20]
 800a0c6:	0151      	lsls	r1, r2, #5
 800a0c8:	69ba      	ldr	r2, [r7, #24]
 800a0ca:	440a      	add	r2, r1
 800a0cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a0d4:	6013      	str	r3, [r2, #0]
 800a0d6:	e000      	b.n	800a0da <USB_HC_Halt+0x22a>
          break;
 800a0d8:	bf00      	nop
    }
  }

  return HAL_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3724      	adds	r7, #36	; 0x24
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bc80      	pop	{r7}
 800a0e4:	4770      	bx	lr
	...

0800a0e8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b087      	sub	sp, #28
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a0f8:	78fb      	ldrb	r3, [r7, #3]
 800a0fa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	04da      	lsls	r2, r3, #19
 800a104:	4b14      	ldr	r3, [pc, #80]	; (800a158 <USB_DoPing+0x70>)
 800a106:	4013      	ands	r3, r2
 800a108:	693a      	ldr	r2, [r7, #16]
 800a10a:	0151      	lsls	r1, r2, #5
 800a10c:	697a      	ldr	r2, [r7, #20]
 800a10e:	440a      	add	r2, r1
 800a110:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a118:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	015a      	lsls	r2, r3, #5
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	4413      	add	r3, r2
 800a122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a130:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a138:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	015a      	lsls	r2, r3, #5
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	4413      	add	r3, r2
 800a142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a146:	461a      	mov	r2, r3
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a14c:	2300      	movs	r3, #0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	371c      	adds	r7, #28
 800a152:	46bd      	mov	sp, r7
 800a154:	bc80      	pop	{r7}
 800a156:	4770      	bx	lr
 800a158:	1ff80000 	.word	0x1ff80000

0800a15c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b086      	sub	sp, #24
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a168:	2300      	movs	r3, #0
 800a16a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f7ff f944 	bl	80093fa <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800a172:	2110      	movs	r1, #16
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f7ff f99d 	bl	80094b4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f7ff f9be 	bl	80094fc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a180:	2300      	movs	r3, #0
 800a182:	613b      	str	r3, [r7, #16]
 800a184:	e01f      	b.n	800a1c6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	015a      	lsls	r2, r3, #5
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	4413      	add	r3, r2
 800a18e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a19c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a1a4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a1ac:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	015a      	lsls	r2, r3, #5
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	613b      	str	r3, [r7, #16]
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	2b0f      	cmp	r3, #15
 800a1ca:	d9dc      	bls.n	800a186 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	613b      	str	r3, [r7, #16]
 800a1d0:	e034      	b.n	800a23c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	015a      	lsls	r2, r3, #5
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	4413      	add	r3, r2
 800a1da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a1e8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a1f0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a1f8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	015a      	lsls	r2, r3, #5
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	4413      	add	r3, r2
 800a202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a206:	461a      	mov	r2, r3
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	3301      	adds	r3, #1
 800a210:	617b      	str	r3, [r7, #20]
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a218:	d80c      	bhi.n	800a234 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	015a      	lsls	r2, r3, #5
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	4413      	add	r3, r2
 800a222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a22c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a230:	d0ec      	beq.n	800a20c <USB_StopHost+0xb0>
 800a232:	e000      	b.n	800a236 <USB_StopHost+0xda>
        break;
 800a234:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	3301      	adds	r3, #1
 800a23a:	613b      	str	r3, [r7, #16]
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	2b0f      	cmp	r3, #15
 800a240:	d9c7      	bls.n	800a1d2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a248:	461a      	mov	r2, r3
 800a24a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a24e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a256:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f7ff f8be 	bl	80093da <USB_EnableGlobalInt>

  return HAL_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3718      	adds	r7, #24
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800a26c:	4904      	ldr	r1, [pc, #16]	; (800a280 <MX_FATFS_Init+0x18>)
 800a26e:	4805      	ldr	r0, [pc, #20]	; (800a284 <MX_FATFS_Init+0x1c>)
 800a270:	f005 fb1e 	bl	800f8b0 <FATFS_LinkDriver>
 800a274:	4603      	mov	r3, r0
 800a276:	461a      	mov	r2, r3
 800a278:	4b03      	ldr	r3, [pc, #12]	; (800a288 <MX_FATFS_Init+0x20>)
 800a27a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a27c:	bf00      	nop
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	2000014c 	.word	0x2000014c
 800a284:	080101f0 	.word	0x080101f0
 800a288:	20005324 	.word	0x20005324

0800a28c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a28c:	b480      	push	{r7}
 800a28e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a290:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a292:	4618      	mov	r0, r3
 800a294:	46bd      	mov	sp, r7
 800a296:	bc80      	pop	{r7}
 800a298:	4770      	bx	lr

0800a29a <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800a29a:	b480      	push	{r7}
 800a29c:	b083      	sub	sp, #12
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	370c      	adds	r7, #12
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bc80      	pop	{r7}
 800a2ae:	4770      	bx	lr

0800a2b0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800a2be:	79fb      	ldrb	r3, [r7, #7]
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	4808      	ldr	r0, [pc, #32]	; (800a2e4 <USBH_status+0x34>)
 800a2c4:	f000 fe19 	bl	800aefa <USBH_MSC_UnitIsReady>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d002      	beq.n	800a2d4 <USBH_status+0x24>
  {
    res = RES_OK;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	73fb      	strb	r3, [r7, #15]
 800a2d2:	e001      	b.n	800a2d8 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3710      	adds	r7, #16
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	2000532c 	.word	0x2000532c

0800a2e8 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b094      	sub	sp, #80	; 0x50
 800a2ec:	af02      	add	r7, sp, #8
 800a2ee:	60b9      	str	r1, [r7, #8]
 800a2f0:	607a      	str	r2, [r7, #4]
 800a2f2:	603b      	str	r3, [r7, #0]
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800a2fe:	7bf9      	ldrb	r1, [r7, #15]
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	9300      	str	r3, [sp, #0]
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	4813      	ldr	r0, [pc, #76]	; (800a358 <USBH_read+0x70>)
 800a30a:	f000 fe3f 	bl	800af8c <USBH_MSC_Read>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d103      	bne.n	800a31c <USBH_read+0x34>
  {
    res = RES_OK;
 800a314:	2300      	movs	r3, #0
 800a316:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a31a:	e017      	b.n	800a34c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a31c:	f107 0210 	add.w	r2, r7, #16
 800a320:	7bfb      	ldrb	r3, [r7, #15]
 800a322:	4619      	mov	r1, r3
 800a324:	480c      	ldr	r0, [pc, #48]	; (800a358 <USBH_read+0x70>)
 800a326:	f000 fe0d 	bl	800af44 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a32a:	7f7b      	ldrb	r3, [r7, #29]
 800a32c:	2b3a      	cmp	r3, #58	; 0x3a
 800a32e:	d005      	beq.n	800a33c <USBH_read+0x54>
 800a330:	2b3a      	cmp	r3, #58	; 0x3a
 800a332:	dc07      	bgt.n	800a344 <USBH_read+0x5c>
 800a334:	2b04      	cmp	r3, #4
 800a336:	d001      	beq.n	800a33c <USBH_read+0x54>
 800a338:	2b28      	cmp	r3, #40	; 0x28
 800a33a:	d103      	bne.n	800a344 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a33c:	2303      	movs	r3, #3
 800a33e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a342:	e003      	b.n	800a34c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800a344:	2301      	movs	r3, #1
 800a346:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a34a:	bf00      	nop
    }
  }

  return res;
 800a34c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a350:	4618      	mov	r0, r3
 800a352:	3748      	adds	r7, #72	; 0x48
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	2000532c 	.word	0x2000532c

0800a35c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b094      	sub	sp, #80	; 0x50
 800a360:	af02      	add	r7, sp, #8
 800a362:	60b9      	str	r1, [r7, #8]
 800a364:	607a      	str	r2, [r7, #4]
 800a366:	603b      	str	r3, [r7, #0]
 800a368:	4603      	mov	r3, r0
 800a36a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a36c:	2301      	movs	r3, #1
 800a36e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800a372:	7bf9      	ldrb	r1, [r7, #15]
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	9300      	str	r3, [sp, #0]
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	4817      	ldr	r0, [pc, #92]	; (800a3dc <USBH_write+0x80>)
 800a37e:	f000 fe6e 	bl	800b05e <USBH_MSC_Write>
 800a382:	4603      	mov	r3, r0
 800a384:	2b00      	cmp	r3, #0
 800a386:	d103      	bne.n	800a390 <USBH_write+0x34>
  {
    res = RES_OK;
 800a388:	2300      	movs	r3, #0
 800a38a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a38e:	e01f      	b.n	800a3d0 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a390:	f107 0210 	add.w	r2, r7, #16
 800a394:	7bfb      	ldrb	r3, [r7, #15]
 800a396:	4619      	mov	r1, r3
 800a398:	4810      	ldr	r0, [pc, #64]	; (800a3dc <USBH_write+0x80>)
 800a39a:	f000 fdd3 	bl	800af44 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a39e:	7f7b      	ldrb	r3, [r7, #29]
 800a3a0:	2b3a      	cmp	r3, #58	; 0x3a
 800a3a2:	d00d      	beq.n	800a3c0 <USBH_write+0x64>
 800a3a4:	2b3a      	cmp	r3, #58	; 0x3a
 800a3a6:	dc0f      	bgt.n	800a3c8 <USBH_write+0x6c>
 800a3a8:	2b28      	cmp	r3, #40	; 0x28
 800a3aa:	d009      	beq.n	800a3c0 <USBH_write+0x64>
 800a3ac:	2b28      	cmp	r3, #40	; 0x28
 800a3ae:	dc0b      	bgt.n	800a3c8 <USBH_write+0x6c>
 800a3b0:	2b04      	cmp	r3, #4
 800a3b2:	d005      	beq.n	800a3c0 <USBH_write+0x64>
 800a3b4:	2b27      	cmp	r3, #39	; 0x27
 800a3b6:	d107      	bne.n	800a3c8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800a3b8:	2302      	movs	r3, #2
 800a3ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a3be:	e007      	b.n	800a3d0 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a3c0:	2303      	movs	r3, #3
 800a3c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a3c6:	e003      	b.n	800a3d0 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a3ce:	bf00      	nop
    }
  }

  return res;
 800a3d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3748      	adds	r7, #72	; 0x48
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	2000532c 	.word	0x2000532c

0800a3e0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b090      	sub	sp, #64	; 0x40
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	603a      	str	r2, [r7, #0]
 800a3ea:	71fb      	strb	r3, [r7, #7]
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800a3f6:	79bb      	ldrb	r3, [r7, #6]
 800a3f8:	2b03      	cmp	r3, #3
 800a3fa:	d852      	bhi.n	800a4a2 <USBH_ioctl+0xc2>
 800a3fc:	a201      	add	r2, pc, #4	; (adr r2, 800a404 <USBH_ioctl+0x24>)
 800a3fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a402:	bf00      	nop
 800a404:	0800a415 	.word	0x0800a415
 800a408:	0800a41d 	.word	0x0800a41d
 800a40c:	0800a447 	.word	0x0800a447
 800a410:	0800a473 	.word	0x0800a473
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800a414:	2300      	movs	r3, #0
 800a416:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a41a:	e045      	b.n	800a4a8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a41c:	f107 0208 	add.w	r2, r7, #8
 800a420:	79fb      	ldrb	r3, [r7, #7]
 800a422:	4619      	mov	r1, r3
 800a424:	4823      	ldr	r0, [pc, #140]	; (800a4b4 <USBH_ioctl+0xd4>)
 800a426:	f000 fd8d 	bl	800af44 <USBH_MSC_GetLUNInfo>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d106      	bne.n	800a43e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a436:	2300      	movs	r3, #0
 800a438:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a43c:	e034      	b.n	800a4a8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a43e:	2301      	movs	r3, #1
 800a440:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a444:	e030      	b.n	800a4a8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a446:	f107 0208 	add.w	r2, r7, #8
 800a44a:	79fb      	ldrb	r3, [r7, #7]
 800a44c:	4619      	mov	r1, r3
 800a44e:	4819      	ldr	r0, [pc, #100]	; (800a4b4 <USBH_ioctl+0xd4>)
 800a450:	f000 fd78 	bl	800af44 <USBH_MSC_GetLUNInfo>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d107      	bne.n	800a46a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800a45a:	8a3b      	ldrh	r3, [r7, #16]
 800a45c:	461a      	mov	r2, r3
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a462:	2300      	movs	r3, #0
 800a464:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a468:	e01e      	b.n	800a4a8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a470:	e01a      	b.n	800a4a8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a472:	f107 0208 	add.w	r2, r7, #8
 800a476:	79fb      	ldrb	r3, [r7, #7]
 800a478:	4619      	mov	r1, r3
 800a47a:	480e      	ldr	r0, [pc, #56]	; (800a4b4 <USBH_ioctl+0xd4>)
 800a47c:	f000 fd62 	bl	800af44 <USBH_MSC_GetLUNInfo>
 800a480:	4603      	mov	r3, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d109      	bne.n	800a49a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800a486:	8a3b      	ldrh	r3, [r7, #16]
 800a488:	0a5b      	lsrs	r3, r3, #9
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	461a      	mov	r2, r3
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a492:	2300      	movs	r3, #0
 800a494:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a498:	e006      	b.n	800a4a8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a4a0:	e002      	b.n	800a4a8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800a4a2:	2304      	movs	r3, #4
 800a4a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800a4a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3740      	adds	r7, #64	; 0x40
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	2000532c 	.word	0x2000532c

0800a4b8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a4b8:	b590      	push	{r4, r7, lr}
 800a4ba:	b089      	sub	sp, #36	; 0x24
 800a4bc:	af04      	add	r7, sp, #16
 800a4be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800a4c6:	7919      	ldrb	r1, [r3, #4]
 800a4c8:	2350      	movs	r3, #80	; 0x50
 800a4ca:	2206      	movs	r2, #6
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f001 fc50 	bl	800bd72 <USBH_FindInterface>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800a4d6:	7bfb      	ldrb	r3, [r7, #15]
 800a4d8:	2bff      	cmp	r3, #255	; 0xff
 800a4da:	d002      	beq.n	800a4e2 <USBH_MSC_InterfaceInit+0x2a>
 800a4dc:	7bfb      	ldrb	r3, [r7, #15]
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d901      	bls.n	800a4e6 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a4e2:	2302      	movs	r3, #2
 800a4e4:	e0ef      	b.n	800a6c6 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800a4e6:	7bfb      	ldrb	r3, [r7, #15]
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f001 fc26 	bl	800bd3c <USBH_SelectInterface>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a4f4:	7bbb      	ldrb	r3, [r7, #14]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d001      	beq.n	800a4fe <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800a4fa:	2302      	movs	r3, #2
 800a4fc:	e0e3      	b.n	800a6c6 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f8d3 457c 	ldr.w	r4, [r3, #1404]	; 0x57c
 800a504:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a508:	f005 fd40 	bl	800ff8c <malloc>
 800a50c:	4603      	mov	r3, r0
 800a50e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800a516:	69db      	ldr	r3, [r3, #28]
 800a518:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d101      	bne.n	800a524 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800a520:	2302      	movs	r3, #2
 800a522:	e0d0      	b.n	800a6c6 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800a524:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a528:	2100      	movs	r1, #0
 800a52a:	68b8      	ldr	r0, [r7, #8]
 800a52c:	f005 fd4c 	bl	800ffc8 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a530:	7bfb      	ldrb	r3, [r7, #15]
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	211a      	movs	r1, #26
 800a536:	fb01 f303 	mul.w	r3, r1, r3
 800a53a:	4413      	add	r3, r2
 800a53c:	f203 534e 	addw	r3, r3, #1358	; 0x54e
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	b25b      	sxtb	r3, r3
 800a544:	2b00      	cmp	r3, #0
 800a546:	da16      	bge.n	800a576 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a548:	7bfb      	ldrb	r3, [r7, #15]
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	211a      	movs	r1, #26
 800a54e:	fb01 f303 	mul.w	r3, r1, r3
 800a552:	4413      	add	r3, r2
 800a554:	f203 534e 	addw	r3, r3, #1358	; 0x54e
 800a558:	781a      	ldrb	r2, [r3, #0]
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a55e:	7bfb      	ldrb	r3, [r7, #15]
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	211a      	movs	r1, #26
 800a564:	fb01 f303 	mul.w	r3, r1, r3
 800a568:	4413      	add	r3, r2
 800a56a:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 800a56e:	881a      	ldrh	r2, [r3, #0]
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	815a      	strh	r2, [r3, #10]
 800a574:	e015      	b.n	800a5a2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a576:	7bfb      	ldrb	r3, [r7, #15]
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	211a      	movs	r1, #26
 800a57c:	fb01 f303 	mul.w	r3, r1, r3
 800a580:	4413      	add	r3, r2
 800a582:	f203 534e 	addw	r3, r3, #1358	; 0x54e
 800a586:	781a      	ldrb	r2, [r3, #0]
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a58c:	7bfb      	ldrb	r3, [r7, #15]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	211a      	movs	r1, #26
 800a592:	fb01 f303 	mul.w	r3, r1, r3
 800a596:	4413      	add	r3, r2
 800a598:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 800a59c:	881a      	ldrh	r2, [r3, #0]
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800a5a2:	7bfb      	ldrb	r3, [r7, #15]
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	211a      	movs	r1, #26
 800a5a8:	fb01 f303 	mul.w	r3, r1, r3
 800a5ac:	4413      	add	r3, r2
 800a5ae:	f203 5356 	addw	r3, r3, #1366	; 0x556
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	b25b      	sxtb	r3, r3
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	da16      	bge.n	800a5e8 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a5ba:	7bfb      	ldrb	r3, [r7, #15]
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	211a      	movs	r1, #26
 800a5c0:	fb01 f303 	mul.w	r3, r1, r3
 800a5c4:	4413      	add	r3, r2
 800a5c6:	f203 5356 	addw	r3, r3, #1366	; 0x556
 800a5ca:	781a      	ldrb	r2, [r3, #0]
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a5d0:	7bfb      	ldrb	r3, [r7, #15]
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	211a      	movs	r1, #26
 800a5d6:	fb01 f303 	mul.w	r3, r1, r3
 800a5da:	4413      	add	r3, r2
 800a5dc:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 800a5e0:	881a      	ldrh	r2, [r3, #0]
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	815a      	strh	r2, [r3, #10]
 800a5e6:	e015      	b.n	800a614 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a5e8:	7bfb      	ldrb	r3, [r7, #15]
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	211a      	movs	r1, #26
 800a5ee:	fb01 f303 	mul.w	r3, r1, r3
 800a5f2:	4413      	add	r3, r2
 800a5f4:	f203 5356 	addw	r3, r3, #1366	; 0x556
 800a5f8:	781a      	ldrb	r2, [r3, #0]
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a5fe:	7bfb      	ldrb	r3, [r7, #15]
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	211a      	movs	r1, #26
 800a604:	fb01 f303 	mul.w	r3, r1, r3
 800a608:	4413      	add	r3, r2
 800a60a:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 800a60e:	881a      	ldrh	r2, [r3, #0]
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	2200      	movs	r2, #0
 800a618:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	2200      	movs	r2, #0
 800a61e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	2200      	movs	r2, #0
 800a624:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	799b      	ldrb	r3, [r3, #6]
 800a62a:	4619      	mov	r1, r3
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f002 fdba 	bl	800d1a6 <USBH_AllocPipe>
 800a632:	4603      	mov	r3, r0
 800a634:	461a      	mov	r2, r3
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	79db      	ldrb	r3, [r3, #7]
 800a63e:	4619      	mov	r1, r3
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f002 fdb0 	bl	800d1a6 <USBH_AllocPipe>
 800a646:	4603      	mov	r3, r0
 800a648:	461a      	mov	r2, r3
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 fdaa 	bl	800b1a8 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	7959      	ldrb	r1, [r3, #5]
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	7998      	ldrb	r0, [r3, #6]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f893 451c 	ldrb.w	r4, [r3, #1308]	; 0x51c
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f893 351d 	ldrb.w	r3, [r3, #1309]	; 0x51d
 800a668:	68ba      	ldr	r2, [r7, #8]
 800a66a:	8912      	ldrh	r2, [r2, #8]
 800a66c:	9202      	str	r2, [sp, #8]
 800a66e:	2202      	movs	r2, #2
 800a670:	9201      	str	r2, [sp, #4]
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	4623      	mov	r3, r4
 800a676:	4602      	mov	r2, r0
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f002 fd65 	bl	800d148 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	7919      	ldrb	r1, [r3, #4]
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	79d8      	ldrb	r0, [r3, #7]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f893 451c 	ldrb.w	r4, [r3, #1308]	; 0x51c
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f893 351d 	ldrb.w	r3, [r3, #1309]	; 0x51d
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	8952      	ldrh	r2, [r2, #10]
 800a696:	9202      	str	r2, [sp, #8]
 800a698:	2202      	movs	r2, #2
 800a69a:	9201      	str	r2, [sp, #4]
 800a69c:	9300      	str	r3, [sp, #0]
 800a69e:	4623      	mov	r3, r4
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f002 fd50 	bl	800d148 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	791b      	ldrb	r3, [r3, #4]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f005 fb8f 	bl	800fdd4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	795b      	ldrb	r3, [r3, #5]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	4619      	mov	r1, r3
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f005 fb88 	bl	800fdd4 <USBH_LL_SetToggle>

  return USBH_OK;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3714      	adds	r7, #20
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd90      	pop	{r4, r7, pc}

0800a6ce <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b084      	sub	sp, #16
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800a6dc:	69db      	ldr	r3, [r3, #28]
 800a6de:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	795b      	ldrb	r3, [r3, #5]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00e      	beq.n	800a706 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	795b      	ldrb	r3, [r3, #5]
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f002 fd49 	bl	800d186 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	795b      	ldrb	r3, [r3, #5]
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f002 fd75 	bl	800d1ea <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2200      	movs	r2, #0
 800a704:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	791b      	ldrb	r3, [r3, #4]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d00e      	beq.n	800a72c <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	791b      	ldrb	r3, [r3, #4]
 800a712:	4619      	mov	r1, r3
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f002 fd36 	bl	800d186 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	791b      	ldrb	r3, [r3, #4]
 800a71e:	4619      	mov	r1, r3
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f002 fd62 	bl	800d1ea <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2200      	movs	r2, #0
 800a72a:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800a732:	69db      	ldr	r3, [r3, #28]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00b      	beq.n	800a750 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800a73e:	69db      	ldr	r3, [r3, #28]
 800a740:	4618      	mov	r0, r3
 800a742:	f005 fc2b 	bl	800ff9c <free>
    phost->pActiveClass->pData = 0U;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800a74c:	2200      	movs	r2, #0
 800a74e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a750:	2300      	movs	r3, #0
}
 800a752:	4618      	mov	r0, r3
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}

0800a75a <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a75a:	b580      	push	{r7, lr}
 800a75c:	b084      	sub	sp, #16
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800a768:	69db      	ldr	r3, [r3, #28]
 800a76a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a76c:	2301      	movs	r3, #1
 800a76e:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	7b9b      	ldrb	r3, [r3, #14]
 800a774:	2b03      	cmp	r3, #3
 800a776:	d041      	beq.n	800a7fc <USBH_MSC_ClassRequest+0xa2>
 800a778:	2b03      	cmp	r3, #3
 800a77a:	dc4b      	bgt.n	800a814 <USBH_MSC_ClassRequest+0xba>
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d001      	beq.n	800a784 <USBH_MSC_ClassRequest+0x2a>
 800a780:	2b02      	cmp	r3, #2
 800a782:	d147      	bne.n	800a814 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	4619      	mov	r1, r3
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 fcee 	bl	800b16a <USBH_MSC_BOT_REQ_GetMaxLUN>
 800a78e:	4603      	mov	r3, r0
 800a790:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800a792:	7bfb      	ldrb	r3, [r7, #15]
 800a794:	2b03      	cmp	r3, #3
 800a796:	d104      	bne.n	800a7a2 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	2200      	movs	r2, #0
 800a79c:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800a7a2:	7bfb      	ldrb	r3, [r7, #15]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d137      	bne.n	800a818 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	2b02      	cmp	r3, #2
 800a7ae:	d804      	bhi.n	800a7ba <USBH_MSC_ClassRequest+0x60>
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	781b      	ldrb	r3, [r3, #0]
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	b2da      	uxtb	r2, r3
 800a7b8:	e000      	b.n	800a7bc <USBH_MSC_ClassRequest+0x62>
 800a7ba:	2202      	movs	r2, #2
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	73bb      	strb	r3, [r7, #14]
 800a7c4:	e014      	b.n	800a7f0 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800a7c6:	7bbb      	ldrb	r3, [r7, #14]
 800a7c8:	68ba      	ldr	r2, [r7, #8]
 800a7ca:	2134      	movs	r1, #52	; 0x34
 800a7cc:	fb01 f303 	mul.w	r3, r1, r3
 800a7d0:	4413      	add	r3, r2
 800a7d2:	3392      	adds	r3, #146	; 0x92
 800a7d4:	2202      	movs	r2, #2
 800a7d6:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800a7d8:	7bbb      	ldrb	r3, [r7, #14]
 800a7da:	68ba      	ldr	r2, [r7, #8]
 800a7dc:	2134      	movs	r1, #52	; 0x34
 800a7de:	fb01 f303 	mul.w	r3, r1, r3
 800a7e2:	4413      	add	r3, r2
 800a7e4:	33c1      	adds	r3, #193	; 0xc1
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a7ea:	7bbb      	ldrb	r3, [r7, #14]
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	73bb      	strb	r3, [r7, #14]
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	7bba      	ldrb	r2, [r7, #14]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d3e5      	bcc.n	800a7c6 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800a7fa:	e00d      	b.n	800a818 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f002 f875 	bl	800c8ee <USBH_ClrFeature>
 800a804:	4603      	mov	r3, r0
 800a806:	2b00      	cmp	r3, #0
 800a808:	d108      	bne.n	800a81c <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	7bda      	ldrb	r2, [r3, #15]
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	739a      	strb	r2, [r3, #14]
      }
      break;
 800a812:	e003      	b.n	800a81c <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800a814:	bf00      	nop
 800a816:	e002      	b.n	800a81e <USBH_MSC_ClassRequest+0xc4>
      break;
 800a818:	bf00      	nop
 800a81a:	e000      	b.n	800a81e <USBH_MSC_ClassRequest+0xc4>
      break;
 800a81c:	bf00      	nop
  }

  return status;
 800a81e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a820:	4618      	mov	r0, r3
 800a822:	3710      	adds	r7, #16
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b086      	sub	sp, #24
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800a836:	69db      	ldr	r3, [r3, #28]
 800a838:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800a83a:	2301      	movs	r3, #1
 800a83c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800a83e:	2301      	movs	r3, #1
 800a840:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800a842:	2301      	movs	r3, #1
 800a844:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	7b1b      	ldrb	r3, [r3, #12]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d003      	beq.n	800a856 <USBH_MSC_Process+0x2e>
 800a84e:	2b01      	cmp	r3, #1
 800a850:	f000 8271 	beq.w	800ad36 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800a854:	e272      	b.n	800ad3c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	b29b      	uxth	r3, r3
 800a862:	429a      	cmp	r2, r3
 800a864:	f080 824f 	bcs.w	800ad06 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a86e:	4619      	mov	r1, r3
 800a870:	693a      	ldr	r2, [r7, #16]
 800a872:	2334      	movs	r3, #52	; 0x34
 800a874:	fb03 f301 	mul.w	r3, r3, r1
 800a878:	4413      	add	r3, r2
 800a87a:	3391      	adds	r3, #145	; 0x91
 800a87c:	2201      	movs	r2, #1
 800a87e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a886:	4619      	mov	r1, r3
 800a888:	693a      	ldr	r2, [r7, #16]
 800a88a:	2334      	movs	r3, #52	; 0x34
 800a88c:	fb03 f301 	mul.w	r3, r3, r1
 800a890:	4413      	add	r3, r2
 800a892:	3390      	adds	r3, #144	; 0x90
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	2b08      	cmp	r3, #8
 800a898:	f200 8243 	bhi.w	800ad22 <USBH_MSC_Process+0x4fa>
 800a89c:	a201      	add	r2, pc, #4	; (adr r2, 800a8a4 <USBH_MSC_Process+0x7c>)
 800a89e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a2:	bf00      	nop
 800a8a4:	0800a8c9 	.word	0x0800a8c9
 800a8a8:	0800ad23 	.word	0x0800ad23
 800a8ac:	0800a991 	.word	0x0800a991
 800a8b0:	0800ab15 	.word	0x0800ab15
 800a8b4:	0800a8ef 	.word	0x0800a8ef
 800a8b8:	0800abe1 	.word	0x0800abe1
 800a8bc:	0800ad23 	.word	0x0800ad23
 800a8c0:	0800ad23 	.word	0x0800ad23
 800a8c4:	0800acf5 	.word	0x0800acf5
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	693a      	ldr	r2, [r7, #16]
 800a8d2:	2334      	movs	r3, #52	; 0x34
 800a8d4:	fb03 f301 	mul.w	r3, r3, r1
 800a8d8:	4413      	add	r3, r2
 800a8da:	3390      	adds	r3, #144	; 0x90
 800a8dc:	2204      	movs	r2, #4
 800a8de:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 25c4 	ldr.w	r2, [r3, #1476]	; 0x5c4
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800a8ec:	e222      	b.n	800ad34 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a8f4:	b2d9      	uxtb	r1, r3
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	2334      	movs	r3, #52	; 0x34
 800a900:	fb03 f302 	mul.w	r3, r3, r2
 800a904:	3398      	adds	r3, #152	; 0x98
 800a906:	693a      	ldr	r2, [r7, #16]
 800a908:	4413      	add	r3, r2
 800a90a:	3307      	adds	r3, #7
 800a90c:	461a      	mov	r2, r3
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 ff68 	bl	800b7e4 <USBH_MSC_SCSI_Inquiry>
 800a914:	4603      	mov	r3, r0
 800a916:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a918:	7bfb      	ldrb	r3, [r7, #15]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d10b      	bne.n	800a936 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a924:	4619      	mov	r1, r3
 800a926:	693a      	ldr	r2, [r7, #16]
 800a928:	2334      	movs	r3, #52	; 0x34
 800a92a:	fb03 f301 	mul.w	r3, r3, r1
 800a92e:	4413      	add	r3, r2
 800a930:	3390      	adds	r3, #144	; 0x90
 800a932:	2202      	movs	r2, #2
 800a934:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800a936:	7bfb      	ldrb	r3, [r7, #15]
 800a938:	2b02      	cmp	r3, #2
 800a93a:	d10c      	bne.n	800a956 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a942:	4619      	mov	r1, r3
 800a944:	693a      	ldr	r2, [r7, #16]
 800a946:	2334      	movs	r3, #52	; 0x34
 800a948:	fb03 f301 	mul.w	r3, r3, r1
 800a94c:	4413      	add	r3, r2
 800a94e:	3390      	adds	r3, #144	; 0x90
 800a950:	2205      	movs	r2, #5
 800a952:	701a      	strb	r2, [r3, #0]
            break;
 800a954:	e1e7      	b.n	800ad26 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a956:	7bfb      	ldrb	r3, [r7, #15]
 800a958:	2b04      	cmp	r3, #4
 800a95a:	f040 81e4 	bne.w	800ad26 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a964:	4619      	mov	r1, r3
 800a966:	693a      	ldr	r2, [r7, #16]
 800a968:	2334      	movs	r3, #52	; 0x34
 800a96a:	fb03 f301 	mul.w	r3, r3, r1
 800a96e:	4413      	add	r3, r2
 800a970:	3390      	adds	r3, #144	; 0x90
 800a972:	2201      	movs	r2, #1
 800a974:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a97c:	4619      	mov	r1, r3
 800a97e:	693a      	ldr	r2, [r7, #16]
 800a980:	2334      	movs	r3, #52	; 0x34
 800a982:	fb03 f301 	mul.w	r3, r3, r1
 800a986:	4413      	add	r3, r2
 800a988:	3391      	adds	r3, #145	; 0x91
 800a98a:	2202      	movs	r2, #2
 800a98c:	701a      	strb	r2, [r3, #0]
            break;
 800a98e:	e1ca      	b.n	800ad26 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a996:	b2db      	uxtb	r3, r3
 800a998:	4619      	mov	r1, r3
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 fe64 	bl	800b668 <USBH_MSC_SCSI_TestUnitReady>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800a9a4:	7bbb      	ldrb	r3, [r7, #14]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d149      	bne.n	800aa3e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	693a      	ldr	r2, [r7, #16]
 800a9b4:	2334      	movs	r3, #52	; 0x34
 800a9b6:	fb03 f301 	mul.w	r3, r3, r1
 800a9ba:	4413      	add	r3, r2
 800a9bc:	3392      	adds	r3, #146	; 0x92
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d00c      	beq.n	800a9de <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	693a      	ldr	r2, [r7, #16]
 800a9ce:	2334      	movs	r3, #52	; 0x34
 800a9d0:	fb03 f301 	mul.w	r3, r3, r1
 800a9d4:	4413      	add	r3, r2
 800a9d6:	33c1      	adds	r3, #193	; 0xc1
 800a9d8:	2201      	movs	r2, #1
 800a9da:	701a      	strb	r2, [r3, #0]
 800a9dc:	e00b      	b.n	800a9f6 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	693a      	ldr	r2, [r7, #16]
 800a9e8:	2334      	movs	r3, #52	; 0x34
 800a9ea:	fb03 f301 	mul.w	r3, r3, r1
 800a9ee:	4413      	add	r3, r2
 800a9f0:	33c1      	adds	r3, #193	; 0xc1
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	693a      	ldr	r2, [r7, #16]
 800aa00:	2334      	movs	r3, #52	; 0x34
 800aa02:	fb03 f301 	mul.w	r3, r3, r1
 800aa06:	4413      	add	r3, r2
 800aa08:	3390      	adds	r3, #144	; 0x90
 800aa0a:	2203      	movs	r2, #3
 800aa0c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa14:	4619      	mov	r1, r3
 800aa16:	693a      	ldr	r2, [r7, #16]
 800aa18:	2334      	movs	r3, #52	; 0x34
 800aa1a:	fb03 f301 	mul.w	r3, r3, r1
 800aa1e:	4413      	add	r3, r2
 800aa20:	3391      	adds	r3, #145	; 0x91
 800aa22:	2200      	movs	r2, #0
 800aa24:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	693a      	ldr	r2, [r7, #16]
 800aa30:	2334      	movs	r3, #52	; 0x34
 800aa32:	fb03 f301 	mul.w	r3, r3, r1
 800aa36:	4413      	add	r3, r2
 800aa38:	3392      	adds	r3, #146	; 0x92
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800aa3e:	7bbb      	ldrb	r3, [r7, #14]
 800aa40:	2b02      	cmp	r3, #2
 800aa42:	d14a      	bne.n	800aada <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	693a      	ldr	r2, [r7, #16]
 800aa4e:	2334      	movs	r3, #52	; 0x34
 800aa50:	fb03 f301 	mul.w	r3, r3, r1
 800aa54:	4413      	add	r3, r2
 800aa56:	3392      	adds	r3, #146	; 0x92
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d00c      	beq.n	800aa78 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa64:	4619      	mov	r1, r3
 800aa66:	693a      	ldr	r2, [r7, #16]
 800aa68:	2334      	movs	r3, #52	; 0x34
 800aa6a:	fb03 f301 	mul.w	r3, r3, r1
 800aa6e:	4413      	add	r3, r2
 800aa70:	33c1      	adds	r3, #193	; 0xc1
 800aa72:	2201      	movs	r2, #1
 800aa74:	701a      	strb	r2, [r3, #0]
 800aa76:	e00b      	b.n	800aa90 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa7e:	4619      	mov	r1, r3
 800aa80:	693a      	ldr	r2, [r7, #16]
 800aa82:	2334      	movs	r3, #52	; 0x34
 800aa84:	fb03 f301 	mul.w	r3, r3, r1
 800aa88:	4413      	add	r3, r2
 800aa8a:	33c1      	adds	r3, #193	; 0xc1
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa96:	4619      	mov	r1, r3
 800aa98:	693a      	ldr	r2, [r7, #16]
 800aa9a:	2334      	movs	r3, #52	; 0x34
 800aa9c:	fb03 f301 	mul.w	r3, r3, r1
 800aaa0:	4413      	add	r3, r2
 800aaa2:	3390      	adds	r3, #144	; 0x90
 800aaa4:	2205      	movs	r2, #5
 800aaa6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aaae:	4619      	mov	r1, r3
 800aab0:	693a      	ldr	r2, [r7, #16]
 800aab2:	2334      	movs	r3, #52	; 0x34
 800aab4:	fb03 f301 	mul.w	r3, r3, r1
 800aab8:	4413      	add	r3, r2
 800aaba:	3391      	adds	r3, #145	; 0x91
 800aabc:	2201      	movs	r2, #1
 800aabe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aac6:	4619      	mov	r1, r3
 800aac8:	693a      	ldr	r2, [r7, #16]
 800aaca:	2334      	movs	r3, #52	; 0x34
 800aacc:	fb03 f301 	mul.w	r3, r3, r1
 800aad0:	4413      	add	r3, r2
 800aad2:	3392      	adds	r3, #146	; 0x92
 800aad4:	2202      	movs	r2, #2
 800aad6:	701a      	strb	r2, [r3, #0]
            break;
 800aad8:	e127      	b.n	800ad2a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800aada:	7bbb      	ldrb	r3, [r7, #14]
 800aadc:	2b04      	cmp	r3, #4
 800aade:	f040 8124 	bne.w	800ad2a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aae8:	4619      	mov	r1, r3
 800aaea:	693a      	ldr	r2, [r7, #16]
 800aaec:	2334      	movs	r3, #52	; 0x34
 800aaee:	fb03 f301 	mul.w	r3, r3, r1
 800aaf2:	4413      	add	r3, r2
 800aaf4:	3390      	adds	r3, #144	; 0x90
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ab00:	4619      	mov	r1, r3
 800ab02:	693a      	ldr	r2, [r7, #16]
 800ab04:	2334      	movs	r3, #52	; 0x34
 800ab06:	fb03 f301 	mul.w	r3, r3, r1
 800ab0a:	4413      	add	r3, r2
 800ab0c:	3391      	adds	r3, #145	; 0x91
 800ab0e:	2202      	movs	r2, #2
 800ab10:	701a      	strb	r2, [r3, #0]
            break;
 800ab12:	e10a      	b.n	800ad2a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ab1a:	b2d9      	uxtb	r1, r3
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ab22:	461a      	mov	r2, r3
 800ab24:	2334      	movs	r3, #52	; 0x34
 800ab26:	fb03 f302 	mul.w	r3, r3, r2
 800ab2a:	3390      	adds	r3, #144	; 0x90
 800ab2c:	693a      	ldr	r2, [r7, #16]
 800ab2e:	4413      	add	r3, r2
 800ab30:	3304      	adds	r3, #4
 800ab32:	461a      	mov	r2, r3
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 fdda 	bl	800b6ee <USBH_MSC_SCSI_ReadCapacity>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800ab3e:	7bfb      	ldrb	r3, [r7, #15]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d120      	bne.n	800ab86 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	693a      	ldr	r2, [r7, #16]
 800ab4e:	2334      	movs	r3, #52	; 0x34
 800ab50:	fb03 f301 	mul.w	r3, r3, r1
 800ab54:	4413      	add	r3, r2
 800ab56:	3390      	adds	r3, #144	; 0x90
 800ab58:	2201      	movs	r2, #1
 800ab5a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ab62:	4619      	mov	r1, r3
 800ab64:	693a      	ldr	r2, [r7, #16]
 800ab66:	2334      	movs	r3, #52	; 0x34
 800ab68:	fb03 f301 	mul.w	r3, r3, r1
 800ab6c:	4413      	add	r3, r2
 800ab6e:	3391      	adds	r3, #145	; 0x91
 800ab70:	2200      	movs	r2, #0
 800ab72:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	b29a      	uxth	r2, r3
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800ab84:	e0d3      	b.n	800ad2e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800ab86:	7bfb      	ldrb	r3, [r7, #15]
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	d10c      	bne.n	800aba6 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ab92:	4619      	mov	r1, r3
 800ab94:	693a      	ldr	r2, [r7, #16]
 800ab96:	2334      	movs	r3, #52	; 0x34
 800ab98:	fb03 f301 	mul.w	r3, r3, r1
 800ab9c:	4413      	add	r3, r2
 800ab9e:	3390      	adds	r3, #144	; 0x90
 800aba0:	2205      	movs	r2, #5
 800aba2:	701a      	strb	r2, [r3, #0]
            break;
 800aba4:	e0c3      	b.n	800ad2e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800aba6:	7bfb      	ldrb	r3, [r7, #15]
 800aba8:	2b04      	cmp	r3, #4
 800abaa:	f040 80c0 	bne.w	800ad2e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800abb4:	4619      	mov	r1, r3
 800abb6:	693a      	ldr	r2, [r7, #16]
 800abb8:	2334      	movs	r3, #52	; 0x34
 800abba:	fb03 f301 	mul.w	r3, r3, r1
 800abbe:	4413      	add	r3, r2
 800abc0:	3390      	adds	r3, #144	; 0x90
 800abc2:	2201      	movs	r2, #1
 800abc4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800abcc:	4619      	mov	r1, r3
 800abce:	693a      	ldr	r2, [r7, #16]
 800abd0:	2334      	movs	r3, #52	; 0x34
 800abd2:	fb03 f301 	mul.w	r3, r3, r1
 800abd6:	4413      	add	r3, r2
 800abd8:	3391      	adds	r3, #145	; 0x91
 800abda:	2202      	movs	r2, #2
 800abdc:	701a      	strb	r2, [r3, #0]
            break;
 800abde:	e0a6      	b.n	800ad2e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800abe6:	b2d9      	uxtb	r1, r3
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800abee:	461a      	mov	r2, r3
 800abf0:	2334      	movs	r3, #52	; 0x34
 800abf2:	fb03 f302 	mul.w	r3, r3, r2
 800abf6:	3398      	adds	r3, #152	; 0x98
 800abf8:	693a      	ldr	r2, [r7, #16]
 800abfa:	4413      	add	r3, r2
 800abfc:	3304      	adds	r3, #4
 800abfe:	461a      	mov	r2, r3
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f000 fe94 	bl	800b92e <USBH_MSC_SCSI_RequestSense>
 800ac06:	4603      	mov	r3, r0
 800ac08:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800ac0a:	7bfb      	ldrb	r3, [r7, #15]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d145      	bne.n	800ac9c <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ac16:	4619      	mov	r1, r3
 800ac18:	693a      	ldr	r2, [r7, #16]
 800ac1a:	2334      	movs	r3, #52	; 0x34
 800ac1c:	fb03 f301 	mul.w	r3, r3, r1
 800ac20:	4413      	add	r3, r2
 800ac22:	339c      	adds	r3, #156	; 0x9c
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	2b06      	cmp	r3, #6
 800ac28:	d00c      	beq.n	800ac44 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ac30:	4619      	mov	r1, r3
 800ac32:	693a      	ldr	r2, [r7, #16]
 800ac34:	2334      	movs	r3, #52	; 0x34
 800ac36:	fb03 f301 	mul.w	r3, r3, r1
 800ac3a:	4413      	add	r3, r2
 800ac3c:	339c      	adds	r3, #156	; 0x9c
 800ac3e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800ac40:	2b02      	cmp	r3, #2
 800ac42:	d117      	bne.n	800ac74 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 25c4 	ldr.w	r2, [r3, #1476]	; 0x5c4
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800ac50:	1ad3      	subs	r3, r2, r3
 800ac52:	f242 720f 	movw	r2, #9999	; 0x270f
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d80c      	bhi.n	800ac74 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ac60:	4619      	mov	r1, r3
 800ac62:	693a      	ldr	r2, [r7, #16]
 800ac64:	2334      	movs	r3, #52	; 0x34
 800ac66:	fb03 f301 	mul.w	r3, r3, r1
 800ac6a:	4413      	add	r3, r2
 800ac6c:	3390      	adds	r3, #144	; 0x90
 800ac6e:	2202      	movs	r2, #2
 800ac70:	701a      	strb	r2, [r3, #0]
                  break;
 800ac72:	e05f      	b.n	800ad34 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	693a      	ldr	r2, [r7, #16]
 800ac7e:	2334      	movs	r3, #52	; 0x34
 800ac80:	fb03 f301 	mul.w	r3, r3, r1
 800ac84:	4413      	add	r3, r2
 800ac86:	3390      	adds	r3, #144	; 0x90
 800ac88:	2201      	movs	r2, #1
 800ac8a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ac92:	3301      	adds	r3, #1
 800ac94:	b29a      	uxth	r2, r3
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800ac9c:	7bfb      	ldrb	r3, [r7, #15]
 800ac9e:	2b02      	cmp	r3, #2
 800aca0:	d10c      	bne.n	800acbc <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aca8:	4619      	mov	r1, r3
 800acaa:	693a      	ldr	r2, [r7, #16]
 800acac:	2334      	movs	r3, #52	; 0x34
 800acae:	fb03 f301 	mul.w	r3, r3, r1
 800acb2:	4413      	add	r3, r2
 800acb4:	3390      	adds	r3, #144	; 0x90
 800acb6:	2208      	movs	r2, #8
 800acb8:	701a      	strb	r2, [r3, #0]
            break;
 800acba:	e03a      	b.n	800ad32 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800acbc:	7bfb      	ldrb	r3, [r7, #15]
 800acbe:	2b04      	cmp	r3, #4
 800acc0:	d137      	bne.n	800ad32 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800acc8:	4619      	mov	r1, r3
 800acca:	693a      	ldr	r2, [r7, #16]
 800accc:	2334      	movs	r3, #52	; 0x34
 800acce:	fb03 f301 	mul.w	r3, r3, r1
 800acd2:	4413      	add	r3, r2
 800acd4:	3390      	adds	r3, #144	; 0x90
 800acd6:	2201      	movs	r2, #1
 800acd8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ace0:	4619      	mov	r1, r3
 800ace2:	693a      	ldr	r2, [r7, #16]
 800ace4:	2334      	movs	r3, #52	; 0x34
 800ace6:	fb03 f301 	mul.w	r3, r3, r1
 800acea:	4413      	add	r3, r2
 800acec:	3391      	adds	r3, #145	; 0x91
 800acee:	2202      	movs	r2, #2
 800acf0:	701a      	strb	r2, [r3, #0]
            break;
 800acf2:	e01e      	b.n	800ad32 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800acfa:	3301      	adds	r3, #1
 800acfc:	b29a      	uxth	r2, r3
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800ad04:	e016      	b.n	800ad34 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	2201      	movs	r2, #1
 800ad12:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 35d4 	ldr.w	r3, [r3, #1492]	; 0x5d4
 800ad1a:	2102      	movs	r1, #2
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	4798      	blx	r3
      break;
 800ad20:	e00c      	b.n	800ad3c <USBH_MSC_Process+0x514>
            break;
 800ad22:	bf00      	nop
 800ad24:	e00a      	b.n	800ad3c <USBH_MSC_Process+0x514>
            break;
 800ad26:	bf00      	nop
 800ad28:	e008      	b.n	800ad3c <USBH_MSC_Process+0x514>
            break;
 800ad2a:	bf00      	nop
 800ad2c:	e006      	b.n	800ad3c <USBH_MSC_Process+0x514>
            break;
 800ad2e:	bf00      	nop
 800ad30:	e004      	b.n	800ad3c <USBH_MSC_Process+0x514>
            break;
 800ad32:	bf00      	nop
      break;
 800ad34:	e002      	b.n	800ad3c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800ad36:	2300      	movs	r3, #0
 800ad38:	75fb      	strb	r3, [r7, #23]
      break;
 800ad3a:	bf00      	nop
  }
  return error;
 800ad3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3718      	adds	r7, #24
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop

0800ad48 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ad50:	2300      	movs	r3, #0
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	370c      	adds	r7, #12
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bc80      	pop	{r7}
 800ad5a:	4770      	bx	lr

0800ad5c <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b088      	sub	sp, #32
 800ad60:	af02      	add	r7, sp, #8
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	460b      	mov	r3, r1
 800ad66:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800ad6e:	69db      	ldr	r3, [r3, #28]
 800ad70:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800ad72:	2301      	movs	r3, #1
 800ad74:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800ad76:	2301      	movs	r3, #1
 800ad78:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800ad7a:	78fb      	ldrb	r3, [r7, #3]
 800ad7c:	693a      	ldr	r2, [r7, #16]
 800ad7e:	2134      	movs	r1, #52	; 0x34
 800ad80:	fb01 f303 	mul.w	r3, r1, r3
 800ad84:	4413      	add	r3, r2
 800ad86:	3390      	adds	r3, #144	; 0x90
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	2b07      	cmp	r3, #7
 800ad8c:	d03c      	beq.n	800ae08 <USBH_MSC_RdWrProcess+0xac>
 800ad8e:	2b07      	cmp	r3, #7
 800ad90:	f300 80a7 	bgt.w	800aee2 <USBH_MSC_RdWrProcess+0x186>
 800ad94:	2b05      	cmp	r3, #5
 800ad96:	d06c      	beq.n	800ae72 <USBH_MSC_RdWrProcess+0x116>
 800ad98:	2b06      	cmp	r3, #6
 800ad9a:	f040 80a2 	bne.w	800aee2 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800ad9e:	78f9      	ldrb	r1, [r7, #3]
 800ada0:	2300      	movs	r3, #0
 800ada2:	9300      	str	r3, [sp, #0]
 800ada4:	2300      	movs	r3, #0
 800ada6:	2200      	movs	r2, #0
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 fea4 	bl	800baf6 <USBH_MSC_SCSI_Read>
 800adae:	4603      	mov	r3, r0
 800adb0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800adb2:	7bfb      	ldrb	r3, [r7, #15]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d10b      	bne.n	800add0 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800adb8:	78fb      	ldrb	r3, [r7, #3]
 800adba:	693a      	ldr	r2, [r7, #16]
 800adbc:	2134      	movs	r1, #52	; 0x34
 800adbe:	fb01 f303 	mul.w	r3, r1, r3
 800adc2:	4413      	add	r3, r2
 800adc4:	3390      	adds	r3, #144	; 0x90
 800adc6:	2201      	movs	r2, #1
 800adc8:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800adca:	2300      	movs	r3, #0
 800adcc:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800adce:	e08a      	b.n	800aee6 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800add0:	7bfb      	ldrb	r3, [r7, #15]
 800add2:	2b02      	cmp	r3, #2
 800add4:	d109      	bne.n	800adea <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800add6:	78fb      	ldrb	r3, [r7, #3]
 800add8:	693a      	ldr	r2, [r7, #16]
 800adda:	2134      	movs	r1, #52	; 0x34
 800addc:	fb01 f303 	mul.w	r3, r1, r3
 800ade0:	4413      	add	r3, r2
 800ade2:	3390      	adds	r3, #144	; 0x90
 800ade4:	2205      	movs	r2, #5
 800ade6:	701a      	strb	r2, [r3, #0]
      break;
 800ade8:	e07d      	b.n	800aee6 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800adea:	7bfb      	ldrb	r3, [r7, #15]
 800adec:	2b04      	cmp	r3, #4
 800adee:	d17a      	bne.n	800aee6 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800adf0:	78fb      	ldrb	r3, [r7, #3]
 800adf2:	693a      	ldr	r2, [r7, #16]
 800adf4:	2134      	movs	r1, #52	; 0x34
 800adf6:	fb01 f303 	mul.w	r3, r1, r3
 800adfa:	4413      	add	r3, r2
 800adfc:	3390      	adds	r3, #144	; 0x90
 800adfe:	2208      	movs	r2, #8
 800ae00:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800ae02:	2302      	movs	r3, #2
 800ae04:	75fb      	strb	r3, [r7, #23]
      break;
 800ae06:	e06e      	b.n	800aee6 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800ae08:	78f9      	ldrb	r1, [r7, #3]
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	9300      	str	r3, [sp, #0]
 800ae0e:	2300      	movs	r3, #0
 800ae10:	2200      	movs	r2, #0
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 fe04 	bl	800ba20 <USBH_MSC_SCSI_Write>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800ae1c:	7bfb      	ldrb	r3, [r7, #15]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d10b      	bne.n	800ae3a <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800ae22:	78fb      	ldrb	r3, [r7, #3]
 800ae24:	693a      	ldr	r2, [r7, #16]
 800ae26:	2134      	movs	r1, #52	; 0x34
 800ae28:	fb01 f303 	mul.w	r3, r1, r3
 800ae2c:	4413      	add	r3, r2
 800ae2e:	3390      	adds	r3, #144	; 0x90
 800ae30:	2201      	movs	r2, #1
 800ae32:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800ae34:	2300      	movs	r3, #0
 800ae36:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ae38:	e057      	b.n	800aeea <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800ae3a:	7bfb      	ldrb	r3, [r7, #15]
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	d109      	bne.n	800ae54 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800ae40:	78fb      	ldrb	r3, [r7, #3]
 800ae42:	693a      	ldr	r2, [r7, #16]
 800ae44:	2134      	movs	r1, #52	; 0x34
 800ae46:	fb01 f303 	mul.w	r3, r1, r3
 800ae4a:	4413      	add	r3, r2
 800ae4c:	3390      	adds	r3, #144	; 0x90
 800ae4e:	2205      	movs	r2, #5
 800ae50:	701a      	strb	r2, [r3, #0]
      break;
 800ae52:	e04a      	b.n	800aeea <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ae54:	7bfb      	ldrb	r3, [r7, #15]
 800ae56:	2b04      	cmp	r3, #4
 800ae58:	d147      	bne.n	800aeea <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800ae5a:	78fb      	ldrb	r3, [r7, #3]
 800ae5c:	693a      	ldr	r2, [r7, #16]
 800ae5e:	2134      	movs	r1, #52	; 0x34
 800ae60:	fb01 f303 	mul.w	r3, r1, r3
 800ae64:	4413      	add	r3, r2
 800ae66:	3390      	adds	r3, #144	; 0x90
 800ae68:	2208      	movs	r2, #8
 800ae6a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800ae6c:	2302      	movs	r3, #2
 800ae6e:	75fb      	strb	r3, [r7, #23]
      break;
 800ae70:	e03b      	b.n	800aeea <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800ae72:	78fb      	ldrb	r3, [r7, #3]
 800ae74:	2234      	movs	r2, #52	; 0x34
 800ae76:	fb02 f303 	mul.w	r3, r2, r3
 800ae7a:	3398      	adds	r3, #152	; 0x98
 800ae7c:	693a      	ldr	r2, [r7, #16]
 800ae7e:	4413      	add	r3, r2
 800ae80:	1d1a      	adds	r2, r3, #4
 800ae82:	78fb      	ldrb	r3, [r7, #3]
 800ae84:	4619      	mov	r1, r3
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 fd51 	bl	800b92e <USBH_MSC_SCSI_RequestSense>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800ae90:	7bfb      	ldrb	r3, [r7, #15]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d113      	bne.n	800aebe <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800ae96:	78fb      	ldrb	r3, [r7, #3]
 800ae98:	693a      	ldr	r2, [r7, #16]
 800ae9a:	2134      	movs	r1, #52	; 0x34
 800ae9c:	fb01 f303 	mul.w	r3, r1, r3
 800aea0:	4413      	add	r3, r2
 800aea2:	3390      	adds	r3, #144	; 0x90
 800aea4:	2201      	movs	r2, #1
 800aea6:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800aea8:	78fb      	ldrb	r3, [r7, #3]
 800aeaa:	693a      	ldr	r2, [r7, #16]
 800aeac:	2134      	movs	r1, #52	; 0x34
 800aeae:	fb01 f303 	mul.w	r3, r1, r3
 800aeb2:	4413      	add	r3, r2
 800aeb4:	3391      	adds	r3, #145	; 0x91
 800aeb6:	2202      	movs	r2, #2
 800aeb8:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800aeba:	2302      	movs	r3, #2
 800aebc:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800aebe:	7bfb      	ldrb	r3, [r7, #15]
 800aec0:	2b02      	cmp	r3, #2
 800aec2:	d014      	beq.n	800aeee <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800aec4:	7bfb      	ldrb	r3, [r7, #15]
 800aec6:	2b04      	cmp	r3, #4
 800aec8:	d111      	bne.n	800aeee <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800aeca:	78fb      	ldrb	r3, [r7, #3]
 800aecc:	693a      	ldr	r2, [r7, #16]
 800aece:	2134      	movs	r1, #52	; 0x34
 800aed0:	fb01 f303 	mul.w	r3, r1, r3
 800aed4:	4413      	add	r3, r2
 800aed6:	3390      	adds	r3, #144	; 0x90
 800aed8:	2208      	movs	r2, #8
 800aeda:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800aedc:	2302      	movs	r3, #2
 800aede:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aee0:	e005      	b.n	800aeee <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800aee2:	bf00      	nop
 800aee4:	e004      	b.n	800aef0 <USBH_MSC_RdWrProcess+0x194>
      break;
 800aee6:	bf00      	nop
 800aee8:	e002      	b.n	800aef0 <USBH_MSC_RdWrProcess+0x194>
      break;
 800aeea:	bf00      	nop
 800aeec:	e000      	b.n	800aef0 <USBH_MSC_RdWrProcess+0x194>
      break;
 800aeee:	bf00      	nop

  }
  return error;
 800aef0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3718      	adds	r7, #24
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800aefa:	b480      	push	{r7}
 800aefc:	b085      	sub	sp, #20
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
 800af02:	460b      	mov	r3, r1
 800af04:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800af0c:	69db      	ldr	r3, [r3, #28]
 800af0e:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	b2db      	uxtb	r3, r3
 800af16:	2b0b      	cmp	r3, #11
 800af18:	d10c      	bne.n	800af34 <USBH_MSC_UnitIsReady+0x3a>
 800af1a:	78fb      	ldrb	r3, [r7, #3]
 800af1c:	68ba      	ldr	r2, [r7, #8]
 800af1e:	2134      	movs	r1, #52	; 0x34
 800af20:	fb01 f303 	mul.w	r3, r1, r3
 800af24:	4413      	add	r3, r2
 800af26:	3391      	adds	r3, #145	; 0x91
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d102      	bne.n	800af34 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800af2e:	2301      	movs	r3, #1
 800af30:	73fb      	strb	r3, [r7, #15]
 800af32:	e001      	b.n	800af38 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800af34:	2300      	movs	r3, #0
 800af36:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800af38:	7bfb      	ldrb	r3, [r7, #15]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3714      	adds	r7, #20
 800af3e:	46bd      	mov	sp, r7
 800af40:	bc80      	pop	{r7}
 800af42:	4770      	bx	lr

0800af44 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b086      	sub	sp, #24
 800af48:	af00      	add	r7, sp, #0
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	460b      	mov	r3, r1
 800af4e:	607a      	str	r2, [r7, #4]
 800af50:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800af58:	69db      	ldr	r3, [r3, #28]
 800af5a:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	b2db      	uxtb	r3, r3
 800af62:	2b0b      	cmp	r3, #11
 800af64:	d10d      	bne.n	800af82 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800af66:	7afb      	ldrb	r3, [r7, #11]
 800af68:	2234      	movs	r2, #52	; 0x34
 800af6a:	fb02 f303 	mul.w	r3, r2, r3
 800af6e:	3390      	adds	r3, #144	; 0x90
 800af70:	697a      	ldr	r2, [r7, #20]
 800af72:	4413      	add	r3, r2
 800af74:	2234      	movs	r2, #52	; 0x34
 800af76:	4619      	mov	r1, r3
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f005 f817 	bl	800ffac <memcpy>
    return USBH_OK;
 800af7e:	2300      	movs	r3, #0
 800af80:	e000      	b.n	800af84 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800af82:	2302      	movs	r3, #2
  }
}
 800af84:	4618      	mov	r0, r3
 800af86:	3718      	adds	r7, #24
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b088      	sub	sp, #32
 800af90:	af02      	add	r7, sp, #8
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	607a      	str	r2, [r7, #4]
 800af96:	603b      	str	r3, [r7, #0]
 800af98:	460b      	mov	r3, r1
 800af9a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800afa2:	69db      	ldr	r3, [r3, #28]
 800afa4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f893 3520 	ldrb.w	r3, [r3, #1312]	; 0x520
 800afac:	b2db      	uxtb	r3, r3
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d00e      	beq.n	800afd0 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800afb8:	2b0b      	cmp	r3, #11
 800afba:	d109      	bne.n	800afd0 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800afbc:	7afb      	ldrb	r3, [r7, #11]
 800afbe:	697a      	ldr	r2, [r7, #20]
 800afc0:	2134      	movs	r1, #52	; 0x34
 800afc2:	fb01 f303 	mul.w	r3, r1, r3
 800afc6:	4413      	add	r3, r2
 800afc8:	3390      	adds	r3, #144	; 0x90
 800afca:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d001      	beq.n	800afd4 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800afd0:	2302      	movs	r3, #2
 800afd2:	e040      	b.n	800b056 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	2206      	movs	r2, #6
 800afd8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800afda:	7afb      	ldrb	r3, [r7, #11]
 800afdc:	697a      	ldr	r2, [r7, #20]
 800afde:	2134      	movs	r1, #52	; 0x34
 800afe0:	fb01 f303 	mul.w	r3, r1, r3
 800afe4:	4413      	add	r3, r2
 800afe6:	3390      	adds	r3, #144	; 0x90
 800afe8:	2206      	movs	r2, #6
 800afea:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800afec:	7afb      	ldrb	r3, [r7, #11]
 800afee:	b29a      	uxth	r2, r3
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800aff6:	7af9      	ldrb	r1, [r7, #11]
 800aff8:	6a3b      	ldr	r3, [r7, #32]
 800affa:	9300      	str	r3, [sp, #0]
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f000 fd78 	bl	800baf6 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f8d3 35c4 	ldr.w	r3, [r3, #1476]	; 0x5c4
 800b00c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b00e:	e016      	b.n	800b03e <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f8d3 25c4 	ldr.w	r2, [r3, #1476]	; 0x5c4
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	1ad2      	subs	r2, r2, r3
 800b01a:	6a3b      	ldr	r3, [r7, #32]
 800b01c:	f242 7110 	movw	r1, #10000	; 0x2710
 800b020:	fb01 f303 	mul.w	r3, r1, r3
 800b024:	429a      	cmp	r2, r3
 800b026:	d805      	bhi.n	800b034 <USBH_MSC_Read+0xa8>
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f893 3520 	ldrb.w	r3, [r3, #1312]	; 0x520
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	2b00      	cmp	r3, #0
 800b032:	d104      	bne.n	800b03e <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	2201      	movs	r2, #1
 800b038:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800b03a:	2302      	movs	r3, #2
 800b03c:	e00b      	b.n	800b056 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b03e:	7afb      	ldrb	r3, [r7, #11]
 800b040:	4619      	mov	r1, r3
 800b042:	68f8      	ldr	r0, [r7, #12]
 800b044:	f7ff fe8a 	bl	800ad5c <USBH_MSC_RdWrProcess>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	d0e0      	beq.n	800b010 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	2201      	movs	r2, #1
 800b052:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800b054:	2300      	movs	r3, #0
}
 800b056:	4618      	mov	r0, r3
 800b058:	3718      	adds	r7, #24
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b088      	sub	sp, #32
 800b062:	af02      	add	r7, sp, #8
 800b064:	60f8      	str	r0, [r7, #12]
 800b066:	607a      	str	r2, [r7, #4]
 800b068:	603b      	str	r3, [r7, #0]
 800b06a:	460b      	mov	r3, r1
 800b06c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800b074:	69db      	ldr	r3, [r3, #28]
 800b076:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f893 3520 	ldrb.w	r3, [r3, #1312]	; 0x520
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	2b00      	cmp	r3, #0
 800b082:	d00e      	beq.n	800b0a2 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800b08a:	2b0b      	cmp	r3, #11
 800b08c:	d109      	bne.n	800b0a2 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800b08e:	7afb      	ldrb	r3, [r7, #11]
 800b090:	697a      	ldr	r2, [r7, #20]
 800b092:	2134      	movs	r1, #52	; 0x34
 800b094:	fb01 f303 	mul.w	r3, r1, r3
 800b098:	4413      	add	r3, r2
 800b09a:	3390      	adds	r3, #144	; 0x90
 800b09c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d001      	beq.n	800b0a6 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800b0a2:	2302      	movs	r3, #2
 800b0a4:	e040      	b.n	800b128 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	2207      	movs	r2, #7
 800b0aa:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800b0ac:	7afb      	ldrb	r3, [r7, #11]
 800b0ae:	697a      	ldr	r2, [r7, #20]
 800b0b0:	2134      	movs	r1, #52	; 0x34
 800b0b2:	fb01 f303 	mul.w	r3, r1, r3
 800b0b6:	4413      	add	r3, r2
 800b0b8:	3390      	adds	r3, #144	; 0x90
 800b0ba:	2207      	movs	r2, #7
 800b0bc:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800b0be:	7afb      	ldrb	r3, [r7, #11]
 800b0c0:	b29a      	uxth	r2, r3
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800b0c8:	7af9      	ldrb	r1, [r7, #11]
 800b0ca:	6a3b      	ldr	r3, [r7, #32]
 800b0cc:	9300      	str	r3, [sp, #0]
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	68f8      	ldr	r0, [r7, #12]
 800b0d4:	f000 fca4 	bl	800ba20 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f8d3 35c4 	ldr.w	r3, [r3, #1476]	; 0x5c4
 800b0de:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b0e0:	e016      	b.n	800b110 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f8d3 25c4 	ldr.w	r2, [r3, #1476]	; 0x5c4
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	1ad2      	subs	r2, r2, r3
 800b0ec:	6a3b      	ldr	r3, [r7, #32]
 800b0ee:	f242 7110 	movw	r1, #10000	; 0x2710
 800b0f2:	fb01 f303 	mul.w	r3, r1, r3
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d805      	bhi.n	800b106 <USBH_MSC_Write+0xa8>
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f893 3520 	ldrb.w	r3, [r3, #1312]	; 0x520
 800b100:	b2db      	uxtb	r3, r3
 800b102:	2b00      	cmp	r3, #0
 800b104:	d104      	bne.n	800b110 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	2201      	movs	r2, #1
 800b10a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800b10c:	2302      	movs	r3, #2
 800b10e:	e00b      	b.n	800b128 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b110:	7afb      	ldrb	r3, [r7, #11]
 800b112:	4619      	mov	r1, r3
 800b114:	68f8      	ldr	r0, [r7, #12]
 800b116:	f7ff fe21 	bl	800ad5c <USBH_MSC_RdWrProcess>
 800b11a:	4603      	mov	r3, r0
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d0e0      	beq.n	800b0e2 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	2201      	movs	r2, #1
 800b124:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800b126:	2300      	movs	r3, #0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3718      	adds	r7, #24
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2221      	movs	r2, #33	; 0x21
 800b13c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	22ff      	movs	r2, #255	; 0xff
 800b142:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2200      	movs	r2, #0
 800b14e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800b156:	2200      	movs	r2, #0
 800b158:	2100      	movs	r1, #0
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f001 fda2 	bl	800cca4 <USBH_CtlReq>
 800b160:	4603      	mov	r3, r0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3708      	adds	r7, #8
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b082      	sub	sp, #8
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
 800b172:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	22a1      	movs	r2, #161	; 0xa1
 800b178:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	22fe      	movs	r2, #254	; 0xfe
 800b17e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2201      	movs	r2, #1
 800b190:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800b192:	2201      	movs	r2, #1
 800b194:	6839      	ldr	r1, [r7, #0]
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f001 fd84 	bl	800cca4 <USBH_CtlReq>
 800b19c:	4603      	mov	r3, r0
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3708      	adds	r7, #8
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
	...

0800b1a8 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b085      	sub	sp, #20
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800b1b6:	69db      	ldr	r3, [r3, #28]
 800b1b8:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	4a09      	ldr	r2, [pc, #36]	; (800b1e4 <USBH_MSC_BOT_Init+0x3c>)
 800b1be:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	4a09      	ldr	r2, [pc, #36]	; (800b1e8 <USBH_MSC_BOT_Init+0x40>)
 800b1c4:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800b1d6:	2300      	movs	r3, #0
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3714      	adds	r7, #20
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bc80      	pop	{r7}
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop
 800b1e4:	43425355 	.word	0x43425355
 800b1e8:	20304050 	.word	0x20304050

0800b1ec <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b088      	sub	sp, #32
 800b1f0:	af02      	add	r7, sp, #8
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800b200:	2301      	movs	r3, #1
 800b202:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b204:	2300      	movs	r3, #0
 800b206:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800b20e:	69db      	ldr	r3, [r3, #28]
 800b210:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800b212:	2300      	movs	r3, #0
 800b214:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b21c:	3b01      	subs	r3, #1
 800b21e:	2b0a      	cmp	r3, #10
 800b220:	f200 819e 	bhi.w	800b560 <USBH_MSC_BOT_Process+0x374>
 800b224:	a201      	add	r2, pc, #4	; (adr r2, 800b22c <USBH_MSC_BOT_Process+0x40>)
 800b226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b22a:	bf00      	nop
 800b22c:	0800b259 	.word	0x0800b259
 800b230:	0800b281 	.word	0x0800b281
 800b234:	0800b2eb 	.word	0x0800b2eb
 800b238:	0800b309 	.word	0x0800b309
 800b23c:	0800b38d 	.word	0x0800b38d
 800b240:	0800b3af 	.word	0x0800b3af
 800b244:	0800b447 	.word	0x0800b447
 800b248:	0800b463 	.word	0x0800b463
 800b24c:	0800b4b5 	.word	0x0800b4b5
 800b250:	0800b4e5 	.word	0x0800b4e5
 800b254:	0800b547 	.word	0x0800b547
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	78fa      	ldrb	r2, [r7, #3]
 800b25c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	2202      	movs	r2, #2
 800b264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	795b      	ldrb	r3, [r3, #5]
 800b272:	2201      	movs	r2, #1
 800b274:	9200      	str	r2, [sp, #0]
 800b276:	221f      	movs	r2, #31
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f001 ff22 	bl	800d0c2 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800b27e:	e17e      	b.n	800b57e <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	795b      	ldrb	r3, [r3, #5]
 800b284:	4619      	mov	r1, r3
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f004 fd7a 	bl	800fd80 <USBH_LL_GetURBState>
 800b28c:	4603      	mov	r3, r0
 800b28e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b290:	7d3b      	ldrb	r3, [r7, #20]
 800b292:	2b01      	cmp	r3, #1
 800b294:	d118      	bne.n	800b2c8 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d00f      	beq.n	800b2be <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800b2a4:	b25b      	sxtb	r3, r3
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	da04      	bge.n	800b2b4 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	2203      	movs	r2, #3
 800b2ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b2b2:	e157      	b.n	800b564 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	2205      	movs	r2, #5
 800b2b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b2bc:	e152      	b.n	800b564 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	2207      	movs	r2, #7
 800b2c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b2c6:	e14d      	b.n	800b564 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b2c8:	7d3b      	ldrb	r3, [r7, #20]
 800b2ca:	2b02      	cmp	r3, #2
 800b2cc:	d104      	bne.n	800b2d8 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b2d6:	e145      	b.n	800b564 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800b2d8:	7d3b      	ldrb	r3, [r7, #20]
 800b2da:	2b05      	cmp	r3, #5
 800b2dc:	f040 8142 	bne.w	800b564 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	220a      	movs	r2, #10
 800b2e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b2e8:	e13c      	b.n	800b564 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	895a      	ldrh	r2, [r3, #10]
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	791b      	ldrb	r3, [r3, #4]
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f001 ff07 	bl	800d10c <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	2204      	movs	r2, #4
 800b302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800b306:	e13a      	b.n	800b57e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	791b      	ldrb	r3, [r3, #4]
 800b30c:	4619      	mov	r1, r3
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f004 fd36 	bl	800fd80 <USBH_LL_GetURBState>
 800b314:	4603      	mov	r3, r0
 800b316:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b318:	7d3b      	ldrb	r3, [r7, #20]
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d12d      	bne.n	800b37a <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b322:	693a      	ldr	r2, [r7, #16]
 800b324:	8952      	ldrh	r2, [r2, #10]
 800b326:	4293      	cmp	r3, r2
 800b328:	d910      	bls.n	800b34c <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b330:	693a      	ldr	r2, [r7, #16]
 800b332:	8952      	ldrh	r2, [r2, #10]
 800b334:	441a      	add	r2, r3
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b340:	693a      	ldr	r2, [r7, #16]
 800b342:	8952      	ldrh	r2, [r2, #10]
 800b344:	1a9a      	subs	r2, r3, r2
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	65da      	str	r2, [r3, #92]	; 0x5c
 800b34a:	e002      	b.n	800b352 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	2200      	movs	r2, #0
 800b350:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00a      	beq.n	800b370 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	895a      	ldrh	r2, [r3, #10]
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	791b      	ldrb	r3, [r3, #4]
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f001 fecf 	bl	800d10c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800b36e:	e0fb      	b.n	800b568 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	2207      	movs	r2, #7
 800b374:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b378:	e0f6      	b.n	800b568 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800b37a:	7d3b      	ldrb	r3, [r7, #20]
 800b37c:	2b05      	cmp	r3, #5
 800b37e:	f040 80f3 	bne.w	800b568 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	2209      	movs	r2, #9
 800b386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b38a:	e0ed      	b.n	800b568 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	891a      	ldrh	r2, [r3, #8]
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	795b      	ldrb	r3, [r3, #5]
 800b39a:	2001      	movs	r0, #1
 800b39c:	9000      	str	r0, [sp, #0]
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f001 fe8f 	bl	800d0c2 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	2206      	movs	r2, #6
 800b3a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b3ac:	e0e7      	b.n	800b57e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	795b      	ldrb	r3, [r3, #5]
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f004 fce3 	bl	800fd80 <USBH_LL_GetURBState>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b3be:	7d3b      	ldrb	r3, [r7, #20]
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d12f      	bne.n	800b424 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3c8:	693a      	ldr	r2, [r7, #16]
 800b3ca:	8912      	ldrh	r2, [r2, #8]
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d910      	bls.n	800b3f2 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3d6:	693a      	ldr	r2, [r7, #16]
 800b3d8:	8912      	ldrh	r2, [r2, #8]
 800b3da:	441a      	add	r2, r3
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3e6:	693a      	ldr	r2, [r7, #16]
 800b3e8:	8912      	ldrh	r2, [r2, #8]
 800b3ea:	1a9a      	subs	r2, r3, r2
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	65da      	str	r2, [r3, #92]	; 0x5c
 800b3f0:	e002      	b.n	800b3f8 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d00c      	beq.n	800b41a <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	891a      	ldrh	r2, [r3, #8]
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	795b      	ldrb	r3, [r3, #5]
 800b40e:	2001      	movs	r0, #1
 800b410:	9000      	str	r0, [sp, #0]
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f001 fe55 	bl	800d0c2 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800b418:	e0a8      	b.n	800b56c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	2207      	movs	r2, #7
 800b41e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b422:	e0a3      	b.n	800b56c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b424:	7d3b      	ldrb	r3, [r7, #20]
 800b426:	2b02      	cmp	r3, #2
 800b428:	d104      	bne.n	800b434 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	2205      	movs	r2, #5
 800b42e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b432:	e09b      	b.n	800b56c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800b434:	7d3b      	ldrb	r3, [r7, #20]
 800b436:	2b05      	cmp	r3, #5
 800b438:	f040 8098 	bne.w	800b56c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	220a      	movs	r2, #10
 800b440:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b444:	e092      	b.n	800b56c <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	791b      	ldrb	r3, [r3, #4]
 800b450:	220d      	movs	r2, #13
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f001 fe5a 	bl	800d10c <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	2208      	movs	r2, #8
 800b45c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b460:	e08d      	b.n	800b57e <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	791b      	ldrb	r3, [r3, #4]
 800b466:	4619      	mov	r1, r3
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f004 fc89 	bl	800fd80 <USBH_LL_GetURBState>
 800b46e:	4603      	mov	r3, r0
 800b470:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800b472:	7d3b      	ldrb	r3, [r7, #20]
 800b474:	2b01      	cmp	r3, #1
 800b476:	d115      	bne.n	800b4a4 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	2201      	movs	r2, #1
 800b484:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f000 f8a9 	bl	800b5e0 <USBH_MSC_DecodeCSW>
 800b48e:	4603      	mov	r3, r0
 800b490:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800b492:	7d7b      	ldrb	r3, [r7, #21]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d102      	bne.n	800b49e <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800b498:	2300      	movs	r3, #0
 800b49a:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800b49c:	e068      	b.n	800b570 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800b49e:	2302      	movs	r3, #2
 800b4a0:	75fb      	strb	r3, [r7, #23]
      break;
 800b4a2:	e065      	b.n	800b570 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800b4a4:	7d3b      	ldrb	r3, [r7, #20]
 800b4a6:	2b05      	cmp	r3, #5
 800b4a8:	d162      	bne.n	800b570 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	2209      	movs	r2, #9
 800b4ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b4b2:	e05d      	b.n	800b570 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800b4b4:	78fb      	ldrb	r3, [r7, #3]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 f864 	bl	800b588 <USBH_MSC_BOT_Abort>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b4c4:	7dbb      	ldrb	r3, [r7, #22]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d104      	bne.n	800b4d4 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	2207      	movs	r2, #7
 800b4ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800b4d2:	e04f      	b.n	800b574 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800b4d4:	7dbb      	ldrb	r3, [r7, #22]
 800b4d6:	2b04      	cmp	r3, #4
 800b4d8:	d14c      	bne.n	800b574 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	220b      	movs	r2, #11
 800b4de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b4e2:	e047      	b.n	800b574 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800b4e4:	78fb      	ldrb	r3, [r7, #3]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f000 f84c 	bl	800b588 <USBH_MSC_BOT_Abort>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b4f4:	7dbb      	ldrb	r3, [r7, #22]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d11d      	bne.n	800b536 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	795b      	ldrb	r3, [r3, #5]
 800b4fe:	4619      	mov	r1, r3
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f004 fc96 	bl	800fe32 <USBH_LL_GetToggle>
 800b506:	4603      	mov	r3, r0
 800b508:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	7959      	ldrb	r1, [r3, #5]
 800b50e:	7bfb      	ldrb	r3, [r7, #15]
 800b510:	f1c3 0301 	rsb	r3, r3, #1
 800b514:	b2db      	uxtb	r3, r3
 800b516:	461a      	mov	r2, r3
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f004 fc5b 	bl	800fdd4 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	791b      	ldrb	r3, [r3, #4]
 800b522:	2200      	movs	r2, #0
 800b524:	4619      	mov	r1, r3
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f004 fc54 	bl	800fdd4 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	2209      	movs	r2, #9
 800b530:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800b534:	e020      	b.n	800b578 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800b536:	7dbb      	ldrb	r3, [r7, #22]
 800b538:	2b04      	cmp	r3, #4
 800b53a:	d11d      	bne.n	800b578 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	220b      	movs	r2, #11
 800b540:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b544:	e018      	b.n	800b578 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f7ff fdf2 	bl	800b130 <USBH_MSC_BOT_REQ_Reset>
 800b54c:	4603      	mov	r3, r0
 800b54e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800b550:	7dfb      	ldrb	r3, [r7, #23]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d112      	bne.n	800b57c <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	2201      	movs	r2, #1
 800b55a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800b55e:	e00d      	b.n	800b57c <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800b560:	bf00      	nop
 800b562:	e00c      	b.n	800b57e <USBH_MSC_BOT_Process+0x392>
      break;
 800b564:	bf00      	nop
 800b566:	e00a      	b.n	800b57e <USBH_MSC_BOT_Process+0x392>
      break;
 800b568:	bf00      	nop
 800b56a:	e008      	b.n	800b57e <USBH_MSC_BOT_Process+0x392>
      break;
 800b56c:	bf00      	nop
 800b56e:	e006      	b.n	800b57e <USBH_MSC_BOT_Process+0x392>
      break;
 800b570:	bf00      	nop
 800b572:	e004      	b.n	800b57e <USBH_MSC_BOT_Process+0x392>
      break;
 800b574:	bf00      	nop
 800b576:	e002      	b.n	800b57e <USBH_MSC_BOT_Process+0x392>
      break;
 800b578:	bf00      	nop
 800b57a:	e000      	b.n	800b57e <USBH_MSC_BOT_Process+0x392>
      break;
 800b57c:	bf00      	nop
  }
  return status;
 800b57e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b580:	4618      	mov	r0, r3
 800b582:	3718      	adds	r7, #24
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	460b      	mov	r3, r1
 800b592:	70fb      	strb	r3, [r7, #3]
 800b594:	4613      	mov	r3, r2
 800b596:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800b598:	2302      	movs	r3, #2
 800b59a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800b5a2:	69db      	ldr	r3, [r3, #28]
 800b5a4:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800b5a6:	78bb      	ldrb	r3, [r7, #2]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d002      	beq.n	800b5b2 <USBH_MSC_BOT_Abort+0x2a>
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d009      	beq.n	800b5c4 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800b5b0:	e011      	b.n	800b5d6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	79db      	ldrb	r3, [r3, #7]
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f001 f998 	bl	800c8ee <USBH_ClrFeature>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	73fb      	strb	r3, [r7, #15]
      break;
 800b5c2:	e008      	b.n	800b5d6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	799b      	ldrb	r3, [r3, #6]
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f001 f98f 	bl	800c8ee <USBH_ClrFeature>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	73fb      	strb	r3, [r7, #15]
      break;
 800b5d4:	bf00      	nop
  }
  return status;
 800b5d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3710      	adds	r7, #16
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800b5ee:	69db      	ldr	r3, [r3, #28]
 800b5f0:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	791b      	ldrb	r3, [r3, #4]
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f004 fb2d 	bl	800fc5c <USBH_LL_GetLastXferSize>
 800b602:	4603      	mov	r3, r0
 800b604:	2b0d      	cmp	r3, #13
 800b606:	d002      	beq.n	800b60e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800b608:	2302      	movs	r3, #2
 800b60a:	73fb      	strb	r3, [r7, #15]
 800b60c:	e024      	b.n	800b658 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b612:	4a14      	ldr	r2, [pc, #80]	; (800b664 <USBH_MSC_DecodeCSW+0x84>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d11d      	bne.n	800b654 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b620:	429a      	cmp	r2, r3
 800b622:	d119      	bne.n	800b658 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d102      	bne.n	800b634 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800b62e:	2300      	movs	r3, #0
 800b630:	73fb      	strb	r3, [r7, #15]
 800b632:	e011      	b.n	800b658 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d102      	bne.n	800b644 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800b63e:	2301      	movs	r3, #1
 800b640:	73fb      	strb	r3, [r7, #15]
 800b642:	e009      	b.n	800b658 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b64a:	2b02      	cmp	r3, #2
 800b64c:	d104      	bne.n	800b658 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800b64e:	2302      	movs	r3, #2
 800b650:	73fb      	strb	r3, [r7, #15]
 800b652:	e001      	b.n	800b658 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800b654:	2302      	movs	r3, #2
 800b656:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800b658:	7bfb      	ldrb	r3, [r7, #15]
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3710      	adds	r7, #16
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	53425355 	.word	0x53425355

0800b668 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	460b      	mov	r3, r1
 800b672:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b674:	2302      	movs	r3, #2
 800b676:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800b67e:	69db      	ldr	r3, [r3, #28]
 800b680:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d002      	beq.n	800b692 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800b68c:	2b02      	cmp	r3, #2
 800b68e:	d021      	beq.n	800b6d4 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b690:	e028      	b.n	800b6e4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	2200      	movs	r2, #0
 800b696:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	2200      	movs	r2, #0
 800b69c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	220a      	movs	r2, #10
 800b6a4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	3363      	adds	r3, #99	; 0x63
 800b6ac:	2210      	movs	r2, #16
 800b6ae:	2100      	movs	r1, #0
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f004 fc89 	bl	800ffc8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	2202      	movs	r2, #2
 800b6ca:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	73fb      	strb	r3, [r7, #15]
      break;
 800b6d2:	e007      	b.n	800b6e4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b6d4:	78fb      	ldrb	r3, [r7, #3]
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f7ff fd87 	bl	800b1ec <USBH_MSC_BOT_Process>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	73fb      	strb	r3, [r7, #15]
      break;
 800b6e2:	bf00      	nop
  }

  return error;
 800b6e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3710      	adds	r7, #16
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}

0800b6ee <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b086      	sub	sp, #24
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	60f8      	str	r0, [r7, #12]
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	607a      	str	r2, [r7, #4]
 800b6fa:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800b706:	69db      	ldr	r3, [r3, #28]
 800b708:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b710:	2b01      	cmp	r3, #1
 800b712:	d002      	beq.n	800b71a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800b714:	2b02      	cmp	r3, #2
 800b716:	d027      	beq.n	800b768 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800b718:	e05f      	b.n	800b7da <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	2208      	movs	r2, #8
 800b71e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	2280      	movs	r2, #128	; 0x80
 800b724:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	220a      	movs	r2, #10
 800b72c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	3363      	adds	r3, #99	; 0x63
 800b734:	2210      	movs	r2, #16
 800b736:	2100      	movs	r1, #0
 800b738:	4618      	mov	r0, r3
 800b73a:	f004 fc45 	bl	800ffc8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	2225      	movs	r2, #37	; 0x25
 800b742:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	2201      	movs	r2, #1
 800b74a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	2202      	movs	r2, #2
 800b752:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	f103 0210 	add.w	r2, r3, #16
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b762:	2301      	movs	r3, #1
 800b764:	75fb      	strb	r3, [r7, #23]
      break;
 800b766:	e038      	b.n	800b7da <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b768:	7afb      	ldrb	r3, [r7, #11]
 800b76a:	4619      	mov	r1, r3
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f7ff fd3d 	bl	800b1ec <USBH_MSC_BOT_Process>
 800b772:	4603      	mov	r3, r0
 800b774:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b776:	7dfb      	ldrb	r3, [r7, #23]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d12d      	bne.n	800b7d8 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b782:	3303      	adds	r3, #3
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	461a      	mov	r2, r3
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b78e:	3302      	adds	r3, #2
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	021b      	lsls	r3, r3, #8
 800b794:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b79c:	3301      	adds	r3, #1
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b7a2:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	061b      	lsls	r3, r3, #24
 800b7ae:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7ba:	3307      	adds	r3, #7
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7c6:	3306      	adds	r3, #6
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	021b      	lsls	r3, r3, #8
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	b29a      	uxth	r2, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	809a      	strh	r2, [r3, #4]
      break;
 800b7d8:	bf00      	nop
  }

  return error;
 800b7da:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3718      	adds	r7, #24
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b086      	sub	sp, #24
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	460b      	mov	r3, r1
 800b7ee:	607a      	str	r2, [r7, #4]
 800b7f0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800b7f2:	2302      	movs	r3, #2
 800b7f4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800b7fc:	69db      	ldr	r3, [r3, #28]
 800b7fe:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b806:	2b01      	cmp	r3, #1
 800b808:	d002      	beq.n	800b810 <USBH_MSC_SCSI_Inquiry+0x2c>
 800b80a:	2b02      	cmp	r3, #2
 800b80c:	d03d      	beq.n	800b88a <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800b80e:	e089      	b.n	800b924 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	2224      	movs	r2, #36	; 0x24
 800b814:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	2280      	movs	r2, #128	; 0x80
 800b81a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	220a      	movs	r2, #10
 800b822:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	3363      	adds	r3, #99	; 0x63
 800b82a:	220a      	movs	r2, #10
 800b82c:	2100      	movs	r1, #0
 800b82e:	4618      	mov	r0, r3
 800b830:	f004 fbca 	bl	800ffc8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	2212      	movs	r2, #18
 800b838:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b83c:	7afb      	ldrb	r3, [r7, #11]
 800b83e:	015b      	lsls	r3, r3, #5
 800b840:	b2da      	uxtb	r2, r3
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	2200      	movs	r2, #0
 800b84c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	2200      	movs	r2, #0
 800b854:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	2224      	movs	r2, #36	; 0x24
 800b85c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	2200      	movs	r2, #0
 800b864:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	2201      	movs	r2, #1
 800b86c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	2202      	movs	r2, #2
 800b874:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	f103 0210 	add.w	r2, r3, #16
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b884:	2301      	movs	r3, #1
 800b886:	75fb      	strb	r3, [r7, #23]
      break;
 800b888:	e04c      	b.n	800b924 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b88a:	7afb      	ldrb	r3, [r7, #11]
 800b88c:	4619      	mov	r1, r3
 800b88e:	68f8      	ldr	r0, [r7, #12]
 800b890:	f7ff fcac 	bl	800b1ec <USBH_MSC_BOT_Process>
 800b894:	4603      	mov	r3, r0
 800b896:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b898:	7dfb      	ldrb	r3, [r7, #23]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d141      	bne.n	800b922 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800b89e:	2222      	movs	r2, #34	; 0x22
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f004 fb90 	bl	800ffc8 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	f003 031f 	and.w	r3, r3, #31
 800b8b4:	b2da      	uxtb	r2, r3
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	095b      	lsrs	r3, r3, #5
 800b8c4:	b2da      	uxtb	r2, r3
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	b25b      	sxtb	r3, r3
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	da03      	bge.n	800b8e2 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2201      	movs	r2, #1
 800b8de:	709a      	strb	r2, [r3, #2]
 800b8e0:	e002      	b.n	800b8e8 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	1cd8      	adds	r0, r3, #3
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8f2:	3308      	adds	r3, #8
 800b8f4:	2208      	movs	r2, #8
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	f004 fb58 	bl	800ffac <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f103 000c 	add.w	r0, r3, #12
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b908:	3310      	adds	r3, #16
 800b90a:	2210      	movs	r2, #16
 800b90c:	4619      	mov	r1, r3
 800b90e:	f004 fb4d 	bl	800ffac <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	331d      	adds	r3, #29
 800b916:	693a      	ldr	r2, [r7, #16]
 800b918:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800b91c:	3220      	adds	r2, #32
 800b91e:	6812      	ldr	r2, [r2, #0]
 800b920:	601a      	str	r2, [r3, #0]
      break;
 800b922:	bf00      	nop
  }

  return error;
 800b924:	7dfb      	ldrb	r3, [r7, #23]
}
 800b926:	4618      	mov	r0, r3
 800b928:	3718      	adds	r7, #24
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b086      	sub	sp, #24
 800b932:	af00      	add	r7, sp, #0
 800b934:	60f8      	str	r0, [r7, #12]
 800b936:	460b      	mov	r3, r1
 800b938:	607a      	str	r2, [r7, #4]
 800b93a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b93c:	2302      	movs	r3, #2
 800b93e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800b946:	69db      	ldr	r3, [r3, #28]
 800b948:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b950:	2b01      	cmp	r3, #1
 800b952:	d002      	beq.n	800b95a <USBH_MSC_SCSI_RequestSense+0x2c>
 800b954:	2b02      	cmp	r3, #2
 800b956:	d03d      	beq.n	800b9d4 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800b958:	e05d      	b.n	800ba16 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	220e      	movs	r2, #14
 800b95e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	2280      	movs	r2, #128	; 0x80
 800b964:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	220a      	movs	r2, #10
 800b96c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	3363      	adds	r3, #99	; 0x63
 800b974:	2210      	movs	r2, #16
 800b976:	2100      	movs	r1, #0
 800b978:	4618      	mov	r0, r3
 800b97a:	f004 fb25 	bl	800ffc8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	2203      	movs	r2, #3
 800b982:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b986:	7afb      	ldrb	r3, [r7, #11]
 800b988:	015b      	lsls	r3, r3, #5
 800b98a:	b2da      	uxtb	r2, r3
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	2200      	movs	r2, #0
 800b996:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	2200      	movs	r2, #0
 800b99e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	220e      	movs	r2, #14
 800b9a6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	2202      	movs	r2, #2
 800b9be:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	f103 0210 	add.w	r2, r3, #16
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	75fb      	strb	r3, [r7, #23]
      break;
 800b9d2:	e020      	b.n	800ba16 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b9d4:	7afb      	ldrb	r3, [r7, #11]
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	68f8      	ldr	r0, [r7, #12]
 800b9da:	f7ff fc07 	bl	800b1ec <USBH_MSC_BOT_Process>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b9e2:	7dfb      	ldrb	r3, [r7, #23]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d115      	bne.n	800ba14 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9ee:	3302      	adds	r3, #2
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	f003 030f 	and.w	r3, r3, #15
 800b9f6:	b2da      	uxtb	r2, r3
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba02:	7b1a      	ldrb	r2, [r3, #12]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba0e:	7b5a      	ldrb	r2, [r3, #13]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	709a      	strb	r2, [r3, #2]
      break;
 800ba14:	bf00      	nop
  }

  return error;
 800ba16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3718      	adds	r7, #24
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b086      	sub	sp, #24
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	60f8      	str	r0, [r7, #12]
 800ba28:	607a      	str	r2, [r7, #4]
 800ba2a:	603b      	str	r3, [r7, #0]
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800ba30:	2302      	movs	r3, #2
 800ba32:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800ba3a:	69db      	ldr	r3, [r3, #28]
 800ba3c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d002      	beq.n	800ba4e <USBH_MSC_SCSI_Write+0x2e>
 800ba48:	2b02      	cmp	r3, #2
 800ba4a:	d047      	beq.n	800badc <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800ba4c:	e04e      	b.n	800baec <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800ba54:	461a      	mov	r2, r3
 800ba56:	6a3b      	ldr	r3, [r7, #32]
 800ba58:	fb03 f202 	mul.w	r2, r3, r2
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	2200      	movs	r2, #0
 800ba64:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	220a      	movs	r2, #10
 800ba6c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	3363      	adds	r3, #99	; 0x63
 800ba74:	2210      	movs	r2, #16
 800ba76:	2100      	movs	r1, #0
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f004 faa5 	bl	800ffc8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	222a      	movs	r2, #42	; 0x2a
 800ba82:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800ba86:	79fa      	ldrb	r2, [r7, #7]
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800ba8e:	79ba      	ldrb	r2, [r7, #6]
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800ba96:	797a      	ldrb	r2, [r7, #5]
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800ba9e:	1d3b      	adds	r3, r7, #4
 800baa0:	781a      	ldrb	r2, [r3, #0]
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800baa8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800bab2:	f107 0320 	add.w	r3, r7, #32
 800bab6:	781a      	ldrb	r2, [r3, #0]
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	2201      	movs	r2, #1
 800bac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	2202      	movs	r2, #2
 800baca:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	683a      	ldr	r2, [r7, #0]
 800bad2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800bad6:	2301      	movs	r3, #1
 800bad8:	75fb      	strb	r3, [r7, #23]
      break;
 800bada:	e007      	b.n	800baec <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800badc:	7afb      	ldrb	r3, [r7, #11]
 800bade:	4619      	mov	r1, r3
 800bae0:	68f8      	ldr	r0, [r7, #12]
 800bae2:	f7ff fb83 	bl	800b1ec <USBH_MSC_BOT_Process>
 800bae6:	4603      	mov	r3, r0
 800bae8:	75fb      	strb	r3, [r7, #23]
      break;
 800baea:	bf00      	nop
  }

  return error;
 800baec:	7dfb      	ldrb	r3, [r7, #23]
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3718      	adds	r7, #24
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}

0800baf6 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800baf6:	b580      	push	{r7, lr}
 800baf8:	b086      	sub	sp, #24
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	60f8      	str	r0, [r7, #12]
 800bafe:	607a      	str	r2, [r7, #4]
 800bb00:	603b      	str	r3, [r7, #0]
 800bb02:	460b      	mov	r3, r1
 800bb04:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800bb06:	2302      	movs	r3, #2
 800bb08:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800bb10:	69db      	ldr	r3, [r3, #28]
 800bb12:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d002      	beq.n	800bb24 <USBH_MSC_SCSI_Read+0x2e>
 800bb1e:	2b02      	cmp	r3, #2
 800bb20:	d047      	beq.n	800bbb2 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800bb22:	e04e      	b.n	800bbc2 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	6a3b      	ldr	r3, [r7, #32]
 800bb2e:	fb03 f202 	mul.w	r2, r3, r2
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	2280      	movs	r2, #128	; 0x80
 800bb3a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	220a      	movs	r2, #10
 800bb42:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	3363      	adds	r3, #99	; 0x63
 800bb4a:	2210      	movs	r2, #16
 800bb4c:	2100      	movs	r1, #0
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f004 fa3a 	bl	800ffc8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	2228      	movs	r2, #40	; 0x28
 800bb58:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800bb5c:	79fa      	ldrb	r2, [r7, #7]
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800bb64:	79ba      	ldrb	r2, [r7, #6]
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800bb6c:	797a      	ldrb	r2, [r7, #5]
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800bb74:	1d3b      	adds	r3, r7, #4
 800bb76:	781a      	ldrb	r2, [r3, #0]
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800bb7e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800bb88:	f107 0320 	add.w	r3, r7, #32
 800bb8c:	781a      	ldrb	r2, [r3, #0]
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	2201      	movs	r2, #1
 800bb98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	2202      	movs	r2, #2
 800bba0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	683a      	ldr	r2, [r7, #0]
 800bba8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800bbac:	2301      	movs	r3, #1
 800bbae:	75fb      	strb	r3, [r7, #23]
      break;
 800bbb0:	e007      	b.n	800bbc2 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bbb2:	7afb      	ldrb	r3, [r7, #11]
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f7ff fb18 	bl	800b1ec <USBH_MSC_BOT_Process>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	75fb      	strb	r3, [r7, #23]
      break;
 800bbc0:	bf00      	nop
  }

  return error;
 800bbc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3718      	adds	r7, #24
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	60f8      	str	r0, [r7, #12]
 800bbd4:	60b9      	str	r1, [r7, #8]
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d101      	bne.n	800bbe4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800bbe0:	2302      	movs	r3, #2
 800bbe2:	e029      	b.n	800bc38 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	79fa      	ldrb	r2, [r7, #7]
 800bbe8:	f883 25cc 	strb.w	r2, [r3, #1484]	; 0x5cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	f8c3 257c 	str.w	r2, [r3, #1404]	; 0x57c
  phost->ClassNumber = 0U;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800bbfc:	68f8      	ldr	r0, [r7, #12]
 800bbfe:	f000 f81f 	bl	800bc40 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2200      	movs	r2, #0
 800bc06:	f883 2523 	strb.w	r2, [r3, #1315]	; 0x523
  phost->device.is_connected = 0U;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	f883 2520 	strb.w	r2, [r3, #1312]	; 0x520
  phost->device.is_disconnected = 0U;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	2200      	movs	r2, #0
 800bc16:	f883 2521 	strb.w	r2, [r3, #1313]	; 0x521
  phost->device.is_ReEnumerated = 0U;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522

  /* Assign User process */
  if (pUsrFunc != NULL)
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d003      	beq.n	800bc30 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	68ba      	ldr	r2, [r7, #8]
 800bc2c:	f8c3 25d4 	str.w	r2, [r3, #1492]	; 0x5d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800bc30:	68f8      	ldr	r0, [r7, #12]
 800bc32:	f003 ff5f 	bl	800faf4 <USBH_LL_Init>

  return USBH_OK;
 800bc36:	2300      	movs	r3, #0
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3710      	adds	r7, #16
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b085      	sub	sp, #20
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	60fb      	str	r3, [r7, #12]
 800bc50:	e00a      	b.n	800bc68 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800bc5a:	009b      	lsls	r3, r3, #2
 800bc5c:	4413      	add	r3, r2
 800bc5e:	2200      	movs	r2, #0
 800bc60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	3301      	adds	r3, #1
 800bc66:	60fb      	str	r3, [r7, #12]
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2b0e      	cmp	r3, #14
 800bc6c:	d9f1      	bls.n	800bc52 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bc6e:	2300      	movs	r3, #0
 800bc70:	60fb      	str	r3, [r7, #12]
 800bc72:	e009      	b.n	800bc88 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	4413      	add	r3, r2
 800bc7a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bc7e:	2200      	movs	r2, #0
 800bc80:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	3301      	adds	r3, #1
 800bc86:	60fb      	str	r3, [r7, #12]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc8e:	d3f1      	bcc.n	800bc74 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2200      	movs	r2, #0
 800bc94:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2201      	movs	r2, #1
 800bca0:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2200      	movs	r2, #0
 800bca6:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4

  phost->Control.state = CTRL_SETUP;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2201      	movs	r2, #1
 800bcae:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2240      	movs	r2, #64	; 0x40
 800bcb4:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
  phost->device.speed = USBH_SPEED_FULL;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	f883 251d 	strb.w	r2, [r3, #1309]	; 0x51d
  phost->device.RstCnt = 0U;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f883 251f 	strb.w	r2, [r3, #1311]	; 0x51f
  phost->device.EnumCnt = 0U;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f883 251e 	strb.w	r2, [r3, #1310]	; 0x51e

  return USBH_OK;
 800bcdc:	2300      	movs	r3, #0
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3714      	adds	r7, #20
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bc80      	pop	{r7}
 800bce6:	4770      	bx	lr

0800bce8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b085      	sub	sp, #20
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d017      	beq.n	800bd2c <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d10f      	bne.n	800bd26 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 800bd0c:	1c59      	adds	r1, r3, #1
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	f8c2 1580 	str.w	r1, [r2, #1408]	; 0x580
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 800bd1a:	6839      	ldr	r1, [r7, #0]
 800bd1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800bd20:	2300      	movs	r3, #0
 800bd22:	73fb      	strb	r3, [r7, #15]
 800bd24:	e004      	b.n	800bd30 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800bd26:	2302      	movs	r3, #2
 800bd28:	73fb      	strb	r3, [r7, #15]
 800bd2a:	e001      	b.n	800bd30 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800bd2c:	2302      	movs	r3, #2
 800bd2e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bd30:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3714      	adds	r7, #20
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bc80      	pop	{r7}
 800bd3a:	4770      	bx	lr

0800bd3c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b085      	sub	sp, #20
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	460b      	mov	r3, r1
 800bd46:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f893 353c 	ldrb.w	r3, [r3, #1340]	; 0x53c
 800bd52:	78fa      	ldrb	r2, [r7, #3]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d204      	bcs.n	800bd62 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	78fa      	ldrb	r2, [r7, #3]
 800bd5c:	f883 2524 	strb.w	r2, [r3, #1316]	; 0x524
 800bd60:	e001      	b.n	800bd66 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800bd62:	2302      	movs	r3, #2
 800bd64:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bd66:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3714      	adds	r7, #20
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bc80      	pop	{r7}
 800bd70:	4770      	bx	lr

0800bd72 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800bd72:	b480      	push	{r7}
 800bd74:	b087      	sub	sp, #28
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
 800bd7a:	4608      	mov	r0, r1
 800bd7c:	4611      	mov	r1, r2
 800bd7e:	461a      	mov	r2, r3
 800bd80:	4603      	mov	r3, r0
 800bd82:	70fb      	strb	r3, [r7, #3]
 800bd84:	460b      	mov	r3, r1
 800bd86:	70bb      	strb	r3, [r7, #2]
 800bd88:	4613      	mov	r3, r2
 800bd8a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800bd90:	2300      	movs	r3, #0
 800bd92:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800bd9a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bd9c:	e025      	b.n	800bdea <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800bd9e:	7dfb      	ldrb	r3, [r7, #23]
 800bda0:	221a      	movs	r2, #26
 800bda2:	fb02 f303 	mul.w	r3, r2, r3
 800bda6:	3308      	adds	r3, #8
 800bda8:	68fa      	ldr	r2, [r7, #12]
 800bdaa:	4413      	add	r3, r2
 800bdac:	3302      	adds	r3, #2
 800bdae:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	795b      	ldrb	r3, [r3, #5]
 800bdb4:	78fa      	ldrb	r2, [r7, #3]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d002      	beq.n	800bdc0 <USBH_FindInterface+0x4e>
 800bdba:	78fb      	ldrb	r3, [r7, #3]
 800bdbc:	2bff      	cmp	r3, #255	; 0xff
 800bdbe:	d111      	bne.n	800bde4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bdc4:	78ba      	ldrb	r2, [r7, #2]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d002      	beq.n	800bdd0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bdca:	78bb      	ldrb	r3, [r7, #2]
 800bdcc:	2bff      	cmp	r3, #255	; 0xff
 800bdce:	d109      	bne.n	800bde4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bdd4:	787a      	ldrb	r2, [r7, #1]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d002      	beq.n	800bde0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bdda:	787b      	ldrb	r3, [r7, #1]
 800bddc:	2bff      	cmp	r3, #255	; 0xff
 800bdde:	d101      	bne.n	800bde4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800bde0:	7dfb      	ldrb	r3, [r7, #23]
 800bde2:	e006      	b.n	800bdf2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800bde4:	7dfb      	ldrb	r3, [r7, #23]
 800bde6:	3301      	adds	r3, #1
 800bde8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bdea:	7dfb      	ldrb	r3, [r7, #23]
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d9d6      	bls.n	800bd9e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800bdf0:	23ff      	movs	r3, #255	; 0xff
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	371c      	adds	r7, #28
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bc80      	pop	{r7}
 800bdfa:	4770      	bx	lr

0800bdfc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b082      	sub	sp, #8
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f003 feb1 	bl	800fb6c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800be0a:	2101      	movs	r1, #1
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f003 ffca 	bl	800fda6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800be12:	2300      	movs	r3, #0
}
 800be14:	4618      	mov	r0, r3
 800be16:	3708      	adds	r7, #8
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b088      	sub	sp, #32
 800be20:	af04      	add	r7, sp, #16
 800be22:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800be24:	2302      	movs	r3, #2
 800be26:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800be28:	2300      	movs	r3, #0
 800be2a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f893 3521 	ldrb.w	r3, [r3, #1313]	; 0x521
 800be32:	b2db      	uxtb	r3, r3
 800be34:	2b01      	cmp	r3, #1
 800be36:	d102      	bne.n	800be3e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2203      	movs	r2, #3
 800be3c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	b2db      	uxtb	r3, r3
 800be44:	2b0b      	cmp	r3, #11
 800be46:	f200 81b5 	bhi.w	800c1b4 <USBH_Process+0x398>
 800be4a:	a201      	add	r2, pc, #4	; (adr r2, 800be50 <USBH_Process+0x34>)
 800be4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be50:	0800be81 	.word	0x0800be81
 800be54:	0800beb3 	.word	0x0800beb3
 800be58:	0800bf1b 	.word	0x0800bf1b
 800be5c:	0800c14f 	.word	0x0800c14f
 800be60:	0800c1b5 	.word	0x0800c1b5
 800be64:	0800bfbf 	.word	0x0800bfbf
 800be68:	0800c0f5 	.word	0x0800c0f5
 800be6c:	0800bff5 	.word	0x0800bff5
 800be70:	0800c015 	.word	0x0800c015
 800be74:	0800c035 	.word	0x0800c035
 800be78:	0800c063 	.word	0x0800c063
 800be7c:	0800c137 	.word	0x0800c137
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f893 3520 	ldrb.w	r3, [r3, #1312]	; 0x520
 800be86:	b2db      	uxtb	r3, r3
 800be88:	2b00      	cmp	r3, #0
 800be8a:	f000 8195 	beq.w	800c1b8 <USBH_Process+0x39c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2201      	movs	r2, #1
 800be92:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800be94:	20c8      	movs	r0, #200	; 0xc8
 800be96:	f003 fffb 	bl	800fe90 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f003 fec3 	bl	800fc26 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2200      	movs	r2, #0
 800bea4:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
        phost->Timeout = 0U;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2200      	movs	r2, #0
 800beac:	f8c3 25c8 	str.w	r2, [r3, #1480]	; 0x5c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800beb0:	e182      	b.n	800c1b8 <USBH_Process+0x39c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f893 3523 	ldrb.w	r3, [r3, #1315]	; 0x523
 800beb8:	2b01      	cmp	r3, #1
 800beba:	d107      	bne.n	800becc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2200      	movs	r2, #0
 800bec0:	f883 251f 	strb.w	r2, [r3, #1311]	; 0x51f
        phost->gState = HOST_DEV_ATTACHED;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2202      	movs	r2, #2
 800bec8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800beca:	e184      	b.n	800c1d6 <USBH_Process+0x3ba>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 800bed2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bed6:	d914      	bls.n	800bf02 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f893 351f 	ldrb.w	r3, [r3, #1311]	; 0x51f
 800bede:	3301      	adds	r3, #1
 800bee0:	b2da      	uxtb	r2, r3
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f883 251f 	strb.w	r2, [r3, #1311]	; 0x51f
          if (phost->device.RstCnt > 3U)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f893 351f 	ldrb.w	r3, [r3, #1311]	; 0x51f
 800beee:	2b03      	cmp	r3, #3
 800bef0:	d903      	bls.n	800befa <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	220d      	movs	r2, #13
 800bef6:	701a      	strb	r2, [r3, #0]
      break;
 800bef8:	e16d      	b.n	800c1d6 <USBH_Process+0x3ba>
            phost->gState = HOST_IDLE;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2200      	movs	r2, #0
 800befe:	701a      	strb	r2, [r3, #0]
      break;
 800bf00:	e169      	b.n	800c1d6 <USBH_Process+0x3ba>
          phost->Timeout += 10U;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 800bf08:	f103 020a 	add.w	r2, r3, #10
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8c3 25c8 	str.w	r2, [r3, #1480]	; 0x5c8
          USBH_Delay(10U);
 800bf12:	200a      	movs	r0, #10
 800bf14:	f003 ffbc 	bl	800fe90 <USBH_Delay>
      break;
 800bf18:	e15d      	b.n	800c1d6 <USBH_Process+0x3ba>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8d3 35d4 	ldr.w	r3, [r3, #1492]	; 0x5d4
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d005      	beq.n	800bf30 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 35d4 	ldr.w	r3, [r3, #1492]	; 0x5d4
 800bf2a:	2104      	movs	r1, #4
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800bf30:	2064      	movs	r0, #100	; 0x64
 800bf32:	f003 ffad 	bl	800fe90 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f003 fe4e 	bl	800fbd8 <USBH_LL_GetSpeed>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	461a      	mov	r2, r3
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f883 251d 	strb.w	r2, [r3, #1309]	; 0x51d

      phost->gState = HOST_ENUMERATION;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2205      	movs	r2, #5
 800bf4a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800bf4c:	2100      	movs	r1, #0
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f001 f929 	bl	800d1a6 <USBH_AllocPipe>
 800bf54:	4603      	mov	r3, r0
 800bf56:	461a      	mov	r2, r3
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800bf5c:	2180      	movs	r1, #128	; 0x80
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f001 f921 	bl	800d1a6 <USBH_AllocPipe>
 800bf64:	4603      	mov	r3, r0
 800bf66:	461a      	mov	r2, r3
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	7919      	ldrb	r1, [r3, #4]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f893 051c 	ldrb.w	r0, [r3, #1308]	; 0x51c
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f893 351d 	ldrb.w	r3, [r3, #1309]	; 0x51d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bf7c:	687a      	ldr	r2, [r7, #4]
 800bf7e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bf80:	b292      	uxth	r2, r2
 800bf82:	9202      	str	r2, [sp, #8]
 800bf84:	2200      	movs	r2, #0
 800bf86:	9201      	str	r2, [sp, #4]
 800bf88:	9300      	str	r3, [sp, #0]
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	2280      	movs	r2, #128	; 0x80
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f001 f8da 	bl	800d148 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	7959      	ldrb	r1, [r3, #5]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f893 051c 	ldrb.w	r0, [r3, #1308]	; 0x51c
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f893 351d 	ldrb.w	r3, [r3, #1309]	; 0x51d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bfa4:	687a      	ldr	r2, [r7, #4]
 800bfa6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bfa8:	b292      	uxth	r2, r2
 800bfaa:	9202      	str	r2, [sp, #8]
 800bfac:	2200      	movs	r2, #0
 800bfae:	9201      	str	r2, [sp, #4]
 800bfb0:	9300      	str	r3, [sp, #0]
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f001 f8c6 	bl	800d148 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bfbc:	e10b      	b.n	800c1d6 <USBH_Process+0x3ba>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 f90e 	bl	800c1e0 <USBH_HandleEnum>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800bfc8:	7bbb      	ldrb	r3, [r7, #14]
 800bfca:	b2db      	uxtb	r3, r3
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	f040 80f5 	bne.w	800c1bc <USBH_Process+0x3a0>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f883 2524 	strb.w	r2, [r3, #1316]	; 0x524

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f893 3537 	ldrb.w	r3, [r3, #1335]	; 0x537
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d103      	bne.n	800bfec <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2208      	movs	r2, #8
 800bfe8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800bfea:	e0e7      	b.n	800c1bc <USBH_Process+0x3a0>
          phost->gState = HOST_INPUT;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2207      	movs	r2, #7
 800bff0:	701a      	strb	r2, [r3, #0]
      break;
 800bff2:	e0e3      	b.n	800c1bc <USBH_Process+0x3a0>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 35d4 	ldr.w	r3, [r3, #1492]	; 0x5d4
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f000 80e0 	beq.w	800c1c0 <USBH_Process+0x3a4>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 35d4 	ldr.w	r3, [r3, #1492]	; 0x5d4
 800c006:	2101      	movs	r1, #1
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2208      	movs	r2, #8
 800c010:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800c012:	e0d5      	b.n	800c1c0 <USBH_Process+0x3a4>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f893 353d 	ldrb.w	r3, [r3, #1341]	; 0x53d
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	4619      	mov	r1, r3
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 fc1e 	bl	800c860 <USBH_SetCfg>
 800c024:	4603      	mov	r3, r0
 800c026:	2b00      	cmp	r3, #0
 800c028:	f040 80cc 	bne.w	800c1c4 <USBH_Process+0x3a8>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2209      	movs	r2, #9
 800c030:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c032:	e0c7      	b.n	800c1c4 <USBH_Process+0x3a8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f893 353f 	ldrb.w	r3, [r3, #1343]	; 0x53f
 800c03a:	f003 0320 	and.w	r3, r3, #32
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d00b      	beq.n	800c05a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800c042:	2101      	movs	r1, #1
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f000 fc2e 	bl	800c8a6 <USBH_SetFeature>
 800c04a:	4603      	mov	r3, r0
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	f040 80bb 	bne.w	800c1c8 <USBH_Process+0x3ac>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	220a      	movs	r2, #10
 800c056:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c058:	e0b6      	b.n	800c1c8 <USBH_Process+0x3ac>
        phost->gState = HOST_CHECK_CLASS;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	220a      	movs	r2, #10
 800c05e:	701a      	strb	r2, [r3, #0]
      break;
 800c060:	e0b2      	b.n	800c1c8 <USBH_Process+0x3ac>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 800c068:	2b00      	cmp	r3, #0
 800c06a:	f000 80af 	beq.w	800c1cc <USBH_Process+0x3b0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2200      	movs	r2, #0
 800c072:	f8c3 257c 	str.w	r2, [r3, #1404]	; 0x57c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c076:	2300      	movs	r3, #0
 800c078:	73fb      	strb	r3, [r7, #15]
 800c07a:	e018      	b.n	800c0ae <USBH_Process+0x292>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c07c:	7bfa      	ldrb	r2, [r7, #15]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f502 72af 	add.w	r2, r2, #350	; 0x15e
 800c084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c088:	791a      	ldrb	r2, [r3, #4]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f893 3547 	ldrb.w	r3, [r3, #1351]	; 0x547
 800c090:	429a      	cmp	r2, r3
 800c092:	d109      	bne.n	800c0a8 <USBH_Process+0x28c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c094:	7bfa      	ldrb	r2, [r7, #15]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f502 72af 	add.w	r2, r2, #350	; 0x15e
 800c09c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8c3 257c 	str.w	r2, [r3, #1404]	; 0x57c
            break;
 800c0a6:	e005      	b.n	800c0b4 <USBH_Process+0x298>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c0a8:	7bfb      	ldrb	r3, [r7, #15]
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	73fb      	strb	r3, [r7, #15]
 800c0ae:	7bfb      	ldrb	r3, [r7, #15]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d0e3      	beq.n	800c07c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d016      	beq.n	800c0ec <USBH_Process+0x2d0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800c0c4:	689b      	ldr	r3, [r3, #8]
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	4798      	blx	r3
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d109      	bne.n	800c0e4 <USBH_Process+0x2c8>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2206      	movs	r2, #6
 800c0d4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8d3 35d4 	ldr.w	r3, [r3, #1492]	; 0x5d4
 800c0dc:	2103      	movs	r1, #3
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c0e2:	e073      	b.n	800c1cc <USBH_Process+0x3b0>
            phost->gState = HOST_ABORT_STATE;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	220d      	movs	r2, #13
 800c0e8:	701a      	strb	r2, [r3, #0]
      break;
 800c0ea:	e06f      	b.n	800c1cc <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	220d      	movs	r2, #13
 800c0f0:	701a      	strb	r2, [r3, #0]
      break;
 800c0f2:	e06b      	b.n	800c1cc <USBH_Process+0x3b0>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d017      	beq.n	800c12e <USBH_Process+0x312>
      {
        status = phost->pActiveClass->Requests(phost);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800c104:	691b      	ldr	r3, [r3, #16]
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	4798      	blx	r3
 800c10a:	4603      	mov	r3, r0
 800c10c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c10e:	7bbb      	ldrb	r3, [r7, #14]
 800c110:	b2db      	uxtb	r3, r3
 800c112:	2b00      	cmp	r3, #0
 800c114:	d103      	bne.n	800c11e <USBH_Process+0x302>
        {
          phost->gState = HOST_CLASS;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	220b      	movs	r2, #11
 800c11a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c11c:	e058      	b.n	800c1d0 <USBH_Process+0x3b4>
        else if (status == USBH_FAIL)
 800c11e:	7bbb      	ldrb	r3, [r7, #14]
 800c120:	b2db      	uxtb	r3, r3
 800c122:	2b02      	cmp	r3, #2
 800c124:	d154      	bne.n	800c1d0 <USBH_Process+0x3b4>
          phost->gState = HOST_ABORT_STATE;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	220d      	movs	r2, #13
 800c12a:	701a      	strb	r2, [r3, #0]
      break;
 800c12c:	e050      	b.n	800c1d0 <USBH_Process+0x3b4>
        phost->gState = HOST_ABORT_STATE;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	220d      	movs	r2, #13
 800c132:	701a      	strb	r2, [r3, #0]
      break;
 800c134:	e04c      	b.n	800c1d0 <USBH_Process+0x3b4>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d049      	beq.n	800c1d4 <USBH_Process+0x3b8>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800c146:	695b      	ldr	r3, [r3, #20]
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	4798      	blx	r3
      }
      break;
 800c14c:	e042      	b.n	800c1d4 <USBH_Process+0x3b8>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2200      	movs	r2, #0
 800c152:	f883 2521 	strb.w	r2, [r3, #1313]	; 0x521

      DeInitStateMachine(phost);
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f7ff fd72 	bl	800bc40 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800c162:	2b00      	cmp	r3, #0
 800c164:	d009      	beq.n	800c17a <USBH_Process+0x35e>
      {
        phost->pActiveClass->DeInit(phost);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800c16c:	68db      	ldr	r3, [r3, #12]
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	f8c3 257c 	str.w	r2, [r3, #1404]	; 0x57c
      }

      if (phost->pUser != NULL)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8d3 35d4 	ldr.w	r3, [r3, #1492]	; 0x5d4
 800c180:	2b00      	cmp	r3, #0
 800c182:	d005      	beq.n	800c190 <USBH_Process+0x374>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 35d4 	ldr.w	r3, [r3, #1492]	; 0x5d4
 800c18a:	2105      	movs	r1, #5
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f893 3522 	ldrb.w	r3, [r3, #1314]	; 0x522
 800c196:	b2db      	uxtb	r3, r3
 800c198:	2b01      	cmp	r3, #1
 800c19a:	d107      	bne.n	800c1ac <USBH_Process+0x390>
      {
        phost->device.is_ReEnumerated = 0U;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f7ff fe29 	bl	800bdfc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c1aa:	e014      	b.n	800c1d6 <USBH_Process+0x3ba>
        USBH_LL_Start(phost);
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f003 fcdd 	bl	800fb6c <USBH_LL_Start>
      break;
 800c1b2:	e010      	b.n	800c1d6 <USBH_Process+0x3ba>

    case HOST_ABORT_STATE:
    default :
      break;
 800c1b4:	bf00      	nop
 800c1b6:	e00e      	b.n	800c1d6 <USBH_Process+0x3ba>
      break;
 800c1b8:	bf00      	nop
 800c1ba:	e00c      	b.n	800c1d6 <USBH_Process+0x3ba>
      break;
 800c1bc:	bf00      	nop
 800c1be:	e00a      	b.n	800c1d6 <USBH_Process+0x3ba>
    break;
 800c1c0:	bf00      	nop
 800c1c2:	e008      	b.n	800c1d6 <USBH_Process+0x3ba>
      break;
 800c1c4:	bf00      	nop
 800c1c6:	e006      	b.n	800c1d6 <USBH_Process+0x3ba>
      break;
 800c1c8:	bf00      	nop
 800c1ca:	e004      	b.n	800c1d6 <USBH_Process+0x3ba>
      break;
 800c1cc:	bf00      	nop
 800c1ce:	e002      	b.n	800c1d6 <USBH_Process+0x3ba>
      break;
 800c1d0:	bf00      	nop
 800c1d2:	e000      	b.n	800c1d6 <USBH_Process+0x3ba>
      break;
 800c1d4:	bf00      	nop
  }
  return USBH_OK;
 800c1d6:	2300      	movs	r3, #0
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3710      	adds	r7, #16
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b088      	sub	sp, #32
 800c1e4:	af04      	add	r7, sp, #16
 800c1e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	785b      	ldrb	r3, [r3, #1]
 800c1f4:	2b07      	cmp	r3, #7
 800c1f6:	f200 81c1 	bhi.w	800c57c <USBH_HandleEnum+0x39c>
 800c1fa:	a201      	add	r2, pc, #4	; (adr r2, 800c200 <USBH_HandleEnum+0x20>)
 800c1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c200:	0800c221 	.word	0x0800c221
 800c204:	0800c2df 	.word	0x0800c2df
 800c208:	0800c349 	.word	0x0800c349
 800c20c:	0800c3d7 	.word	0x0800c3d7
 800c210:	0800c441 	.word	0x0800c441
 800c214:	0800c4b1 	.word	0x0800c4b1
 800c218:	0800c4f7 	.word	0x0800c4f7
 800c21c:	0800c53d 	.word	0x0800c53d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c220:	2108      	movs	r1, #8
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f000 fa4c 	bl	800c6c0 <USBH_Get_DevDesc>
 800c228:	4603      	mov	r3, r0
 800c22a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c22c:	7bbb      	ldrb	r3, [r7, #14]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d130      	bne.n	800c294 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f893 252d 	ldrb.w	r2, [r3, #1325]	; 0x52d
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2201      	movs	r2, #1
 800c240:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	7919      	ldrb	r1, [r3, #4]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f893 051c 	ldrb.w	r0, [r3, #1308]	; 0x51c
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f893 351d 	ldrb.w	r3, [r3, #1309]	; 0x51d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c252:	687a      	ldr	r2, [r7, #4]
 800c254:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c256:	b292      	uxth	r2, r2
 800c258:	9202      	str	r2, [sp, #8]
 800c25a:	2200      	movs	r2, #0
 800c25c:	9201      	str	r2, [sp, #4]
 800c25e:	9300      	str	r3, [sp, #0]
 800c260:	4603      	mov	r3, r0
 800c262:	2280      	movs	r2, #128	; 0x80
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f000 ff6f 	bl	800d148 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	7959      	ldrb	r1, [r3, #5]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f893 051c 	ldrb.w	r0, [r3, #1308]	; 0x51c
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f893 351d 	ldrb.w	r3, [r3, #1309]	; 0x51d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c27a:	687a      	ldr	r2, [r7, #4]
 800c27c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c27e:	b292      	uxth	r2, r2
 800c280:	9202      	str	r2, [sp, #8]
 800c282:	2200      	movs	r2, #0
 800c284:	9201      	str	r2, [sp, #4]
 800c286:	9300      	str	r3, [sp, #0]
 800c288:	4603      	mov	r3, r0
 800c28a:	2200      	movs	r2, #0
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f000 ff5b 	bl	800d148 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c292:	e175      	b.n	800c580 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c294:	7bbb      	ldrb	r3, [r7, #14]
 800c296:	2b03      	cmp	r3, #3
 800c298:	f040 8172 	bne.w	800c580 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f893 351e 	ldrb.w	r3, [r3, #1310]	; 0x51e
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	b2da      	uxtb	r2, r3
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f883 251e 	strb.w	r2, [r3, #1310]	; 0x51e
        if (phost->device.EnumCnt > 3U)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f893 351e 	ldrb.w	r3, [r3, #1310]	; 0x51e
 800c2b2:	2b03      	cmp	r3, #3
 800c2b4:	d903      	bls.n	800c2be <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	220d      	movs	r2, #13
 800c2ba:	701a      	strb	r2, [r3, #0]
      break;
 800c2bc:	e160      	b.n	800c580 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	795b      	ldrb	r3, [r3, #5]
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 ff90 	bl	800d1ea <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	791b      	ldrb	r3, [r3, #4]
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 ff8a 	bl	800d1ea <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	701a      	strb	r2, [r3, #0]
      break;
 800c2dc:	e150      	b.n	800c580 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c2de:	2112      	movs	r1, #18
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f000 f9ed 	bl	800c6c0 <USBH_Get_DevDesc>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c2ea:	7bbb      	ldrb	r3, [r7, #14]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d103      	bne.n	800c2f8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2202      	movs	r2, #2
 800c2f4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c2f6:	e145      	b.n	800c584 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c2f8:	7bbb      	ldrb	r3, [r7, #14]
 800c2fa:	2b03      	cmp	r3, #3
 800c2fc:	f040 8142 	bne.w	800c584 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f893 351e 	ldrb.w	r3, [r3, #1310]	; 0x51e
 800c306:	3301      	adds	r3, #1
 800c308:	b2da      	uxtb	r2, r3
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f883 251e 	strb.w	r2, [r3, #1310]	; 0x51e
        if (phost->device.EnumCnt > 3U)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f893 351e 	ldrb.w	r3, [r3, #1310]	; 0x51e
 800c316:	2b03      	cmp	r3, #3
 800c318:	d903      	bls.n	800c322 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	220d      	movs	r2, #13
 800c31e:	701a      	strb	r2, [r3, #0]
      break;
 800c320:	e130      	b.n	800c584 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	795b      	ldrb	r3, [r3, #5]
 800c326:	4619      	mov	r1, r3
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f000 ff5e 	bl	800d1ea <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	791b      	ldrb	r3, [r3, #4]
 800c332:	4619      	mov	r1, r3
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f000 ff58 	bl	800d1ea <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2200      	movs	r2, #0
 800c33e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2200      	movs	r2, #0
 800c344:	701a      	strb	r2, [r3, #0]
      break;
 800c346:	e11d      	b.n	800c584 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c348:	2101      	movs	r1, #1
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 fa64 	bl	800c818 <USBH_SetAddress>
 800c350:	4603      	mov	r3, r0
 800c352:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c354:	7bbb      	ldrb	r3, [r7, #14]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d132      	bne.n	800c3c0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c35a:	2002      	movs	r0, #2
 800c35c:	f003 fd98 	bl	800fe90 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2201      	movs	r2, #1
 800c364:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2203      	movs	r2, #3
 800c36c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	7919      	ldrb	r1, [r3, #4]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f893 051c 	ldrb.w	r0, [r3, #1308]	; 0x51c
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f893 351d 	ldrb.w	r3, [r3, #1309]	; 0x51d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c382:	b292      	uxth	r2, r2
 800c384:	9202      	str	r2, [sp, #8]
 800c386:	2200      	movs	r2, #0
 800c388:	9201      	str	r2, [sp, #4]
 800c38a:	9300      	str	r3, [sp, #0]
 800c38c:	4603      	mov	r3, r0
 800c38e:	2280      	movs	r2, #128	; 0x80
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f000 fed9 	bl	800d148 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	7959      	ldrb	r1, [r3, #5]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f893 051c 	ldrb.w	r0, [r3, #1308]	; 0x51c
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f893 351d 	ldrb.w	r3, [r3, #1309]	; 0x51d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c3aa:	b292      	uxth	r2, r2
 800c3ac:	9202      	str	r2, [sp, #8]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	9201      	str	r2, [sp, #4]
 800c3b2:	9300      	str	r3, [sp, #0]
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f000 fec5 	bl	800d148 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c3be:	e0e3      	b.n	800c588 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c3c0:	7bbb      	ldrb	r3, [r7, #14]
 800c3c2:	2b03      	cmp	r3, #3
 800c3c4:	f040 80e0 	bne.w	800c588 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	220d      	movs	r2, #13
 800c3cc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	705a      	strb	r2, [r3, #1]
      break;
 800c3d4:	e0d8      	b.n	800c588 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c3d6:	2109      	movs	r1, #9
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f000 f999 	bl	800c710 <USBH_Get_CfgDesc>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c3e2:	7bbb      	ldrb	r3, [r7, #14]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d103      	bne.n	800c3f0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2204      	movs	r2, #4
 800c3ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c3ee:	e0cd      	b.n	800c58c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c3f0:	7bbb      	ldrb	r3, [r7, #14]
 800c3f2:	2b03      	cmp	r3, #3
 800c3f4:	f040 80ca 	bne.w	800c58c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f893 351e 	ldrb.w	r3, [r3, #1310]	; 0x51e
 800c3fe:	3301      	adds	r3, #1
 800c400:	b2da      	uxtb	r2, r3
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f883 251e 	strb.w	r2, [r3, #1310]	; 0x51e
        if (phost->device.EnumCnt > 3U)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f893 351e 	ldrb.w	r3, [r3, #1310]	; 0x51e
 800c40e:	2b03      	cmp	r3, #3
 800c410:	d903      	bls.n	800c41a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	220d      	movs	r2, #13
 800c416:	701a      	strb	r2, [r3, #0]
      break;
 800c418:	e0b8      	b.n	800c58c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	795b      	ldrb	r3, [r3, #5]
 800c41e:	4619      	mov	r1, r3
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f000 fee2 	bl	800d1ea <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	791b      	ldrb	r3, [r3, #4]
 800c42a:	4619      	mov	r1, r3
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 fedc 	bl	800d1ea <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2200      	movs	r2, #0
 800c436:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2200      	movs	r2, #0
 800c43c:	701a      	strb	r2, [r3, #0]
      break;
 800c43e:	e0a5      	b.n	800c58c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8b3 353a 	ldrh.w	r3, [r3, #1338]	; 0x53a
 800c446:	4619      	mov	r1, r3
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f000 f961 	bl	800c710 <USBH_Get_CfgDesc>
 800c44e:	4603      	mov	r3, r0
 800c450:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c452:	7bbb      	ldrb	r3, [r7, #14]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d103      	bne.n	800c460 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2205      	movs	r2, #5
 800c45c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c45e:	e097      	b.n	800c590 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c460:	7bbb      	ldrb	r3, [r7, #14]
 800c462:	2b03      	cmp	r3, #3
 800c464:	f040 8094 	bne.w	800c590 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f893 351e 	ldrb.w	r3, [r3, #1310]	; 0x51e
 800c46e:	3301      	adds	r3, #1
 800c470:	b2da      	uxtb	r2, r3
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f883 251e 	strb.w	r2, [r3, #1310]	; 0x51e
        if (phost->device.EnumCnt > 3U)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f893 351e 	ldrb.w	r3, [r3, #1310]	; 0x51e
 800c47e:	2b03      	cmp	r3, #3
 800c480:	d903      	bls.n	800c48a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	220d      	movs	r2, #13
 800c486:	701a      	strb	r2, [r3, #0]
      break;
 800c488:	e082      	b.n	800c590 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	795b      	ldrb	r3, [r3, #5]
 800c48e:	4619      	mov	r1, r3
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f000 feaa 	bl	800d1ea <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	791b      	ldrb	r3, [r3, #4]
 800c49a:	4619      	mov	r1, r3
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 fea4 	bl	800d1ea <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	701a      	strb	r2, [r3, #0]
      break;
 800c4ae:	e06f      	b.n	800c590 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f893 3534 	ldrb.w	r3, [r3, #1332]	; 0x534
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d019      	beq.n	800c4ee <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f893 1534 	ldrb.w	r1, [r3, #1332]	; 0x534
                                        phost->device.Data, 0xFFU);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c4c6:	23ff      	movs	r3, #255	; 0xff
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f000 f945 	bl	800c758 <USBH_Get_StringDesc>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c4d2:	7bbb      	ldrb	r3, [r7, #14]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d103      	bne.n	800c4e0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2206      	movs	r2, #6
 800c4dc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c4de:	e059      	b.n	800c594 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c4e0:	7bbb      	ldrb	r3, [r7, #14]
 800c4e2:	2b03      	cmp	r3, #3
 800c4e4:	d156      	bne.n	800c594 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2206      	movs	r2, #6
 800c4ea:	705a      	strb	r2, [r3, #1]
      break;
 800c4ec:	e052      	b.n	800c594 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2206      	movs	r2, #6
 800c4f2:	705a      	strb	r2, [r3, #1]
      break;
 800c4f4:	e04e      	b.n	800c594 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f893 3535 	ldrb.w	r3, [r3, #1333]	; 0x535
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d019      	beq.n	800c534 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f893 1535 	ldrb.w	r1, [r3, #1333]	; 0x535
                                        phost->device.Data, 0xFFU);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c50c:	23ff      	movs	r3, #255	; 0xff
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 f922 	bl	800c758 <USBH_Get_StringDesc>
 800c514:	4603      	mov	r3, r0
 800c516:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c518:	7bbb      	ldrb	r3, [r7, #14]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d103      	bne.n	800c526 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2207      	movs	r2, #7
 800c522:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c524:	e038      	b.n	800c598 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c526:	7bbb      	ldrb	r3, [r7, #14]
 800c528:	2b03      	cmp	r3, #3
 800c52a:	d135      	bne.n	800c598 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2207      	movs	r2, #7
 800c530:	705a      	strb	r2, [r3, #1]
      break;
 800c532:	e031      	b.n	800c598 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2207      	movs	r2, #7
 800c538:	705a      	strb	r2, [r3, #1]
      break;
 800c53a:	e02d      	b.n	800c598 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f893 3536 	ldrb.w	r3, [r3, #1334]	; 0x536
 800c542:	2b00      	cmp	r3, #0
 800c544:	d017      	beq.n	800c576 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f893 1536 	ldrb.w	r1, [r3, #1334]	; 0x536
                                        phost->device.Data, 0xFFU);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c552:	23ff      	movs	r3, #255	; 0xff
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 f8ff 	bl	800c758 <USBH_Get_StringDesc>
 800c55a:	4603      	mov	r3, r0
 800c55c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c55e:	7bbb      	ldrb	r3, [r7, #14]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d102      	bne.n	800c56a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c564:	2300      	movs	r3, #0
 800c566:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c568:	e018      	b.n	800c59c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c56a:	7bbb      	ldrb	r3, [r7, #14]
 800c56c:	2b03      	cmp	r3, #3
 800c56e:	d115      	bne.n	800c59c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800c570:	2300      	movs	r3, #0
 800c572:	73fb      	strb	r3, [r7, #15]
      break;
 800c574:	e012      	b.n	800c59c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800c576:	2300      	movs	r3, #0
 800c578:	73fb      	strb	r3, [r7, #15]
      break;
 800c57a:	e00f      	b.n	800c59c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800c57c:	bf00      	nop
 800c57e:	e00e      	b.n	800c59e <USBH_HandleEnum+0x3be>
      break;
 800c580:	bf00      	nop
 800c582:	e00c      	b.n	800c59e <USBH_HandleEnum+0x3be>
      break;
 800c584:	bf00      	nop
 800c586:	e00a      	b.n	800c59e <USBH_HandleEnum+0x3be>
      break;
 800c588:	bf00      	nop
 800c58a:	e008      	b.n	800c59e <USBH_HandleEnum+0x3be>
      break;
 800c58c:	bf00      	nop
 800c58e:	e006      	b.n	800c59e <USBH_HandleEnum+0x3be>
      break;
 800c590:	bf00      	nop
 800c592:	e004      	b.n	800c59e <USBH_HandleEnum+0x3be>
      break;
 800c594:	bf00      	nop
 800c596:	e002      	b.n	800c59e <USBH_HandleEnum+0x3be>
      break;
 800c598:	bf00      	nop
 800c59a:	e000      	b.n	800c59e <USBH_HandleEnum+0x3be>
      break;
 800c59c:	bf00      	nop
  }
  return Status;
 800c59e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3710      	adds	r7, #16
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}

0800c5a8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b083      	sub	sp, #12
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	683a      	ldr	r2, [r7, #0]
 800c5b6:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
}
 800c5ba:	bf00      	nop
 800c5bc:	370c      	adds	r7, #12
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bc80      	pop	{r7}
 800c5c2:	4770      	bx	lr

0800c5c4 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8d3 35c4 	ldr.w	r3, [r3, #1476]	; 0x5c4
 800c5d2:	1c5a      	adds	r2, r3, #1
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
  USBH_HandleSof(phost);
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f000 f804 	bl	800c5e8 <USBH_HandleSof>
}
 800c5e0:	bf00      	nop
 800c5e2:	3708      	adds	r7, #8
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b082      	sub	sp, #8
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	b2db      	uxtb	r3, r3
 800c5f6:	2b0b      	cmp	r3, #11
 800c5f8:	d10a      	bne.n	800c610 <USBH_HandleSof+0x28>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800c600:	2b00      	cmp	r3, #0
 800c602:	d005      	beq.n	800c610 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 800c60a:	699b      	ldr	r3, [r3, #24]
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	4798      	blx	r3
  }
}
 800c610:	bf00      	nop
 800c612:	3708      	adds	r7, #8
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}

0800c618 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c618:	b480      	push	{r7}
 800c61a:	b083      	sub	sp, #12
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2201      	movs	r2, #1
 800c624:	f883 2523 	strb.w	r2, [r3, #1315]	; 0x523
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800c628:	bf00      	nop
}
 800c62a:	370c      	adds	r7, #12
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bc80      	pop	{r7}
 800c630:	4770      	bx	lr

0800c632 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c632:	b480      	push	{r7}
 800c634:	b083      	sub	sp, #12
 800c636:	af00      	add	r7, sp, #0
 800c638:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2200      	movs	r2, #0
 800c63e:	f883 2523 	strb.w	r2, [r3, #1315]	; 0x523

  return;
 800c642:	bf00      	nop
}
 800c644:	370c      	adds	r7, #12
 800c646:	46bd      	mov	sp, r7
 800c648:	bc80      	pop	{r7}
 800c64a:	4770      	bx	lr

0800c64c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c64c:	b480      	push	{r7}
 800c64e:	b083      	sub	sp, #12
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2201      	movs	r2, #1
 800c658:	f883 2520 	strb.w	r2, [r3, #1312]	; 0x520
  phost->device.is_disconnected = 0U;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2200      	movs	r2, #0
 800c660:	f883 2521 	strb.w	r2, [r3, #1313]	; 0x521
  phost->device.is_ReEnumerated = 0U;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2200      	movs	r2, #0
 800c668:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c66c:	2300      	movs	r3, #0
}
 800c66e:	4618      	mov	r0, r3
 800c670:	370c      	adds	r7, #12
 800c672:	46bd      	mov	sp, r7
 800c674:	bc80      	pop	{r7}
 800c676:	4770      	bx	lr

0800c678 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2201      	movs	r2, #1
 800c684:	f883 2521 	strb.w	r2, [r3, #1313]	; 0x521
  phost->device.is_connected = 0U;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2200      	movs	r2, #0
 800c68c:	f883 2520 	strb.w	r2, [r3, #1312]	; 0x520
  phost->device.PortEnabled = 0U;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2200      	movs	r2, #0
 800c694:	f883 2523 	strb.w	r2, [r3, #1315]	; 0x523

  /* Stop Host */
  USBH_LL_Stop(phost);
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f003 fa82 	bl	800fba2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	791b      	ldrb	r3, [r3, #4]
 800c6a2:	4619      	mov	r1, r3
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f000 fda0 	bl	800d1ea <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	795b      	ldrb	r3, [r3, #5]
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 fd9a 	bl	800d1ea <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c6b6:	2300      	movs	r3, #0
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	3708      	adds	r7, #8
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}

0800c6c0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b086      	sub	sp, #24
 800c6c4:	af02      	add	r7, sp, #8
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	460b      	mov	r3, r1
 800c6ca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c6d2:	78fb      	ldrb	r3, [r7, #3]
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	9300      	str	r3, [sp, #0]
 800c6d8:	4613      	mov	r3, r2
 800c6da:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c6de:	2100      	movs	r1, #0
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f000 f864 	bl	800c7ae <USBH_GetDescriptor>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	73fb      	strb	r3, [r7, #15]
 800c6ea:	7bfb      	ldrb	r3, [r7, #15]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d10a      	bne.n	800c706 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f203 5026 	addw	r0, r3, #1318	; 0x526
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c6fc:	78fa      	ldrb	r2, [r7, #3]
 800c6fe:	b292      	uxth	r2, r2
 800c700:	4619      	mov	r1, r3
 800c702:	f000 f918 	bl	800c936 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c706:	7bfb      	ldrb	r3, [r7, #15]
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3710      	adds	r7, #16
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c710:	b580      	push	{r7, lr}
 800c712:	b086      	sub	sp, #24
 800c714:	af02      	add	r7, sp, #8
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	460b      	mov	r3, r1
 800c71a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	331c      	adds	r3, #28
 800c720:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c722:	887b      	ldrh	r3, [r7, #2]
 800c724:	9300      	str	r3, [sp, #0]
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c72c:	2100      	movs	r1, #0
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f000 f83d 	bl	800c7ae <USBH_GetDescriptor>
 800c734:	4603      	mov	r3, r0
 800c736:	72fb      	strb	r3, [r7, #11]
 800c738:	7afb      	ldrb	r3, [r7, #11]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d107      	bne.n	800c74e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800c744:	887a      	ldrh	r2, [r7, #2]
 800c746:	68f9      	ldr	r1, [r7, #12]
 800c748:	4618      	mov	r0, r3
 800c74a:	f000 f963 	bl	800ca14 <USBH_ParseCfgDesc>
  }

  return status;
 800c74e:	7afb      	ldrb	r3, [r7, #11]
}
 800c750:	4618      	mov	r0, r3
 800c752:	3710      	adds	r7, #16
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}

0800c758 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b088      	sub	sp, #32
 800c75c:	af02      	add	r7, sp, #8
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	607a      	str	r2, [r7, #4]
 800c762:	461a      	mov	r2, r3
 800c764:	460b      	mov	r3, r1
 800c766:	72fb      	strb	r3, [r7, #11]
 800c768:	4613      	mov	r3, r2
 800c76a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800c76c:	7afb      	ldrb	r3, [r7, #11]
 800c76e:	b29b      	uxth	r3, r3
 800c770:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c774:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c77c:	893b      	ldrh	r3, [r7, #8]
 800c77e:	9300      	str	r3, [sp, #0]
 800c780:	460b      	mov	r3, r1
 800c782:	2100      	movs	r1, #0
 800c784:	68f8      	ldr	r0, [r7, #12]
 800c786:	f000 f812 	bl	800c7ae <USBH_GetDescriptor>
 800c78a:	4603      	mov	r3, r0
 800c78c:	75fb      	strb	r3, [r7, #23]
 800c78e:	7dfb      	ldrb	r3, [r7, #23]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d107      	bne.n	800c7a4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c79a:	893a      	ldrh	r2, [r7, #8]
 800c79c:	6879      	ldr	r1, [r7, #4]
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f000 fa34 	bl	800cc0c <USBH_ParseStringDesc>
  }

  return status;
 800c7a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3718      	adds	r7, #24
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}

0800c7ae <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c7ae:	b580      	push	{r7, lr}
 800c7b0:	b084      	sub	sp, #16
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	60f8      	str	r0, [r7, #12]
 800c7b6:	607b      	str	r3, [r7, #4]
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	72fb      	strb	r3, [r7, #11]
 800c7bc:	4613      	mov	r3, r2
 800c7be:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	789b      	ldrb	r3, [r3, #2]
 800c7c4:	2b01      	cmp	r3, #1
 800c7c6:	d11c      	bne.n	800c802 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c7c8:	7afb      	ldrb	r3, [r7, #11]
 800c7ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c7ce:	b2da      	uxtb	r2, r3
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2206      	movs	r2, #6
 800c7d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	893a      	ldrh	r2, [r7, #8]
 800c7de:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c7e0:	893b      	ldrh	r3, [r7, #8]
 800c7e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c7e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c7ea:	d104      	bne.n	800c7f6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f240 4209 	movw	r2, #1033	; 0x409
 800c7f2:	829a      	strh	r2, [r3, #20]
 800c7f4:	e002      	b.n	800c7fc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	8b3a      	ldrh	r2, [r7, #24]
 800c800:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c802:	8b3b      	ldrh	r3, [r7, #24]
 800c804:	461a      	mov	r2, r3
 800c806:	6879      	ldr	r1, [r7, #4]
 800c808:	68f8      	ldr	r0, [r7, #12]
 800c80a:	f000 fa4b 	bl	800cca4 <USBH_CtlReq>
 800c80e:	4603      	mov	r3, r0
}
 800c810:	4618      	mov	r0, r3
 800c812:	3710      	adds	r7, #16
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}

0800c818 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	460b      	mov	r3, r1
 800c822:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	789b      	ldrb	r3, [r3, #2]
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d10f      	bne.n	800c84c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2200      	movs	r2, #0
 800c830:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2205      	movs	r2, #5
 800c836:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c838:	78fb      	ldrb	r3, [r7, #3]
 800c83a:	b29a      	uxth	r2, r3
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2200      	movs	r2, #0
 800c844:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2200      	movs	r2, #0
 800c84a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c84c:	2200      	movs	r2, #0
 800c84e:	2100      	movs	r1, #0
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f000 fa27 	bl	800cca4 <USBH_CtlReq>
 800c856:	4603      	mov	r3, r0
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3708      	adds	r7, #8
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b082      	sub	sp, #8
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	460b      	mov	r3, r1
 800c86a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	789b      	ldrb	r3, [r3, #2]
 800c870:	2b01      	cmp	r3, #1
 800c872:	d10e      	bne.n	800c892 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2200      	movs	r2, #0
 800c878:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2209      	movs	r2, #9
 800c87e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	887a      	ldrh	r2, [r7, #2]
 800c884:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2200      	movs	r2, #0
 800c88a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2200      	movs	r2, #0
 800c890:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c892:	2200      	movs	r2, #0
 800c894:	2100      	movs	r1, #0
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 fa04 	bl	800cca4 <USBH_CtlReq>
 800c89c:	4603      	mov	r3, r0
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3708      	adds	r7, #8
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}

0800c8a6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b082      	sub	sp, #8
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	789b      	ldrb	r3, [r3, #2]
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d10f      	bne.n	800c8da <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2203      	movs	r2, #3
 800c8c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c8c6:	78fb      	ldrb	r3, [r7, #3]
 800c8c8:	b29a      	uxth	r2, r3
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c8da:	2200      	movs	r2, #0
 800c8dc:	2100      	movs	r1, #0
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f000 f9e0 	bl	800cca4 <USBH_CtlReq>
 800c8e4:	4603      	mov	r3, r0
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3708      	adds	r7, #8
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}

0800c8ee <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c8ee:	b580      	push	{r7, lr}
 800c8f0:	b082      	sub	sp, #8
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
 800c8f6:	460b      	mov	r3, r1
 800c8f8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	789b      	ldrb	r3, [r3, #2]
 800c8fe:	2b01      	cmp	r3, #1
 800c900:	d10f      	bne.n	800c922 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2202      	movs	r2, #2
 800c906:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2201      	movs	r2, #1
 800c90c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2200      	movs	r2, #0
 800c912:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c914:	78fb      	ldrb	r3, [r7, #3]
 800c916:	b29a      	uxth	r2, r3
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2200      	movs	r2, #0
 800c920:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800c922:	2200      	movs	r2, #0
 800c924:	2100      	movs	r1, #0
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 f9bc 	bl	800cca4 <USBH_CtlReq>
 800c92c:	4603      	mov	r3, r0
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3708      	adds	r7, #8
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}

0800c936 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c936:	b480      	push	{r7}
 800c938:	b085      	sub	sp, #20
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	60f8      	str	r0, [r7, #12]
 800c93e:	60b9      	str	r1, [r7, #8]
 800c940:	4613      	mov	r3, r2
 800c942:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	781a      	ldrb	r2, [r3, #0]
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	785a      	ldrb	r2, [r3, #1]
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	3302      	adds	r3, #2
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	b29a      	uxth	r2, r3
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	3303      	adds	r3, #3
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	b29b      	uxth	r3, r3
 800c964:	021b      	lsls	r3, r3, #8
 800c966:	b29b      	uxth	r3, r3
 800c968:	4313      	orrs	r3, r2
 800c96a:	b29a      	uxth	r2, r3
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	791a      	ldrb	r2, [r3, #4]
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	795a      	ldrb	r2, [r3, #5]
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	799a      	ldrb	r2, [r3, #6]
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	79da      	ldrb	r2, [r3, #7]
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800c990:	88fb      	ldrh	r3, [r7, #6]
 800c992:	2b08      	cmp	r3, #8
 800c994:	d939      	bls.n	800ca0a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	3308      	adds	r3, #8
 800c99a:	781b      	ldrb	r3, [r3, #0]
 800c99c:	b29a      	uxth	r2, r3
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	3309      	adds	r3, #9
 800c9a2:	781b      	ldrb	r3, [r3, #0]
 800c9a4:	b29b      	uxth	r3, r3
 800c9a6:	021b      	lsls	r3, r3, #8
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	b29a      	uxth	r2, r3
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	330a      	adds	r3, #10
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	b29a      	uxth	r2, r3
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	330b      	adds	r3, #11
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	021b      	lsls	r3, r3, #8
 800c9c4:	b29b      	uxth	r3, r3
 800c9c6:	4313      	orrs	r3, r2
 800c9c8:	b29a      	uxth	r2, r3
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	330c      	adds	r3, #12
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	b29a      	uxth	r2, r3
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	330d      	adds	r3, #13
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	b29b      	uxth	r3, r3
 800c9de:	021b      	lsls	r3, r3, #8
 800c9e0:	b29b      	uxth	r3, r3
 800c9e2:	4313      	orrs	r3, r2
 800c9e4:	b29a      	uxth	r2, r3
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	7b9a      	ldrb	r2, [r3, #14]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	7bda      	ldrb	r2, [r3, #15]
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	7c1a      	ldrb	r2, [r3, #16]
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	7c5a      	ldrb	r2, [r3, #17]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	745a      	strb	r2, [r3, #17]
  }
}
 800ca0a:	bf00      	nop
 800ca0c:	3714      	adds	r7, #20
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bc80      	pop	{r7}
 800ca12:	4770      	bx	lr

0800ca14 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b08a      	sub	sp, #40	; 0x28
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	60f8      	str	r0, [r7, #12]
 800ca1c:	60b9      	str	r1, [r7, #8]
 800ca1e:	4613      	mov	r3, r2
 800ca20:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ca26:	2300      	movs	r3, #0
 800ca28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	781a      	ldrb	r2, [r3, #0]
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	785a      	ldrb	r2, [r3, #1]
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	3302      	adds	r3, #2
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	b29a      	uxth	r2, r3
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	3303      	adds	r3, #3
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	b29b      	uxth	r3, r3
 800ca56:	021b      	lsls	r3, r3, #8
 800ca58:	b29b      	uxth	r3, r3
 800ca5a:	4313      	orrs	r3, r2
 800ca5c:	b29a      	uxth	r2, r3
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	791a      	ldrb	r2, [r3, #4]
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	795a      	ldrb	r2, [r3, #5]
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	799a      	ldrb	r2, [r3, #6]
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	79da      	ldrb	r2, [r3, #7]
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	7a1a      	ldrb	r2, [r3, #8]
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ca8a:	88fb      	ldrh	r3, [r7, #6]
 800ca8c:	2b09      	cmp	r3, #9
 800ca8e:	d95f      	bls.n	800cb50 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800ca90:	2309      	movs	r3, #9
 800ca92:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800ca94:	2300      	movs	r3, #0
 800ca96:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ca98:	e051      	b.n	800cb3e <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ca9a:	f107 0316 	add.w	r3, r7, #22
 800ca9e:	4619      	mov	r1, r3
 800caa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800caa2:	f000 f8e5 	bl	800cc70 <USBH_GetNextDesc>
 800caa6:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800caa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caaa:	785b      	ldrb	r3, [r3, #1]
 800caac:	2b04      	cmp	r3, #4
 800caae:	d146      	bne.n	800cb3e <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800cab0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cab4:	221a      	movs	r2, #26
 800cab6:	fb02 f303 	mul.w	r3, r2, r3
 800caba:	3308      	adds	r3, #8
 800cabc:	68fa      	ldr	r2, [r7, #12]
 800cabe:	4413      	add	r3, r2
 800cac0:	3302      	adds	r3, #2
 800cac2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800cac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cac6:	69f8      	ldr	r0, [r7, #28]
 800cac8:	f000 f846 	bl	800cb58 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800cacc:	2300      	movs	r3, #0
 800cace:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800cad2:	2300      	movs	r3, #0
 800cad4:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cad6:	e022      	b.n	800cb1e <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cad8:	f107 0316 	add.w	r3, r7, #22
 800cadc:	4619      	mov	r1, r3
 800cade:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cae0:	f000 f8c6 	bl	800cc70 <USBH_GetNextDesc>
 800cae4:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800cae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae8:	785b      	ldrb	r3, [r3, #1]
 800caea:	2b05      	cmp	r3, #5
 800caec:	d117      	bne.n	800cb1e <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800caee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800caf2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800caf6:	3201      	adds	r2, #1
 800caf8:	00d2      	lsls	r2, r2, #3
 800cafa:	211a      	movs	r1, #26
 800cafc:	fb01 f303 	mul.w	r3, r1, r3
 800cb00:	4413      	add	r3, r2
 800cb02:	3308      	adds	r3, #8
 800cb04:	68fa      	ldr	r2, [r7, #12]
 800cb06:	4413      	add	r3, r2
 800cb08:	3304      	adds	r3, #4
 800cb0a:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800cb0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb0e:	69b8      	ldr	r0, [r7, #24]
 800cb10:	f000 f850 	bl	800cbb4 <USBH_ParseEPDesc>
            ep_ix++;
 800cb14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cb18:	3301      	adds	r3, #1
 800cb1a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cb1e:	69fb      	ldr	r3, [r7, #28]
 800cb20:	791b      	ldrb	r3, [r3, #4]
 800cb22:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d204      	bcs.n	800cb34 <USBH_ParseCfgDesc+0x120>
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	885a      	ldrh	r2, [r3, #2]
 800cb2e:	8afb      	ldrh	r3, [r7, #22]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d8d1      	bhi.n	800cad8 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800cb34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cb38:	3301      	adds	r3, #1
 800cb3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cb3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cb42:	2b01      	cmp	r3, #1
 800cb44:	d804      	bhi.n	800cb50 <USBH_ParseCfgDesc+0x13c>
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	885a      	ldrh	r2, [r3, #2]
 800cb4a:	8afb      	ldrh	r3, [r7, #22]
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d8a4      	bhi.n	800ca9a <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800cb50:	bf00      	nop
 800cb52:	3728      	adds	r7, #40	; 0x28
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}

0800cb58 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b083      	sub	sp, #12
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	781a      	ldrb	r2, [r3, #0]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	785a      	ldrb	r2, [r3, #1]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	789a      	ldrb	r2, [r3, #2]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	78da      	ldrb	r2, [r3, #3]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	791a      	ldrb	r2, [r3, #4]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	795a      	ldrb	r2, [r3, #5]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	799a      	ldrb	r2, [r3, #6]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	79da      	ldrb	r2, [r3, #7]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	7a1a      	ldrb	r2, [r3, #8]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	721a      	strb	r2, [r3, #8]
}
 800cbaa:	bf00      	nop
 800cbac:	370c      	adds	r7, #12
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bc80      	pop	{r7}
 800cbb2:	4770      	bx	lr

0800cbb4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b083      	sub	sp, #12
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	781a      	ldrb	r2, [r3, #0]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	785a      	ldrb	r2, [r3, #1]
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	789a      	ldrb	r2, [r3, #2]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	78da      	ldrb	r2, [r3, #3]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	3304      	adds	r3, #4
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	b29a      	uxth	r2, r3
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	3305      	adds	r3, #5
 800cbea:	781b      	ldrb	r3, [r3, #0]
 800cbec:	b29b      	uxth	r3, r3
 800cbee:	021b      	lsls	r3, r3, #8
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	b29a      	uxth	r2, r3
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	799a      	ldrb	r2, [r3, #6]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	719a      	strb	r2, [r3, #6]
}
 800cc02:	bf00      	nop
 800cc04:	370c      	adds	r7, #12
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bc80      	pop	{r7}
 800cc0a:	4770      	bx	lr

0800cc0c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b087      	sub	sp, #28
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	60b9      	str	r1, [r7, #8]
 800cc16:	4613      	mov	r3, r2
 800cc18:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	2b03      	cmp	r3, #3
 800cc22:	d120      	bne.n	800cc66 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	1e9a      	subs	r2, r3, #2
 800cc2a:	88fb      	ldrh	r3, [r7, #6]
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	bf28      	it	cs
 800cc30:	4613      	movcs	r3, r2
 800cc32:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	3302      	adds	r3, #2
 800cc38:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	82fb      	strh	r3, [r7, #22]
 800cc3e:	e00b      	b.n	800cc58 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800cc40:	8afb      	ldrh	r3, [r7, #22]
 800cc42:	68fa      	ldr	r2, [r7, #12]
 800cc44:	4413      	add	r3, r2
 800cc46:	781a      	ldrb	r2, [r3, #0]
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	3301      	adds	r3, #1
 800cc50:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800cc52:	8afb      	ldrh	r3, [r7, #22]
 800cc54:	3302      	adds	r3, #2
 800cc56:	82fb      	strh	r3, [r7, #22]
 800cc58:	8afa      	ldrh	r2, [r7, #22]
 800cc5a:	8abb      	ldrh	r3, [r7, #20]
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	d3ef      	bcc.n	800cc40 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	2200      	movs	r2, #0
 800cc64:	701a      	strb	r2, [r3, #0]
  }
}
 800cc66:	bf00      	nop
 800cc68:	371c      	adds	r7, #28
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bc80      	pop	{r7}
 800cc6e:	4770      	bx	lr

0800cc70 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b085      	sub	sp, #20
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	881a      	ldrh	r2, [r3, #0]
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	781b      	ldrb	r3, [r3, #0]
 800cc82:	b29b      	uxth	r3, r3
 800cc84:	4413      	add	r3, r2
 800cc86:	b29a      	uxth	r2, r3
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	4413      	add	r3, r2
 800cc96:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cc98:	68fb      	ldr	r3, [r7, #12]
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3714      	adds	r7, #20
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bc80      	pop	{r7}
 800cca2:	4770      	bx	lr

0800cca4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b086      	sub	sp, #24
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	4613      	mov	r3, r2
 800ccb0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	789b      	ldrb	r3, [r3, #2]
 800ccba:	2b01      	cmp	r3, #1
 800ccbc:	d002      	beq.n	800ccc4 <USBH_CtlReq+0x20>
 800ccbe:	2b02      	cmp	r3, #2
 800ccc0:	d00f      	beq.n	800cce2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ccc2:	e027      	b.n	800cd14 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	68ba      	ldr	r2, [r7, #8]
 800ccc8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	88fa      	ldrh	r2, [r7, #6]
 800ccce:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	2202      	movs	r2, #2
 800ccda:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ccdc:	2301      	movs	r3, #1
 800ccde:	75fb      	strb	r3, [r7, #23]
      break;
 800cce0:	e018      	b.n	800cd14 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800cce2:	68f8      	ldr	r0, [r7, #12]
 800cce4:	f000 f81c 	bl	800cd20 <USBH_HandleControl>
 800cce8:	4603      	mov	r3, r0
 800ccea:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ccec:	7dfb      	ldrb	r3, [r7, #23]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d002      	beq.n	800ccf8 <USBH_CtlReq+0x54>
 800ccf2:	7dfb      	ldrb	r3, [r7, #23]
 800ccf4:	2b03      	cmp	r3, #3
 800ccf6:	d106      	bne.n	800cd06 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2200      	movs	r2, #0
 800cd02:	761a      	strb	r2, [r3, #24]
      break;
 800cd04:	e005      	b.n	800cd12 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800cd06:	7dfb      	ldrb	r3, [r7, #23]
 800cd08:	2b02      	cmp	r3, #2
 800cd0a:	d102      	bne.n	800cd12 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2201      	movs	r2, #1
 800cd10:	709a      	strb	r2, [r3, #2]
      break;
 800cd12:	bf00      	nop
  }
  return status;
 800cd14:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3718      	adds	r7, #24
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
	...

0800cd20 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b086      	sub	sp, #24
 800cd24:	af02      	add	r7, sp, #8
 800cd26:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800cd28:	2301      	movs	r3, #1
 800cd2a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	7e1b      	ldrb	r3, [r3, #24]
 800cd34:	3b01      	subs	r3, #1
 800cd36:	2b0a      	cmp	r3, #10
 800cd38:	f200 8156 	bhi.w	800cfe8 <USBH_HandleControl+0x2c8>
 800cd3c:	a201      	add	r2, pc, #4	; (adr r2, 800cd44 <USBH_HandleControl+0x24>)
 800cd3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd42:	bf00      	nop
 800cd44:	0800cd71 	.word	0x0800cd71
 800cd48:	0800cd8b 	.word	0x0800cd8b
 800cd4c:	0800cdf5 	.word	0x0800cdf5
 800cd50:	0800ce1b 	.word	0x0800ce1b
 800cd54:	0800ce53 	.word	0x0800ce53
 800cd58:	0800ce7d 	.word	0x0800ce7d
 800cd5c:	0800cecf 	.word	0x0800cecf
 800cd60:	0800cef1 	.word	0x0800cef1
 800cd64:	0800cf2d 	.word	0x0800cf2d
 800cd68:	0800cf53 	.word	0x0800cf53
 800cd6c:	0800cf91 	.word	0x0800cf91
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f103 0110 	add.w	r1, r3, #16
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	795b      	ldrb	r3, [r3, #5]
 800cd7a:	461a      	mov	r2, r3
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f000 f943 	bl	800d008 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2202      	movs	r2, #2
 800cd86:	761a      	strb	r2, [r3, #24]
      break;
 800cd88:	e139      	b.n	800cffe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	795b      	ldrb	r3, [r3, #5]
 800cd8e:	4619      	mov	r1, r3
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f002 fff5 	bl	800fd80 <USBH_LL_GetURBState>
 800cd96:	4603      	mov	r3, r0
 800cd98:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800cd9a:	7bbb      	ldrb	r3, [r7, #14]
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d11e      	bne.n	800cdde <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	7c1b      	ldrb	r3, [r3, #16]
 800cda4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cda8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	8adb      	ldrh	r3, [r3, #22]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d00a      	beq.n	800cdc8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800cdb2:	7b7b      	ldrb	r3, [r7, #13]
 800cdb4:	2b80      	cmp	r3, #128	; 0x80
 800cdb6:	d103      	bne.n	800cdc0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2203      	movs	r2, #3
 800cdbc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cdbe:	e115      	b.n	800cfec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2205      	movs	r2, #5
 800cdc4:	761a      	strb	r2, [r3, #24]
      break;
 800cdc6:	e111      	b.n	800cfec <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800cdc8:	7b7b      	ldrb	r3, [r7, #13]
 800cdca:	2b80      	cmp	r3, #128	; 0x80
 800cdcc:	d103      	bne.n	800cdd6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2209      	movs	r2, #9
 800cdd2:	761a      	strb	r2, [r3, #24]
      break;
 800cdd4:	e10a      	b.n	800cfec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2207      	movs	r2, #7
 800cdda:	761a      	strb	r2, [r3, #24]
      break;
 800cddc:	e106      	b.n	800cfec <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800cdde:	7bbb      	ldrb	r3, [r7, #14]
 800cde0:	2b04      	cmp	r3, #4
 800cde2:	d003      	beq.n	800cdec <USBH_HandleControl+0xcc>
 800cde4:	7bbb      	ldrb	r3, [r7, #14]
 800cde6:	2b02      	cmp	r3, #2
 800cde8:	f040 8100 	bne.w	800cfec <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	220b      	movs	r2, #11
 800cdf0:	761a      	strb	r2, [r3, #24]
      break;
 800cdf2:	e0fb      	b.n	800cfec <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f8d3 35c4 	ldr.w	r3, [r3, #1476]	; 0x5c4
 800cdfa:	b29a      	uxth	r2, r3
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6899      	ldr	r1, [r3, #8]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	899a      	ldrh	r2, [r3, #12]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	791b      	ldrb	r3, [r3, #4]
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f000 f93a 	bl	800d086 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2204      	movs	r2, #4
 800ce16:	761a      	strb	r2, [r3, #24]
      break;
 800ce18:	e0f1      	b.n	800cffe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	791b      	ldrb	r3, [r3, #4]
 800ce1e:	4619      	mov	r1, r3
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f002 ffad 	bl	800fd80 <USBH_LL_GetURBState>
 800ce26:	4603      	mov	r3, r0
 800ce28:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ce2a:	7bbb      	ldrb	r3, [r7, #14]
 800ce2c:	2b01      	cmp	r3, #1
 800ce2e:	d102      	bne.n	800ce36 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2209      	movs	r2, #9
 800ce34:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ce36:	7bbb      	ldrb	r3, [r7, #14]
 800ce38:	2b05      	cmp	r3, #5
 800ce3a:	d102      	bne.n	800ce42 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ce3c:	2303      	movs	r3, #3
 800ce3e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ce40:	e0d6      	b.n	800cff0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ce42:	7bbb      	ldrb	r3, [r7, #14]
 800ce44:	2b04      	cmp	r3, #4
 800ce46:	f040 80d3 	bne.w	800cff0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	220b      	movs	r2, #11
 800ce4e:	761a      	strb	r2, [r3, #24]
      break;
 800ce50:	e0ce      	b.n	800cff0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6899      	ldr	r1, [r3, #8]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	899a      	ldrh	r2, [r3, #12]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	795b      	ldrb	r3, [r3, #5]
 800ce5e:	2001      	movs	r0, #1
 800ce60:	9000      	str	r0, [sp, #0]
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f000 f8ea 	bl	800d03c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8d3 35c4 	ldr.w	r3, [r3, #1476]	; 0x5c4
 800ce6e:	b29a      	uxth	r2, r3
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2206      	movs	r2, #6
 800ce78:	761a      	strb	r2, [r3, #24]
      break;
 800ce7a:	e0c0      	b.n	800cffe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	795b      	ldrb	r3, [r3, #5]
 800ce80:	4619      	mov	r1, r3
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f002 ff7c 	bl	800fd80 <USBH_LL_GetURBState>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ce8c:	7bbb      	ldrb	r3, [r7, #14]
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d103      	bne.n	800ce9a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2207      	movs	r2, #7
 800ce96:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ce98:	e0ac      	b.n	800cff4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ce9a:	7bbb      	ldrb	r3, [r7, #14]
 800ce9c:	2b05      	cmp	r3, #5
 800ce9e:	d105      	bne.n	800ceac <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	220c      	movs	r2, #12
 800cea4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800cea6:	2303      	movs	r3, #3
 800cea8:	73fb      	strb	r3, [r7, #15]
      break;
 800ceaa:	e0a3      	b.n	800cff4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ceac:	7bbb      	ldrb	r3, [r7, #14]
 800ceae:	2b02      	cmp	r3, #2
 800ceb0:	d103      	bne.n	800ceba <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2205      	movs	r2, #5
 800ceb6:	761a      	strb	r2, [r3, #24]
      break;
 800ceb8:	e09c      	b.n	800cff4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ceba:	7bbb      	ldrb	r3, [r7, #14]
 800cebc:	2b04      	cmp	r3, #4
 800cebe:	f040 8099 	bne.w	800cff4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	220b      	movs	r2, #11
 800cec6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800cec8:	2302      	movs	r3, #2
 800ceca:	73fb      	strb	r3, [r7, #15]
      break;
 800cecc:	e092      	b.n	800cff4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	791b      	ldrb	r3, [r3, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	2100      	movs	r1, #0
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f000 f8d5 	bl	800d086 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 35c4 	ldr.w	r3, [r3, #1476]	; 0x5c4
 800cee2:	b29a      	uxth	r2, r3
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2208      	movs	r2, #8
 800ceec:	761a      	strb	r2, [r3, #24]

      break;
 800ceee:	e086      	b.n	800cffe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	791b      	ldrb	r3, [r3, #4]
 800cef4:	4619      	mov	r1, r3
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f002 ff42 	bl	800fd80 <USBH_LL_GetURBState>
 800cefc:	4603      	mov	r3, r0
 800cefe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cf00:	7bbb      	ldrb	r3, [r7, #14]
 800cf02:	2b01      	cmp	r3, #1
 800cf04:	d105      	bne.n	800cf12 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	220d      	movs	r2, #13
 800cf0a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cf10:	e072      	b.n	800cff8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800cf12:	7bbb      	ldrb	r3, [r7, #14]
 800cf14:	2b04      	cmp	r3, #4
 800cf16:	d103      	bne.n	800cf20 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	220b      	movs	r2, #11
 800cf1c:	761a      	strb	r2, [r3, #24]
      break;
 800cf1e:	e06b      	b.n	800cff8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800cf20:	7bbb      	ldrb	r3, [r7, #14]
 800cf22:	2b05      	cmp	r3, #5
 800cf24:	d168      	bne.n	800cff8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800cf26:	2303      	movs	r3, #3
 800cf28:	73fb      	strb	r3, [r7, #15]
      break;
 800cf2a:	e065      	b.n	800cff8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	795b      	ldrb	r3, [r3, #5]
 800cf30:	2201      	movs	r2, #1
 800cf32:	9200      	str	r2, [sp, #0]
 800cf34:	2200      	movs	r2, #0
 800cf36:	2100      	movs	r1, #0
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f000 f87f 	bl	800d03c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f8d3 35c4 	ldr.w	r3, [r3, #1476]	; 0x5c4
 800cf44:	b29a      	uxth	r2, r3
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	220a      	movs	r2, #10
 800cf4e:	761a      	strb	r2, [r3, #24]
      break;
 800cf50:	e055      	b.n	800cffe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	795b      	ldrb	r3, [r3, #5]
 800cf56:	4619      	mov	r1, r3
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f002 ff11 	bl	800fd80 <USBH_LL_GetURBState>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800cf62:	7bbb      	ldrb	r3, [r7, #14]
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d105      	bne.n	800cf74 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	220d      	movs	r2, #13
 800cf70:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cf72:	e043      	b.n	800cffc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cf74:	7bbb      	ldrb	r3, [r7, #14]
 800cf76:	2b02      	cmp	r3, #2
 800cf78:	d103      	bne.n	800cf82 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2209      	movs	r2, #9
 800cf7e:	761a      	strb	r2, [r3, #24]
      break;
 800cf80:	e03c      	b.n	800cffc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800cf82:	7bbb      	ldrb	r3, [r7, #14]
 800cf84:	2b04      	cmp	r3, #4
 800cf86:	d139      	bne.n	800cffc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	220b      	movs	r2, #11
 800cf8c:	761a      	strb	r2, [r3, #24]
      break;
 800cf8e:	e035      	b.n	800cffc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	7e5b      	ldrb	r3, [r3, #25]
 800cf94:	3301      	adds	r3, #1
 800cf96:	b2da      	uxtb	r2, r3
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	765a      	strb	r2, [r3, #25]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	7e5b      	ldrb	r3, [r3, #25]
 800cfa0:	2b02      	cmp	r3, #2
 800cfa2:	d806      	bhi.n	800cfb2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2201      	movs	r2, #1
 800cfae:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800cfb0:	e025      	b.n	800cffe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f8d3 35d4 	ldr.w	r3, [r3, #1492]	; 0x5d4
 800cfb8:	2106      	movs	r1, #6
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	795b      	ldrb	r3, [r3, #5]
 800cfc8:	4619      	mov	r1, r3
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f000 f90d 	bl	800d1ea <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	791b      	ldrb	r3, [r3, #4]
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f000 f907 	bl	800d1ea <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800cfe2:	2302      	movs	r3, #2
 800cfe4:	73fb      	strb	r3, [r7, #15]
      break;
 800cfe6:	e00a      	b.n	800cffe <USBH_HandleControl+0x2de>

    default:
      break;
 800cfe8:	bf00      	nop
 800cfea:	e008      	b.n	800cffe <USBH_HandleControl+0x2de>
      break;
 800cfec:	bf00      	nop
 800cfee:	e006      	b.n	800cffe <USBH_HandleControl+0x2de>
      break;
 800cff0:	bf00      	nop
 800cff2:	e004      	b.n	800cffe <USBH_HandleControl+0x2de>
      break;
 800cff4:	bf00      	nop
 800cff6:	e002      	b.n	800cffe <USBH_HandleControl+0x2de>
      break;
 800cff8:	bf00      	nop
 800cffa:	e000      	b.n	800cffe <USBH_HandleControl+0x2de>
      break;
 800cffc:	bf00      	nop
  }

  return status;
 800cffe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d000:	4618      	mov	r0, r3
 800d002:	3710      	adds	r7, #16
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b088      	sub	sp, #32
 800d00c:	af04      	add	r7, sp, #16
 800d00e:	60f8      	str	r0, [r7, #12]
 800d010:	60b9      	str	r1, [r7, #8]
 800d012:	4613      	mov	r3, r2
 800d014:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d016:	79f9      	ldrb	r1, [r7, #7]
 800d018:	2300      	movs	r3, #0
 800d01a:	9303      	str	r3, [sp, #12]
 800d01c:	2308      	movs	r3, #8
 800d01e:	9302      	str	r3, [sp, #8]
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	9301      	str	r3, [sp, #4]
 800d024:	2300      	movs	r3, #0
 800d026:	9300      	str	r3, [sp, #0]
 800d028:	2300      	movs	r3, #0
 800d02a:	2200      	movs	r2, #0
 800d02c:	68f8      	ldr	r0, [r7, #12]
 800d02e:	f002 fe76 	bl	800fd1e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800d032:	2300      	movs	r3, #0
}
 800d034:	4618      	mov	r0, r3
 800d036:	3710      	adds	r7, #16
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b088      	sub	sp, #32
 800d040:	af04      	add	r7, sp, #16
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	60b9      	str	r1, [r7, #8]
 800d046:	4611      	mov	r1, r2
 800d048:	461a      	mov	r2, r3
 800d04a:	460b      	mov	r3, r1
 800d04c:	80fb      	strh	r3, [r7, #6]
 800d04e:	4613      	mov	r3, r2
 800d050:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	f893 351d 	ldrb.w	r3, [r3, #1309]	; 0x51d
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d001      	beq.n	800d060 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d05c:	2300      	movs	r3, #0
 800d05e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d060:	7979      	ldrb	r1, [r7, #5]
 800d062:	7e3b      	ldrb	r3, [r7, #24]
 800d064:	9303      	str	r3, [sp, #12]
 800d066:	88fb      	ldrh	r3, [r7, #6]
 800d068:	9302      	str	r3, [sp, #8]
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	9301      	str	r3, [sp, #4]
 800d06e:	2301      	movs	r3, #1
 800d070:	9300      	str	r3, [sp, #0]
 800d072:	2300      	movs	r3, #0
 800d074:	2200      	movs	r2, #0
 800d076:	68f8      	ldr	r0, [r7, #12]
 800d078:	f002 fe51 	bl	800fd1e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d07c:	2300      	movs	r3, #0
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3710      	adds	r7, #16
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}

0800d086 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d086:	b580      	push	{r7, lr}
 800d088:	b088      	sub	sp, #32
 800d08a:	af04      	add	r7, sp, #16
 800d08c:	60f8      	str	r0, [r7, #12]
 800d08e:	60b9      	str	r1, [r7, #8]
 800d090:	4611      	mov	r1, r2
 800d092:	461a      	mov	r2, r3
 800d094:	460b      	mov	r3, r1
 800d096:	80fb      	strh	r3, [r7, #6]
 800d098:	4613      	mov	r3, r2
 800d09a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d09c:	7979      	ldrb	r1, [r7, #5]
 800d09e:	2300      	movs	r3, #0
 800d0a0:	9303      	str	r3, [sp, #12]
 800d0a2:	88fb      	ldrh	r3, [r7, #6]
 800d0a4:	9302      	str	r3, [sp, #8]
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	9301      	str	r3, [sp, #4]
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	9300      	str	r3, [sp, #0]
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	68f8      	ldr	r0, [r7, #12]
 800d0b4:	f002 fe33 	bl	800fd1e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d0b8:	2300      	movs	r3, #0

}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3710      	adds	r7, #16
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}

0800d0c2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d0c2:	b580      	push	{r7, lr}
 800d0c4:	b088      	sub	sp, #32
 800d0c6:	af04      	add	r7, sp, #16
 800d0c8:	60f8      	str	r0, [r7, #12]
 800d0ca:	60b9      	str	r1, [r7, #8]
 800d0cc:	4611      	mov	r1, r2
 800d0ce:	461a      	mov	r2, r3
 800d0d0:	460b      	mov	r3, r1
 800d0d2:	80fb      	strh	r3, [r7, #6]
 800d0d4:	4613      	mov	r3, r2
 800d0d6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f893 351d 	ldrb.w	r3, [r3, #1309]	; 0x51d
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d001      	beq.n	800d0e6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d0e6:	7979      	ldrb	r1, [r7, #5]
 800d0e8:	7e3b      	ldrb	r3, [r7, #24]
 800d0ea:	9303      	str	r3, [sp, #12]
 800d0ec:	88fb      	ldrh	r3, [r7, #6]
 800d0ee:	9302      	str	r3, [sp, #8]
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	9301      	str	r3, [sp, #4]
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	9300      	str	r3, [sp, #0]
 800d0f8:	2302      	movs	r3, #2
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	68f8      	ldr	r0, [r7, #12]
 800d0fe:	f002 fe0e 	bl	800fd1e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d102:	2300      	movs	r3, #0
}
 800d104:	4618      	mov	r0, r3
 800d106:	3710      	adds	r7, #16
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}

0800d10c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b088      	sub	sp, #32
 800d110:	af04      	add	r7, sp, #16
 800d112:	60f8      	str	r0, [r7, #12]
 800d114:	60b9      	str	r1, [r7, #8]
 800d116:	4611      	mov	r1, r2
 800d118:	461a      	mov	r2, r3
 800d11a:	460b      	mov	r3, r1
 800d11c:	80fb      	strh	r3, [r7, #6]
 800d11e:	4613      	mov	r3, r2
 800d120:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d122:	7979      	ldrb	r1, [r7, #5]
 800d124:	2300      	movs	r3, #0
 800d126:	9303      	str	r3, [sp, #12]
 800d128:	88fb      	ldrh	r3, [r7, #6]
 800d12a:	9302      	str	r3, [sp, #8]
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	9301      	str	r3, [sp, #4]
 800d130:	2301      	movs	r3, #1
 800d132:	9300      	str	r3, [sp, #0]
 800d134:	2302      	movs	r3, #2
 800d136:	2201      	movs	r2, #1
 800d138:	68f8      	ldr	r0, [r7, #12]
 800d13a:	f002 fdf0 	bl	800fd1e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d13e:	2300      	movs	r3, #0
}
 800d140:	4618      	mov	r0, r3
 800d142:	3710      	adds	r7, #16
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b086      	sub	sp, #24
 800d14c:	af04      	add	r7, sp, #16
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	4608      	mov	r0, r1
 800d152:	4611      	mov	r1, r2
 800d154:	461a      	mov	r2, r3
 800d156:	4603      	mov	r3, r0
 800d158:	70fb      	strb	r3, [r7, #3]
 800d15a:	460b      	mov	r3, r1
 800d15c:	70bb      	strb	r3, [r7, #2]
 800d15e:	4613      	mov	r3, r2
 800d160:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d162:	7878      	ldrb	r0, [r7, #1]
 800d164:	78ba      	ldrb	r2, [r7, #2]
 800d166:	78f9      	ldrb	r1, [r7, #3]
 800d168:	8b3b      	ldrh	r3, [r7, #24]
 800d16a:	9302      	str	r3, [sp, #8]
 800d16c:	7d3b      	ldrb	r3, [r7, #20]
 800d16e:	9301      	str	r3, [sp, #4]
 800d170:	7c3b      	ldrb	r3, [r7, #16]
 800d172:	9300      	str	r3, [sp, #0]
 800d174:	4603      	mov	r3, r0
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f002 fd83 	bl	800fc82 <USBH_LL_OpenPipe>

  return USBH_OK;
 800d17c:	2300      	movs	r3, #0
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3708      	adds	r7, #8
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}

0800d186 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d186:	b580      	push	{r7, lr}
 800d188:	b082      	sub	sp, #8
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	6078      	str	r0, [r7, #4]
 800d18e:	460b      	mov	r3, r1
 800d190:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800d192:	78fb      	ldrb	r3, [r7, #3]
 800d194:	4619      	mov	r1, r3
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f002 fda2 	bl	800fce0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d19c:	2300      	movs	r3, #0
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3708      	adds	r7, #8
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}

0800d1a6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d1a6:	b580      	push	{r7, lr}
 800d1a8:	b084      	sub	sp, #16
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	6078      	str	r0, [r7, #4]
 800d1ae:	460b      	mov	r3, r1
 800d1b0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f000 f838 	bl	800d228 <USBH_GetFreePipe>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d1bc:	89fb      	ldrh	r3, [r7, #14]
 800d1be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d00b      	beq.n	800d1de <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800d1c6:	78fa      	ldrb	r2, [r7, #3]
 800d1c8:	89fb      	ldrh	r3, [r7, #14]
 800d1ca:	f003 030f 	and.w	r3, r3, #15
 800d1ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d1d2:	6879      	ldr	r1, [r7, #4]
 800d1d4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800d1d8:	009b      	lsls	r3, r3, #2
 800d1da:	440b      	add	r3, r1
 800d1dc:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d1de:	89fb      	ldrh	r3, [r7, #14]
 800d1e0:	b2db      	uxtb	r3, r3
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3710      	adds	r7, #16
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}

0800d1ea <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d1ea:	b480      	push	{r7}
 800d1ec:	b083      	sub	sp, #12
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800d1f6:	78fb      	ldrb	r3, [r7, #3]
 800d1f8:	2b0a      	cmp	r3, #10
 800d1fa:	d80f      	bhi.n	800d21c <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d1fc:	78fb      	ldrb	r3, [r7, #3]
 800d1fe:	687a      	ldr	r2, [r7, #4]
 800d200:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	4413      	add	r3, r2
 800d208:	685a      	ldr	r2, [r3, #4]
 800d20a:	78fb      	ldrb	r3, [r7, #3]
 800d20c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d210:	6879      	ldr	r1, [r7, #4]
 800d212:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800d216:	009b      	lsls	r3, r3, #2
 800d218:	440b      	add	r3, r1
 800d21a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d21c:	2300      	movs	r3, #0
}
 800d21e:	4618      	mov	r0, r3
 800d220:	370c      	adds	r7, #12
 800d222:	46bd      	mov	sp, r7
 800d224:	bc80      	pop	{r7}
 800d226:	4770      	bx	lr

0800d228 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d228:	b480      	push	{r7}
 800d22a:	b085      	sub	sp, #20
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d230:	2300      	movs	r3, #0
 800d232:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800d234:	2300      	movs	r3, #0
 800d236:	73fb      	strb	r3, [r7, #15]
 800d238:	e010      	b.n	800d25c <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d23a:	7bfb      	ldrb	r3, [r7, #15]
 800d23c:	687a      	ldr	r2, [r7, #4]
 800d23e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	4413      	add	r3, r2
 800d246:	685b      	ldr	r3, [r3, #4]
 800d248:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d102      	bne.n	800d256 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 800d250:	7bfb      	ldrb	r3, [r7, #15]
 800d252:	b29b      	uxth	r3, r3
 800d254:	e007      	b.n	800d266 <USBH_GetFreePipe+0x3e>
  for (idx = 0U ; idx < 11U ; idx++)
 800d256:	7bfb      	ldrb	r3, [r7, #15]
 800d258:	3301      	adds	r3, #1
 800d25a:	73fb      	strb	r3, [r7, #15]
 800d25c:	7bfb      	ldrb	r3, [r7, #15]
 800d25e:	2b0a      	cmp	r3, #10
 800d260:	d9eb      	bls.n	800d23a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d262:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d266:	4618      	mov	r0, r3
 800d268:	3714      	adds	r7, #20
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bc80      	pop	{r7}
 800d26e:	4770      	bx	lr

0800d270 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b084      	sub	sp, #16
 800d274:	af00      	add	r7, sp, #0
 800d276:	4603      	mov	r3, r0
 800d278:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d27a:	79fb      	ldrb	r3, [r7, #7]
 800d27c:	4a08      	ldr	r2, [pc, #32]	; (800d2a0 <disk_status+0x30>)
 800d27e:	009b      	lsls	r3, r3, #2
 800d280:	4413      	add	r3, r2
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	685b      	ldr	r3, [r3, #4]
 800d286:	79fa      	ldrb	r2, [r7, #7]
 800d288:	4905      	ldr	r1, [pc, #20]	; (800d2a0 <disk_status+0x30>)
 800d28a:	440a      	add	r2, r1
 800d28c:	7a12      	ldrb	r2, [r2, #8]
 800d28e:	4610      	mov	r0, r2
 800d290:	4798      	blx	r3
 800d292:	4603      	mov	r3, r0
 800d294:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d296:	7bfb      	ldrb	r3, [r7, #15]
}
 800d298:	4618      	mov	r0, r3
 800d29a:	3710      	adds	r7, #16
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}
 800d2a0:	20000134 	.word	0x20000134

0800d2a4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b084      	sub	sp, #16
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d2b2:	79fb      	ldrb	r3, [r7, #7]
 800d2b4:	4a0d      	ldr	r2, [pc, #52]	; (800d2ec <disk_initialize+0x48>)
 800d2b6:	5cd3      	ldrb	r3, [r2, r3]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d111      	bne.n	800d2e0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d2bc:	79fb      	ldrb	r3, [r7, #7]
 800d2be:	4a0b      	ldr	r2, [pc, #44]	; (800d2ec <disk_initialize+0x48>)
 800d2c0:	2101      	movs	r1, #1
 800d2c2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d2c4:	79fb      	ldrb	r3, [r7, #7]
 800d2c6:	4a09      	ldr	r2, [pc, #36]	; (800d2ec <disk_initialize+0x48>)
 800d2c8:	009b      	lsls	r3, r3, #2
 800d2ca:	4413      	add	r3, r2
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	79fa      	ldrb	r2, [r7, #7]
 800d2d2:	4906      	ldr	r1, [pc, #24]	; (800d2ec <disk_initialize+0x48>)
 800d2d4:	440a      	add	r2, r1
 800d2d6:	7a12      	ldrb	r2, [r2, #8]
 800d2d8:	4610      	mov	r0, r2
 800d2da:	4798      	blx	r3
 800d2dc:	4603      	mov	r3, r0
 800d2de:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3710      	adds	r7, #16
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
 800d2ea:	bf00      	nop
 800d2ec:	20000134 	.word	0x20000134

0800d2f0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d2f0:	b590      	push	{r4, r7, lr}
 800d2f2:	b087      	sub	sp, #28
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	60b9      	str	r1, [r7, #8]
 800d2f8:	607a      	str	r2, [r7, #4]
 800d2fa:	603b      	str	r3, [r7, #0]
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d300:	7bfb      	ldrb	r3, [r7, #15]
 800d302:	4a0a      	ldr	r2, [pc, #40]	; (800d32c <disk_read+0x3c>)
 800d304:	009b      	lsls	r3, r3, #2
 800d306:	4413      	add	r3, r2
 800d308:	685b      	ldr	r3, [r3, #4]
 800d30a:	689c      	ldr	r4, [r3, #8]
 800d30c:	7bfb      	ldrb	r3, [r7, #15]
 800d30e:	4a07      	ldr	r2, [pc, #28]	; (800d32c <disk_read+0x3c>)
 800d310:	4413      	add	r3, r2
 800d312:	7a18      	ldrb	r0, [r3, #8]
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	687a      	ldr	r2, [r7, #4]
 800d318:	68b9      	ldr	r1, [r7, #8]
 800d31a:	47a0      	blx	r4
 800d31c:	4603      	mov	r3, r0
 800d31e:	75fb      	strb	r3, [r7, #23]
  return res;
 800d320:	7dfb      	ldrb	r3, [r7, #23]
}
 800d322:	4618      	mov	r0, r3
 800d324:	371c      	adds	r7, #28
 800d326:	46bd      	mov	sp, r7
 800d328:	bd90      	pop	{r4, r7, pc}
 800d32a:	bf00      	nop
 800d32c:	20000134 	.word	0x20000134

0800d330 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d330:	b590      	push	{r4, r7, lr}
 800d332:	b087      	sub	sp, #28
 800d334:	af00      	add	r7, sp, #0
 800d336:	60b9      	str	r1, [r7, #8]
 800d338:	607a      	str	r2, [r7, #4]
 800d33a:	603b      	str	r3, [r7, #0]
 800d33c:	4603      	mov	r3, r0
 800d33e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d340:	7bfb      	ldrb	r3, [r7, #15]
 800d342:	4a0a      	ldr	r2, [pc, #40]	; (800d36c <disk_write+0x3c>)
 800d344:	009b      	lsls	r3, r3, #2
 800d346:	4413      	add	r3, r2
 800d348:	685b      	ldr	r3, [r3, #4]
 800d34a:	68dc      	ldr	r4, [r3, #12]
 800d34c:	7bfb      	ldrb	r3, [r7, #15]
 800d34e:	4a07      	ldr	r2, [pc, #28]	; (800d36c <disk_write+0x3c>)
 800d350:	4413      	add	r3, r2
 800d352:	7a18      	ldrb	r0, [r3, #8]
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	687a      	ldr	r2, [r7, #4]
 800d358:	68b9      	ldr	r1, [r7, #8]
 800d35a:	47a0      	blx	r4
 800d35c:	4603      	mov	r3, r0
 800d35e:	75fb      	strb	r3, [r7, #23]
  return res;
 800d360:	7dfb      	ldrb	r3, [r7, #23]
}
 800d362:	4618      	mov	r0, r3
 800d364:	371c      	adds	r7, #28
 800d366:	46bd      	mov	sp, r7
 800d368:	bd90      	pop	{r4, r7, pc}
 800d36a:	bf00      	nop
 800d36c:	20000134 	.word	0x20000134

0800d370 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b084      	sub	sp, #16
 800d374:	af00      	add	r7, sp, #0
 800d376:	4603      	mov	r3, r0
 800d378:	603a      	str	r2, [r7, #0]
 800d37a:	71fb      	strb	r3, [r7, #7]
 800d37c:	460b      	mov	r3, r1
 800d37e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d380:	79fb      	ldrb	r3, [r7, #7]
 800d382:	4a09      	ldr	r2, [pc, #36]	; (800d3a8 <disk_ioctl+0x38>)
 800d384:	009b      	lsls	r3, r3, #2
 800d386:	4413      	add	r3, r2
 800d388:	685b      	ldr	r3, [r3, #4]
 800d38a:	691b      	ldr	r3, [r3, #16]
 800d38c:	79fa      	ldrb	r2, [r7, #7]
 800d38e:	4906      	ldr	r1, [pc, #24]	; (800d3a8 <disk_ioctl+0x38>)
 800d390:	440a      	add	r2, r1
 800d392:	7a10      	ldrb	r0, [r2, #8]
 800d394:	79b9      	ldrb	r1, [r7, #6]
 800d396:	683a      	ldr	r2, [r7, #0]
 800d398:	4798      	blx	r3
 800d39a:	4603      	mov	r3, r0
 800d39c:	73fb      	strb	r3, [r7, #15]
  return res;
 800d39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3710      	adds	r7, #16
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}
 800d3a8:	20000134 	.word	0x20000134

0800d3ac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b085      	sub	sp, #20
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	781b      	ldrb	r3, [r3, #0]
 800d3ba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d3bc:	89fb      	ldrh	r3, [r7, #14]
 800d3be:	021b      	lsls	r3, r3, #8
 800d3c0:	b21a      	sxth	r2, r3
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	b21b      	sxth	r3, r3
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	b21b      	sxth	r3, r3
 800d3cc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d3ce:	89fb      	ldrh	r3, [r7, #14]
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3714      	adds	r7, #20
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bc80      	pop	{r7}
 800d3d8:	4770      	bx	lr

0800d3da <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d3da:	b480      	push	{r7}
 800d3dc:	b085      	sub	sp, #20
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	3303      	adds	r3, #3
 800d3e6:	781b      	ldrb	r3, [r3, #0]
 800d3e8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	021b      	lsls	r3, r3, #8
 800d3ee:	687a      	ldr	r2, [r7, #4]
 800d3f0:	3202      	adds	r2, #2
 800d3f2:	7812      	ldrb	r2, [r2, #0]
 800d3f4:	4313      	orrs	r3, r2
 800d3f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	021b      	lsls	r3, r3, #8
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	3201      	adds	r2, #1
 800d400:	7812      	ldrb	r2, [r2, #0]
 800d402:	4313      	orrs	r3, r2
 800d404:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	021b      	lsls	r3, r3, #8
 800d40a:	687a      	ldr	r2, [r7, #4]
 800d40c:	7812      	ldrb	r2, [r2, #0]
 800d40e:	4313      	orrs	r3, r2
 800d410:	60fb      	str	r3, [r7, #12]
	return rv;
 800d412:	68fb      	ldr	r3, [r7, #12]
}
 800d414:	4618      	mov	r0, r3
 800d416:	3714      	adds	r7, #20
 800d418:	46bd      	mov	sp, r7
 800d41a:	bc80      	pop	{r7}
 800d41c:	4770      	bx	lr

0800d41e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d41e:	b480      	push	{r7}
 800d420:	b083      	sub	sp, #12
 800d422:	af00      	add	r7, sp, #0
 800d424:	6078      	str	r0, [r7, #4]
 800d426:	460b      	mov	r3, r1
 800d428:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	1c5a      	adds	r2, r3, #1
 800d42e:	607a      	str	r2, [r7, #4]
 800d430:	887a      	ldrh	r2, [r7, #2]
 800d432:	b2d2      	uxtb	r2, r2
 800d434:	701a      	strb	r2, [r3, #0]
 800d436:	887b      	ldrh	r3, [r7, #2]
 800d438:	0a1b      	lsrs	r3, r3, #8
 800d43a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	1c5a      	adds	r2, r3, #1
 800d440:	607a      	str	r2, [r7, #4]
 800d442:	887a      	ldrh	r2, [r7, #2]
 800d444:	b2d2      	uxtb	r2, r2
 800d446:	701a      	strb	r2, [r3, #0]
}
 800d448:	bf00      	nop
 800d44a:	370c      	adds	r7, #12
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bc80      	pop	{r7}
 800d450:	4770      	bx	lr

0800d452 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d452:	b480      	push	{r7}
 800d454:	b083      	sub	sp, #12
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
 800d45a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	1c5a      	adds	r2, r3, #1
 800d460:	607a      	str	r2, [r7, #4]
 800d462:	683a      	ldr	r2, [r7, #0]
 800d464:	b2d2      	uxtb	r2, r2
 800d466:	701a      	strb	r2, [r3, #0]
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	0a1b      	lsrs	r3, r3, #8
 800d46c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	1c5a      	adds	r2, r3, #1
 800d472:	607a      	str	r2, [r7, #4]
 800d474:	683a      	ldr	r2, [r7, #0]
 800d476:	b2d2      	uxtb	r2, r2
 800d478:	701a      	strb	r2, [r3, #0]
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	0a1b      	lsrs	r3, r3, #8
 800d47e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	1c5a      	adds	r2, r3, #1
 800d484:	607a      	str	r2, [r7, #4]
 800d486:	683a      	ldr	r2, [r7, #0]
 800d488:	b2d2      	uxtb	r2, r2
 800d48a:	701a      	strb	r2, [r3, #0]
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	0a1b      	lsrs	r3, r3, #8
 800d490:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	1c5a      	adds	r2, r3, #1
 800d496:	607a      	str	r2, [r7, #4]
 800d498:	683a      	ldr	r2, [r7, #0]
 800d49a:	b2d2      	uxtb	r2, r2
 800d49c:	701a      	strb	r2, [r3, #0]
}
 800d49e:	bf00      	nop
 800d4a0:	370c      	adds	r7, #12
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bc80      	pop	{r7}
 800d4a6:	4770      	bx	lr

0800d4a8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d4a8:	b480      	push	{r7}
 800d4aa:	b087      	sub	sp, #28
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	60f8      	str	r0, [r7, #12]
 800d4b0:	60b9      	str	r1, [r7, #8]
 800d4b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d00d      	beq.n	800d4de <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d4c2:	693a      	ldr	r2, [r7, #16]
 800d4c4:	1c53      	adds	r3, r2, #1
 800d4c6:	613b      	str	r3, [r7, #16]
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	1c59      	adds	r1, r3, #1
 800d4cc:	6179      	str	r1, [r7, #20]
 800d4ce:	7812      	ldrb	r2, [r2, #0]
 800d4d0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	3b01      	subs	r3, #1
 800d4d6:	607b      	str	r3, [r7, #4]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d1f1      	bne.n	800d4c2 <mem_cpy+0x1a>
	}
}
 800d4de:	bf00      	nop
 800d4e0:	371c      	adds	r7, #28
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bc80      	pop	{r7}
 800d4e6:	4770      	bx	lr

0800d4e8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d4e8:	b480      	push	{r7}
 800d4ea:	b087      	sub	sp, #28
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	60f8      	str	r0, [r7, #12]
 800d4f0:	60b9      	str	r1, [r7, #8]
 800d4f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	1c5a      	adds	r2, r3, #1
 800d4fc:	617a      	str	r2, [r7, #20]
 800d4fe:	68ba      	ldr	r2, [r7, #8]
 800d500:	b2d2      	uxtb	r2, r2
 800d502:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	3b01      	subs	r3, #1
 800d508:	607b      	str	r3, [r7, #4]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d1f3      	bne.n	800d4f8 <mem_set+0x10>
}
 800d510:	bf00      	nop
 800d512:	bf00      	nop
 800d514:	371c      	adds	r7, #28
 800d516:	46bd      	mov	sp, r7
 800d518:	bc80      	pop	{r7}
 800d51a:	4770      	bx	lr

0800d51c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d51c:	b480      	push	{r7}
 800d51e:	b089      	sub	sp, #36	; 0x24
 800d520:	af00      	add	r7, sp, #0
 800d522:	60f8      	str	r0, [r7, #12]
 800d524:	60b9      	str	r1, [r7, #8]
 800d526:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	61fb      	str	r3, [r7, #28]
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d530:	2300      	movs	r3, #0
 800d532:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d534:	69fb      	ldr	r3, [r7, #28]
 800d536:	1c5a      	adds	r2, r3, #1
 800d538:	61fa      	str	r2, [r7, #28]
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	4619      	mov	r1, r3
 800d53e:	69bb      	ldr	r3, [r7, #24]
 800d540:	1c5a      	adds	r2, r3, #1
 800d542:	61ba      	str	r2, [r7, #24]
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	1acb      	subs	r3, r1, r3
 800d548:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	3b01      	subs	r3, #1
 800d54e:	607b      	str	r3, [r7, #4]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d002      	beq.n	800d55c <mem_cmp+0x40>
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d0eb      	beq.n	800d534 <mem_cmp+0x18>

	return r;
 800d55c:	697b      	ldr	r3, [r7, #20]
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3724      	adds	r7, #36	; 0x24
 800d562:	46bd      	mov	sp, r7
 800d564:	bc80      	pop	{r7}
 800d566:	4770      	bx	lr

0800d568 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d568:	b480      	push	{r7}
 800d56a:	b083      	sub	sp, #12
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d572:	e002      	b.n	800d57a <chk_chr+0x12>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	3301      	adds	r3, #1
 800d578:	607b      	str	r3, [r7, #4]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d005      	beq.n	800d58e <chk_chr+0x26>
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	461a      	mov	r2, r3
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d1f2      	bne.n	800d574 <chk_chr+0xc>
	return *str;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	781b      	ldrb	r3, [r3, #0]
}
 800d592:	4618      	mov	r0, r3
 800d594:	370c      	adds	r7, #12
 800d596:	46bd      	mov	sp, r7
 800d598:	bc80      	pop	{r7}
 800d59a:	4770      	bx	lr

0800d59c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b085      	sub	sp, #20
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	60bb      	str	r3, [r7, #8]
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	60fb      	str	r3, [r7, #12]
 800d5ae:	e029      	b.n	800d604 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d5b0:	4a26      	ldr	r2, [pc, #152]	; (800d64c <chk_lock+0xb0>)
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	011b      	lsls	r3, r3, #4
 800d5b6:	4413      	add	r3, r2
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d01d      	beq.n	800d5fa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d5be:	4a23      	ldr	r2, [pc, #140]	; (800d64c <chk_lock+0xb0>)
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	011b      	lsls	r3, r3, #4
 800d5c4:	4413      	add	r3, r2
 800d5c6:	681a      	ldr	r2, [r3, #0]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d116      	bne.n	800d5fe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d5d0:	4a1e      	ldr	r2, [pc, #120]	; (800d64c <chk_lock+0xb0>)
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	011b      	lsls	r3, r3, #4
 800d5d6:	4413      	add	r3, r2
 800d5d8:	3304      	adds	r3, #4
 800d5da:	681a      	ldr	r2, [r3, #0]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d10c      	bne.n	800d5fe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d5e4:	4a19      	ldr	r2, [pc, #100]	; (800d64c <chk_lock+0xb0>)
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	011b      	lsls	r3, r3, #4
 800d5ea:	4413      	add	r3, r2
 800d5ec:	3308      	adds	r3, #8
 800d5ee:	681a      	ldr	r2, [r3, #0]
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d102      	bne.n	800d5fe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d5f8:	e007      	b.n	800d60a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	3301      	adds	r3, #1
 800d602:	60fb      	str	r3, [r7, #12]
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2b01      	cmp	r3, #1
 800d608:	d9d2      	bls.n	800d5b0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2b02      	cmp	r3, #2
 800d60e:	d109      	bne.n	800d624 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d102      	bne.n	800d61c <chk_lock+0x80>
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	2b02      	cmp	r3, #2
 800d61a:	d101      	bne.n	800d620 <chk_lock+0x84>
 800d61c:	2300      	movs	r3, #0
 800d61e:	e010      	b.n	800d642 <chk_lock+0xa6>
 800d620:	2312      	movs	r3, #18
 800d622:	e00e      	b.n	800d642 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d108      	bne.n	800d63c <chk_lock+0xa0>
 800d62a:	4a08      	ldr	r2, [pc, #32]	; (800d64c <chk_lock+0xb0>)
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	011b      	lsls	r3, r3, #4
 800d630:	4413      	add	r3, r2
 800d632:	330c      	adds	r3, #12
 800d634:	881b      	ldrh	r3, [r3, #0]
 800d636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d63a:	d101      	bne.n	800d640 <chk_lock+0xa4>
 800d63c:	2310      	movs	r3, #16
 800d63e:	e000      	b.n	800d642 <chk_lock+0xa6>
 800d640:	2300      	movs	r3, #0
}
 800d642:	4618      	mov	r0, r3
 800d644:	3714      	adds	r7, #20
 800d646:	46bd      	mov	sp, r7
 800d648:	bc80      	pop	{r7}
 800d64a:	4770      	bx	lr
 800d64c:	20000114 	.word	0x20000114

0800d650 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d650:	b480      	push	{r7}
 800d652:	b083      	sub	sp, #12
 800d654:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d656:	2300      	movs	r3, #0
 800d658:	607b      	str	r3, [r7, #4]
 800d65a:	e002      	b.n	800d662 <enq_lock+0x12>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	3301      	adds	r3, #1
 800d660:	607b      	str	r3, [r7, #4]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2b01      	cmp	r3, #1
 800d666:	d806      	bhi.n	800d676 <enq_lock+0x26>
 800d668:	4a08      	ldr	r2, [pc, #32]	; (800d68c <enq_lock+0x3c>)
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	011b      	lsls	r3, r3, #4
 800d66e:	4413      	add	r3, r2
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d1f2      	bne.n	800d65c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2b02      	cmp	r3, #2
 800d67a:	bf14      	ite	ne
 800d67c:	2301      	movne	r3, #1
 800d67e:	2300      	moveq	r3, #0
 800d680:	b2db      	uxtb	r3, r3
}
 800d682:	4618      	mov	r0, r3
 800d684:	370c      	adds	r7, #12
 800d686:	46bd      	mov	sp, r7
 800d688:	bc80      	pop	{r7}
 800d68a:	4770      	bx	lr
 800d68c:	20000114 	.word	0x20000114

0800d690 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d690:	b480      	push	{r7}
 800d692:	b085      	sub	sp, #20
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d69a:	2300      	movs	r3, #0
 800d69c:	60fb      	str	r3, [r7, #12]
 800d69e:	e01f      	b.n	800d6e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d6a0:	4a41      	ldr	r2, [pc, #260]	; (800d7a8 <inc_lock+0x118>)
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	011b      	lsls	r3, r3, #4
 800d6a6:	4413      	add	r3, r2
 800d6a8:	681a      	ldr	r2, [r3, #0]
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d113      	bne.n	800d6da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d6b2:	4a3d      	ldr	r2, [pc, #244]	; (800d7a8 <inc_lock+0x118>)
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	011b      	lsls	r3, r3, #4
 800d6b8:	4413      	add	r3, r2
 800d6ba:	3304      	adds	r3, #4
 800d6bc:	681a      	ldr	r2, [r3, #0]
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d109      	bne.n	800d6da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d6c6:	4a38      	ldr	r2, [pc, #224]	; (800d7a8 <inc_lock+0x118>)
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	011b      	lsls	r3, r3, #4
 800d6cc:	4413      	add	r3, r2
 800d6ce:	3308      	adds	r3, #8
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d006      	beq.n	800d6e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	3301      	adds	r3, #1
 800d6de:	60fb      	str	r3, [r7, #12]
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	2b01      	cmp	r3, #1
 800d6e4:	d9dc      	bls.n	800d6a0 <inc_lock+0x10>
 800d6e6:	e000      	b.n	800d6ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d6e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	2b02      	cmp	r3, #2
 800d6ee:	d132      	bne.n	800d756 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	60fb      	str	r3, [r7, #12]
 800d6f4:	e002      	b.n	800d6fc <inc_lock+0x6c>
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	3301      	adds	r3, #1
 800d6fa:	60fb      	str	r3, [r7, #12]
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	2b01      	cmp	r3, #1
 800d700:	d806      	bhi.n	800d710 <inc_lock+0x80>
 800d702:	4a29      	ldr	r2, [pc, #164]	; (800d7a8 <inc_lock+0x118>)
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	011b      	lsls	r3, r3, #4
 800d708:	4413      	add	r3, r2
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d1f2      	bne.n	800d6f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2b02      	cmp	r3, #2
 800d714:	d101      	bne.n	800d71a <inc_lock+0x8a>
 800d716:	2300      	movs	r3, #0
 800d718:	e040      	b.n	800d79c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681a      	ldr	r2, [r3, #0]
 800d71e:	4922      	ldr	r1, [pc, #136]	; (800d7a8 <inc_lock+0x118>)
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	011b      	lsls	r3, r3, #4
 800d724:	440b      	add	r3, r1
 800d726:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	689a      	ldr	r2, [r3, #8]
 800d72c:	491e      	ldr	r1, [pc, #120]	; (800d7a8 <inc_lock+0x118>)
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	011b      	lsls	r3, r3, #4
 800d732:	440b      	add	r3, r1
 800d734:	3304      	adds	r3, #4
 800d736:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	695a      	ldr	r2, [r3, #20]
 800d73c:	491a      	ldr	r1, [pc, #104]	; (800d7a8 <inc_lock+0x118>)
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	011b      	lsls	r3, r3, #4
 800d742:	440b      	add	r3, r1
 800d744:	3308      	adds	r3, #8
 800d746:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d748:	4a17      	ldr	r2, [pc, #92]	; (800d7a8 <inc_lock+0x118>)
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	011b      	lsls	r3, r3, #4
 800d74e:	4413      	add	r3, r2
 800d750:	330c      	adds	r3, #12
 800d752:	2200      	movs	r2, #0
 800d754:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d009      	beq.n	800d770 <inc_lock+0xe0>
 800d75c:	4a12      	ldr	r2, [pc, #72]	; (800d7a8 <inc_lock+0x118>)
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	011b      	lsls	r3, r3, #4
 800d762:	4413      	add	r3, r2
 800d764:	330c      	adds	r3, #12
 800d766:	881b      	ldrh	r3, [r3, #0]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d001      	beq.n	800d770 <inc_lock+0xe0>
 800d76c:	2300      	movs	r3, #0
 800d76e:	e015      	b.n	800d79c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d108      	bne.n	800d788 <inc_lock+0xf8>
 800d776:	4a0c      	ldr	r2, [pc, #48]	; (800d7a8 <inc_lock+0x118>)
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	011b      	lsls	r3, r3, #4
 800d77c:	4413      	add	r3, r2
 800d77e:	330c      	adds	r3, #12
 800d780:	881b      	ldrh	r3, [r3, #0]
 800d782:	3301      	adds	r3, #1
 800d784:	b29a      	uxth	r2, r3
 800d786:	e001      	b.n	800d78c <inc_lock+0xfc>
 800d788:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d78c:	4906      	ldr	r1, [pc, #24]	; (800d7a8 <inc_lock+0x118>)
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	011b      	lsls	r3, r3, #4
 800d792:	440b      	add	r3, r1
 800d794:	330c      	adds	r3, #12
 800d796:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	3301      	adds	r3, #1
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3714      	adds	r7, #20
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bc80      	pop	{r7}
 800d7a4:	4770      	bx	lr
 800d7a6:	bf00      	nop
 800d7a8:	20000114 	.word	0x20000114

0800d7ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b085      	sub	sp, #20
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	60fb      	str	r3, [r7, #12]
 800d7b8:	e010      	b.n	800d7dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d7ba:	4a0d      	ldr	r2, [pc, #52]	; (800d7f0 <clear_lock+0x44>)
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	011b      	lsls	r3, r3, #4
 800d7c0:	4413      	add	r3, r2
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	687a      	ldr	r2, [r7, #4]
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d105      	bne.n	800d7d6 <clear_lock+0x2a>
 800d7ca:	4a09      	ldr	r2, [pc, #36]	; (800d7f0 <clear_lock+0x44>)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	011b      	lsls	r3, r3, #4
 800d7d0:	4413      	add	r3, r2
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	3301      	adds	r3, #1
 800d7da:	60fb      	str	r3, [r7, #12]
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	2b01      	cmp	r3, #1
 800d7e0:	d9eb      	bls.n	800d7ba <clear_lock+0xe>
	}
}
 800d7e2:	bf00      	nop
 800d7e4:	bf00      	nop
 800d7e6:	3714      	adds	r7, #20
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bc80      	pop	{r7}
 800d7ec:	4770      	bx	lr
 800d7ee:	bf00      	nop
 800d7f0:	20000114 	.word	0x20000114

0800d7f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b086      	sub	sp, #24
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	78db      	ldrb	r3, [r3, #3]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d034      	beq.n	800d872 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d80c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	7858      	ldrb	r0, [r3, #1]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d818:	2301      	movs	r3, #1
 800d81a:	697a      	ldr	r2, [r7, #20]
 800d81c:	f7ff fd88 	bl	800d330 <disk_write>
 800d820:	4603      	mov	r3, r0
 800d822:	2b00      	cmp	r3, #0
 800d824:	d002      	beq.n	800d82c <sync_window+0x38>
			res = FR_DISK_ERR;
 800d826:	2301      	movs	r3, #1
 800d828:	73fb      	strb	r3, [r7, #15]
 800d82a:	e022      	b.n	800d872 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2200      	movs	r2, #0
 800d830:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d836:	697a      	ldr	r2, [r7, #20]
 800d838:	1ad2      	subs	r2, r2, r3
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	69db      	ldr	r3, [r3, #28]
 800d83e:	429a      	cmp	r2, r3
 800d840:	d217      	bcs.n	800d872 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	789b      	ldrb	r3, [r3, #2]
 800d846:	613b      	str	r3, [r7, #16]
 800d848:	e010      	b.n	800d86c <sync_window+0x78>
					wsect += fs->fsize;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	69db      	ldr	r3, [r3, #28]
 800d84e:	697a      	ldr	r2, [r7, #20]
 800d850:	4413      	add	r3, r2
 800d852:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	7858      	ldrb	r0, [r3, #1]
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d85e:	2301      	movs	r3, #1
 800d860:	697a      	ldr	r2, [r7, #20]
 800d862:	f7ff fd65 	bl	800d330 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	3b01      	subs	r3, #1
 800d86a:	613b      	str	r3, [r7, #16]
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	2b01      	cmp	r3, #1
 800d870:	d8eb      	bhi.n	800d84a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d872:	7bfb      	ldrb	r3, [r7, #15]
}
 800d874:	4618      	mov	r0, r3
 800d876:	3718      	adds	r7, #24
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b084      	sub	sp, #16
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d886:	2300      	movs	r3, #0
 800d888:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d88e:	683a      	ldr	r2, [r7, #0]
 800d890:	429a      	cmp	r2, r3
 800d892:	d01b      	beq.n	800d8cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f7ff ffad 	bl	800d7f4 <sync_window>
 800d89a:	4603      	mov	r3, r0
 800d89c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d89e:	7bfb      	ldrb	r3, [r7, #15]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d113      	bne.n	800d8cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	7858      	ldrb	r0, [r3, #1]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	683a      	ldr	r2, [r7, #0]
 800d8b2:	f7ff fd1d 	bl	800d2f0 <disk_read>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d004      	beq.n	800d8c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d8bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	683a      	ldr	r2, [r7, #0]
 800d8ca:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d8cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3710      	adds	r7, #16
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}

0800d8d6 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d8d6:	b480      	push	{r7}
 800d8d8:	b083      	sub	sp, #12
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	6078      	str	r0, [r7, #4]
 800d8de:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	3b02      	subs	r3, #2
 800d8e4:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	699b      	ldr	r3, [r3, #24]
 800d8ea:	3b02      	subs	r3, #2
 800d8ec:	683a      	ldr	r2, [r7, #0]
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d301      	bcc.n	800d8f6 <clust2sect+0x20>
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	e008      	b.n	800d908 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	895b      	ldrh	r3, [r3, #10]
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	fb03 f202 	mul.w	r2, r3, r2
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d906:	4413      	add	r3, r2
}
 800d908:	4618      	mov	r0, r3
 800d90a:	370c      	adds	r7, #12
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bc80      	pop	{r7}
 800d910:	4770      	bx	lr

0800d912 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d912:	b580      	push	{r7, lr}
 800d914:	b086      	sub	sp, #24
 800d916:	af00      	add	r7, sp, #0
 800d918:	6078      	str	r0, [r7, #4]
 800d91a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	2b01      	cmp	r3, #1
 800d926:	d904      	bls.n	800d932 <get_fat+0x20>
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	699b      	ldr	r3, [r3, #24]
 800d92c:	683a      	ldr	r2, [r7, #0]
 800d92e:	429a      	cmp	r2, r3
 800d930:	d302      	bcc.n	800d938 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d932:	2301      	movs	r3, #1
 800d934:	617b      	str	r3, [r7, #20]
 800d936:	e0bb      	b.n	800dab0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d93c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	2b03      	cmp	r3, #3
 800d944:	f000 8083 	beq.w	800da4e <get_fat+0x13c>
 800d948:	2b03      	cmp	r3, #3
 800d94a:	f300 80a7 	bgt.w	800da9c <get_fat+0x18a>
 800d94e:	2b01      	cmp	r3, #1
 800d950:	d002      	beq.n	800d958 <get_fat+0x46>
 800d952:	2b02      	cmp	r3, #2
 800d954:	d056      	beq.n	800da04 <get_fat+0xf2>
 800d956:	e0a1      	b.n	800da9c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	60fb      	str	r3, [r7, #12]
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	085b      	lsrs	r3, r3, #1
 800d960:	68fa      	ldr	r2, [r7, #12]
 800d962:	4413      	add	r3, r2
 800d964:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d966:	693b      	ldr	r3, [r7, #16]
 800d968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	899b      	ldrh	r3, [r3, #12]
 800d96e:	4619      	mov	r1, r3
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	fbb3 f3f1 	udiv	r3, r3, r1
 800d976:	4413      	add	r3, r2
 800d978:	4619      	mov	r1, r3
 800d97a:	6938      	ldr	r0, [r7, #16]
 800d97c:	f7ff ff7e 	bl	800d87c <move_window>
 800d980:	4603      	mov	r3, r0
 800d982:	2b00      	cmp	r3, #0
 800d984:	f040 808d 	bne.w	800daa2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	1c5a      	adds	r2, r3, #1
 800d98c:	60fa      	str	r2, [r7, #12]
 800d98e:	693a      	ldr	r2, [r7, #16]
 800d990:	8992      	ldrh	r2, [r2, #12]
 800d992:	fbb3 f1f2 	udiv	r1, r3, r2
 800d996:	fb02 f201 	mul.w	r2, r2, r1
 800d99a:	1a9b      	subs	r3, r3, r2
 800d99c:	693a      	ldr	r2, [r7, #16]
 800d99e:	4413      	add	r3, r2
 800d9a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d9a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	899b      	ldrh	r3, [r3, #12]
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	fbb3 f3f1 	udiv	r3, r3, r1
 800d9b6:	4413      	add	r3, r2
 800d9b8:	4619      	mov	r1, r3
 800d9ba:	6938      	ldr	r0, [r7, #16]
 800d9bc:	f7ff ff5e 	bl	800d87c <move_window>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d16f      	bne.n	800daa6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d9c6:	693b      	ldr	r3, [r7, #16]
 800d9c8:	899b      	ldrh	r3, [r3, #12]
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800d9d2:	fb02 f201 	mul.w	r2, r2, r1
 800d9d6:	1a9b      	subs	r3, r3, r2
 800d9d8:	693a      	ldr	r2, [r7, #16]
 800d9da:	4413      	add	r3, r2
 800d9dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d9e0:	021b      	lsls	r3, r3, #8
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	4313      	orrs	r3, r2
 800d9e8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	f003 0301 	and.w	r3, r3, #1
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d002      	beq.n	800d9fa <get_fat+0xe8>
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	091b      	lsrs	r3, r3, #4
 800d9f8:	e002      	b.n	800da00 <get_fat+0xee>
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800da00:	617b      	str	r3, [r7, #20]
			break;
 800da02:	e055      	b.n	800dab0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	899b      	ldrh	r3, [r3, #12]
 800da0c:	085b      	lsrs	r3, r3, #1
 800da0e:	b29b      	uxth	r3, r3
 800da10:	4619      	mov	r1, r3
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	fbb3 f3f1 	udiv	r3, r3, r1
 800da18:	4413      	add	r3, r2
 800da1a:	4619      	mov	r1, r3
 800da1c:	6938      	ldr	r0, [r7, #16]
 800da1e:	f7ff ff2d 	bl	800d87c <move_window>
 800da22:	4603      	mov	r3, r0
 800da24:	2b00      	cmp	r3, #0
 800da26:	d140      	bne.n	800daaa <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800da28:	693b      	ldr	r3, [r7, #16]
 800da2a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	005b      	lsls	r3, r3, #1
 800da32:	693a      	ldr	r2, [r7, #16]
 800da34:	8992      	ldrh	r2, [r2, #12]
 800da36:	fbb3 f0f2 	udiv	r0, r3, r2
 800da3a:	fb02 f200 	mul.w	r2, r2, r0
 800da3e:	1a9b      	subs	r3, r3, r2
 800da40:	440b      	add	r3, r1
 800da42:	4618      	mov	r0, r3
 800da44:	f7ff fcb2 	bl	800d3ac <ld_word>
 800da48:	4603      	mov	r3, r0
 800da4a:	617b      	str	r3, [r7, #20]
			break;
 800da4c:	e030      	b.n	800dab0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	899b      	ldrh	r3, [r3, #12]
 800da56:	089b      	lsrs	r3, r3, #2
 800da58:	b29b      	uxth	r3, r3
 800da5a:	4619      	mov	r1, r3
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	fbb3 f3f1 	udiv	r3, r3, r1
 800da62:	4413      	add	r3, r2
 800da64:	4619      	mov	r1, r3
 800da66:	6938      	ldr	r0, [r7, #16]
 800da68:	f7ff ff08 	bl	800d87c <move_window>
 800da6c:	4603      	mov	r3, r0
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d11d      	bne.n	800daae <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	009b      	lsls	r3, r3, #2
 800da7c:	693a      	ldr	r2, [r7, #16]
 800da7e:	8992      	ldrh	r2, [r2, #12]
 800da80:	fbb3 f0f2 	udiv	r0, r3, r2
 800da84:	fb02 f200 	mul.w	r2, r2, r0
 800da88:	1a9b      	subs	r3, r3, r2
 800da8a:	440b      	add	r3, r1
 800da8c:	4618      	mov	r0, r3
 800da8e:	f7ff fca4 	bl	800d3da <ld_dword>
 800da92:	4603      	mov	r3, r0
 800da94:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800da98:	617b      	str	r3, [r7, #20]
			break;
 800da9a:	e009      	b.n	800dab0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800da9c:	2301      	movs	r3, #1
 800da9e:	617b      	str	r3, [r7, #20]
 800daa0:	e006      	b.n	800dab0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800daa2:	bf00      	nop
 800daa4:	e004      	b.n	800dab0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800daa6:	bf00      	nop
 800daa8:	e002      	b.n	800dab0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800daaa:	bf00      	nop
 800daac:	e000      	b.n	800dab0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800daae:	bf00      	nop
		}
	}

	return val;
 800dab0:	697b      	ldr	r3, [r7, #20]
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3718      	adds	r7, #24
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}

0800daba <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800daba:	b590      	push	{r4, r7, lr}
 800dabc:	b089      	sub	sp, #36	; 0x24
 800dabe:	af00      	add	r7, sp, #0
 800dac0:	60f8      	str	r0, [r7, #12]
 800dac2:	60b9      	str	r1, [r7, #8]
 800dac4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800dac6:	2302      	movs	r3, #2
 800dac8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	2b01      	cmp	r3, #1
 800dace:	f240 8102 	bls.w	800dcd6 <put_fat+0x21c>
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	699b      	ldr	r3, [r3, #24]
 800dad6:	68ba      	ldr	r2, [r7, #8]
 800dad8:	429a      	cmp	r2, r3
 800dada:	f080 80fc 	bcs.w	800dcd6 <put_fat+0x21c>
		switch (fs->fs_type) {
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	2b03      	cmp	r3, #3
 800dae4:	f000 80b6 	beq.w	800dc54 <put_fat+0x19a>
 800dae8:	2b03      	cmp	r3, #3
 800daea:	f300 80fd 	bgt.w	800dce8 <put_fat+0x22e>
 800daee:	2b01      	cmp	r3, #1
 800daf0:	d003      	beq.n	800dafa <put_fat+0x40>
 800daf2:	2b02      	cmp	r3, #2
 800daf4:	f000 8083 	beq.w	800dbfe <put_fat+0x144>
 800daf8:	e0f6      	b.n	800dce8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	61bb      	str	r3, [r7, #24]
 800dafe:	69bb      	ldr	r3, [r7, #24]
 800db00:	085b      	lsrs	r3, r3, #1
 800db02:	69ba      	ldr	r2, [r7, #24]
 800db04:	4413      	add	r3, r2
 800db06:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	899b      	ldrh	r3, [r3, #12]
 800db10:	4619      	mov	r1, r3
 800db12:	69bb      	ldr	r3, [r7, #24]
 800db14:	fbb3 f3f1 	udiv	r3, r3, r1
 800db18:	4413      	add	r3, r2
 800db1a:	4619      	mov	r1, r3
 800db1c:	68f8      	ldr	r0, [r7, #12]
 800db1e:	f7ff fead 	bl	800d87c <move_window>
 800db22:	4603      	mov	r3, r0
 800db24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800db26:	7ffb      	ldrb	r3, [r7, #31]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	f040 80d6 	bne.w	800dcda <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800db34:	69bb      	ldr	r3, [r7, #24]
 800db36:	1c5a      	adds	r2, r3, #1
 800db38:	61ba      	str	r2, [r7, #24]
 800db3a:	68fa      	ldr	r2, [r7, #12]
 800db3c:	8992      	ldrh	r2, [r2, #12]
 800db3e:	fbb3 f0f2 	udiv	r0, r3, r2
 800db42:	fb02 f200 	mul.w	r2, r2, r0
 800db46:	1a9b      	subs	r3, r3, r2
 800db48:	440b      	add	r3, r1
 800db4a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	f003 0301 	and.w	r3, r3, #1
 800db52:	2b00      	cmp	r3, #0
 800db54:	d00d      	beq.n	800db72 <put_fat+0xb8>
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	b25b      	sxtb	r3, r3
 800db5c:	f003 030f 	and.w	r3, r3, #15
 800db60:	b25a      	sxtb	r2, r3
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	b2db      	uxtb	r3, r3
 800db66:	011b      	lsls	r3, r3, #4
 800db68:	b25b      	sxtb	r3, r3
 800db6a:	4313      	orrs	r3, r2
 800db6c:	b25b      	sxtb	r3, r3
 800db6e:	b2db      	uxtb	r3, r3
 800db70:	e001      	b.n	800db76 <put_fat+0xbc>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	b2db      	uxtb	r3, r3
 800db76:	697a      	ldr	r2, [r7, #20]
 800db78:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2201      	movs	r2, #1
 800db7e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	899b      	ldrh	r3, [r3, #12]
 800db88:	4619      	mov	r1, r3
 800db8a:	69bb      	ldr	r3, [r7, #24]
 800db8c:	fbb3 f3f1 	udiv	r3, r3, r1
 800db90:	4413      	add	r3, r2
 800db92:	4619      	mov	r1, r3
 800db94:	68f8      	ldr	r0, [r7, #12]
 800db96:	f7ff fe71 	bl	800d87c <move_window>
 800db9a:	4603      	mov	r3, r0
 800db9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800db9e:	7ffb      	ldrb	r3, [r7, #31]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	f040 809c 	bne.w	800dcde <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	899b      	ldrh	r3, [r3, #12]
 800dbb0:	461a      	mov	r2, r3
 800dbb2:	69bb      	ldr	r3, [r7, #24]
 800dbb4:	fbb3 f0f2 	udiv	r0, r3, r2
 800dbb8:	fb02 f200 	mul.w	r2, r2, r0
 800dbbc:	1a9b      	subs	r3, r3, r2
 800dbbe:	440b      	add	r3, r1
 800dbc0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	f003 0301 	and.w	r3, r3, #1
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d003      	beq.n	800dbd4 <put_fat+0x11a>
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	091b      	lsrs	r3, r3, #4
 800dbd0:	b2db      	uxtb	r3, r3
 800dbd2:	e00e      	b.n	800dbf2 <put_fat+0x138>
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	b25b      	sxtb	r3, r3
 800dbda:	f023 030f 	bic.w	r3, r3, #15
 800dbde:	b25a      	sxtb	r2, r3
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	0a1b      	lsrs	r3, r3, #8
 800dbe4:	b25b      	sxtb	r3, r3
 800dbe6:	f003 030f 	and.w	r3, r3, #15
 800dbea:	b25b      	sxtb	r3, r3
 800dbec:	4313      	orrs	r3, r2
 800dbee:	b25b      	sxtb	r3, r3
 800dbf0:	b2db      	uxtb	r3, r3
 800dbf2:	697a      	ldr	r2, [r7, #20]
 800dbf4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	70da      	strb	r2, [r3, #3]
			break;
 800dbfc:	e074      	b.n	800dce8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	899b      	ldrh	r3, [r3, #12]
 800dc06:	085b      	lsrs	r3, r3, #1
 800dc08:	b29b      	uxth	r3, r3
 800dc0a:	4619      	mov	r1, r3
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc12:	4413      	add	r3, r2
 800dc14:	4619      	mov	r1, r3
 800dc16:	68f8      	ldr	r0, [r7, #12]
 800dc18:	f7ff fe30 	bl	800d87c <move_window>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dc20:	7ffb      	ldrb	r3, [r7, #31]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d15d      	bne.n	800dce2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	005b      	lsls	r3, r3, #1
 800dc30:	68fa      	ldr	r2, [r7, #12]
 800dc32:	8992      	ldrh	r2, [r2, #12]
 800dc34:	fbb3 f0f2 	udiv	r0, r3, r2
 800dc38:	fb02 f200 	mul.w	r2, r2, r0
 800dc3c:	1a9b      	subs	r3, r3, r2
 800dc3e:	440b      	add	r3, r1
 800dc40:	687a      	ldr	r2, [r7, #4]
 800dc42:	b292      	uxth	r2, r2
 800dc44:	4611      	mov	r1, r2
 800dc46:	4618      	mov	r0, r3
 800dc48:	f7ff fbe9 	bl	800d41e <st_word>
			fs->wflag = 1;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	2201      	movs	r2, #1
 800dc50:	70da      	strb	r2, [r3, #3]
			break;
 800dc52:	e049      	b.n	800dce8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	899b      	ldrh	r3, [r3, #12]
 800dc5c:	089b      	lsrs	r3, r3, #2
 800dc5e:	b29b      	uxth	r3, r3
 800dc60:	4619      	mov	r1, r3
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc68:	4413      	add	r3, r2
 800dc6a:	4619      	mov	r1, r3
 800dc6c:	68f8      	ldr	r0, [r7, #12]
 800dc6e:	f7ff fe05 	bl	800d87c <move_window>
 800dc72:	4603      	mov	r3, r0
 800dc74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dc76:	7ffb      	ldrb	r3, [r7, #31]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d134      	bne.n	800dce6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	009b      	lsls	r3, r3, #2
 800dc8c:	68fa      	ldr	r2, [r7, #12]
 800dc8e:	8992      	ldrh	r2, [r2, #12]
 800dc90:	fbb3 f0f2 	udiv	r0, r3, r2
 800dc94:	fb02 f200 	mul.w	r2, r2, r0
 800dc98:	1a9b      	subs	r3, r3, r2
 800dc9a:	440b      	add	r3, r1
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f7ff fb9c 	bl	800d3da <ld_dword>
 800dca2:	4603      	mov	r3, r0
 800dca4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800dca8:	4323      	orrs	r3, r4
 800dcaa:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	009b      	lsls	r3, r3, #2
 800dcb6:	68fa      	ldr	r2, [r7, #12]
 800dcb8:	8992      	ldrh	r2, [r2, #12]
 800dcba:	fbb3 f0f2 	udiv	r0, r3, r2
 800dcbe:	fb02 f200 	mul.w	r2, r2, r0
 800dcc2:	1a9b      	subs	r3, r3, r2
 800dcc4:	440b      	add	r3, r1
 800dcc6:	6879      	ldr	r1, [r7, #4]
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f7ff fbc2 	bl	800d452 <st_dword>
			fs->wflag = 1;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	70da      	strb	r2, [r3, #3]
			break;
 800dcd4:	e008      	b.n	800dce8 <put_fat+0x22e>
		}
	}
 800dcd6:	bf00      	nop
 800dcd8:	e006      	b.n	800dce8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800dcda:	bf00      	nop
 800dcdc:	e004      	b.n	800dce8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800dcde:	bf00      	nop
 800dce0:	e002      	b.n	800dce8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800dce2:	bf00      	nop
 800dce4:	e000      	b.n	800dce8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800dce6:	bf00      	nop
	return res;
 800dce8:	7ffb      	ldrb	r3, [r7, #31]
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3724      	adds	r7, #36	; 0x24
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd90      	pop	{r4, r7, pc}

0800dcf2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800dcf2:	b580      	push	{r7, lr}
 800dcf4:	b088      	sub	sp, #32
 800dcf6:	af00      	add	r7, sp, #0
 800dcf8:	60f8      	str	r0, [r7, #12]
 800dcfa:	60b9      	str	r1, [r7, #8]
 800dcfc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	2b01      	cmp	r3, #1
 800dd0c:	d904      	bls.n	800dd18 <remove_chain+0x26>
 800dd0e:	69bb      	ldr	r3, [r7, #24]
 800dd10:	699b      	ldr	r3, [r3, #24]
 800dd12:	68ba      	ldr	r2, [r7, #8]
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d301      	bcc.n	800dd1c <remove_chain+0x2a>
 800dd18:	2302      	movs	r3, #2
 800dd1a:	e04b      	b.n	800ddb4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d00c      	beq.n	800dd3c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800dd22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd26:	6879      	ldr	r1, [r7, #4]
 800dd28:	69b8      	ldr	r0, [r7, #24]
 800dd2a:	f7ff fec6 	bl	800daba <put_fat>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800dd32:	7ffb      	ldrb	r3, [r7, #31]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d001      	beq.n	800dd3c <remove_chain+0x4a>
 800dd38:	7ffb      	ldrb	r3, [r7, #31]
 800dd3a:	e03b      	b.n	800ddb4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800dd3c:	68b9      	ldr	r1, [r7, #8]
 800dd3e:	68f8      	ldr	r0, [r7, #12]
 800dd40:	f7ff fde7 	bl	800d912 <get_fat>
 800dd44:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d031      	beq.n	800ddb0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d101      	bne.n	800dd56 <remove_chain+0x64>
 800dd52:	2302      	movs	r3, #2
 800dd54:	e02e      	b.n	800ddb4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd5c:	d101      	bne.n	800dd62 <remove_chain+0x70>
 800dd5e:	2301      	movs	r3, #1
 800dd60:	e028      	b.n	800ddb4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800dd62:	2200      	movs	r2, #0
 800dd64:	68b9      	ldr	r1, [r7, #8]
 800dd66:	69b8      	ldr	r0, [r7, #24]
 800dd68:	f7ff fea7 	bl	800daba <put_fat>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800dd70:	7ffb      	ldrb	r3, [r7, #31]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d001      	beq.n	800dd7a <remove_chain+0x88>
 800dd76:	7ffb      	ldrb	r3, [r7, #31]
 800dd78:	e01c      	b.n	800ddb4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800dd7a:	69bb      	ldr	r3, [r7, #24]
 800dd7c:	695a      	ldr	r2, [r3, #20]
 800dd7e:	69bb      	ldr	r3, [r7, #24]
 800dd80:	699b      	ldr	r3, [r3, #24]
 800dd82:	3b02      	subs	r3, #2
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d20b      	bcs.n	800dda0 <remove_chain+0xae>
			fs->free_clst++;
 800dd88:	69bb      	ldr	r3, [r7, #24]
 800dd8a:	695b      	ldr	r3, [r3, #20]
 800dd8c:	1c5a      	adds	r2, r3, #1
 800dd8e:	69bb      	ldr	r3, [r7, #24]
 800dd90:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800dd92:	69bb      	ldr	r3, [r7, #24]
 800dd94:	791b      	ldrb	r3, [r3, #4]
 800dd96:	f043 0301 	orr.w	r3, r3, #1
 800dd9a:	b2da      	uxtb	r2, r3
 800dd9c:	69bb      	ldr	r3, [r7, #24]
 800dd9e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800dda4:	69bb      	ldr	r3, [r7, #24]
 800dda6:	699b      	ldr	r3, [r3, #24]
 800dda8:	68ba      	ldr	r2, [r7, #8]
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d3c6      	bcc.n	800dd3c <remove_chain+0x4a>
 800ddae:	e000      	b.n	800ddb2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ddb0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ddb2:	2300      	movs	r3, #0
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3720      	adds	r7, #32
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b088      	sub	sp, #32
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
 800ddc4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d10d      	bne.n	800ddee <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ddd2:	693b      	ldr	r3, [r7, #16]
 800ddd4:	691b      	ldr	r3, [r3, #16]
 800ddd6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ddd8:	69bb      	ldr	r3, [r7, #24]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d004      	beq.n	800dde8 <create_chain+0x2c>
 800ddde:	693b      	ldr	r3, [r7, #16]
 800dde0:	699b      	ldr	r3, [r3, #24]
 800dde2:	69ba      	ldr	r2, [r7, #24]
 800dde4:	429a      	cmp	r2, r3
 800dde6:	d31b      	bcc.n	800de20 <create_chain+0x64>
 800dde8:	2301      	movs	r3, #1
 800ddea:	61bb      	str	r3, [r7, #24]
 800ddec:	e018      	b.n	800de20 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ddee:	6839      	ldr	r1, [r7, #0]
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f7ff fd8e 	bl	800d912 <get_fat>
 800ddf6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2b01      	cmp	r3, #1
 800ddfc:	d801      	bhi.n	800de02 <create_chain+0x46>
 800ddfe:	2301      	movs	r3, #1
 800de00:	e070      	b.n	800dee4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de08:	d101      	bne.n	800de0e <create_chain+0x52>
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	e06a      	b.n	800dee4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800de0e:	693b      	ldr	r3, [r7, #16]
 800de10:	699b      	ldr	r3, [r3, #24]
 800de12:	68fa      	ldr	r2, [r7, #12]
 800de14:	429a      	cmp	r2, r3
 800de16:	d201      	bcs.n	800de1c <create_chain+0x60>
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	e063      	b.n	800dee4 <create_chain+0x128>
		scl = clst;
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800de20:	69bb      	ldr	r3, [r7, #24]
 800de22:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800de24:	69fb      	ldr	r3, [r7, #28]
 800de26:	3301      	adds	r3, #1
 800de28:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	699b      	ldr	r3, [r3, #24]
 800de2e:	69fa      	ldr	r2, [r7, #28]
 800de30:	429a      	cmp	r2, r3
 800de32:	d307      	bcc.n	800de44 <create_chain+0x88>
				ncl = 2;
 800de34:	2302      	movs	r3, #2
 800de36:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800de38:	69fa      	ldr	r2, [r7, #28]
 800de3a:	69bb      	ldr	r3, [r7, #24]
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d901      	bls.n	800de44 <create_chain+0x88>
 800de40:	2300      	movs	r3, #0
 800de42:	e04f      	b.n	800dee4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800de44:	69f9      	ldr	r1, [r7, #28]
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f7ff fd63 	bl	800d912 <get_fat>
 800de4c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d00e      	beq.n	800de72 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2b01      	cmp	r3, #1
 800de58:	d003      	beq.n	800de62 <create_chain+0xa6>
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de60:	d101      	bne.n	800de66 <create_chain+0xaa>
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	e03e      	b.n	800dee4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800de66:	69fa      	ldr	r2, [r7, #28]
 800de68:	69bb      	ldr	r3, [r7, #24]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d1da      	bne.n	800de24 <create_chain+0x68>
 800de6e:	2300      	movs	r3, #0
 800de70:	e038      	b.n	800dee4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800de72:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800de74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de78:	69f9      	ldr	r1, [r7, #28]
 800de7a:	6938      	ldr	r0, [r7, #16]
 800de7c:	f7ff fe1d 	bl	800daba <put_fat>
 800de80:	4603      	mov	r3, r0
 800de82:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800de84:	7dfb      	ldrb	r3, [r7, #23]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d109      	bne.n	800de9e <create_chain+0xe2>
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d006      	beq.n	800de9e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800de90:	69fa      	ldr	r2, [r7, #28]
 800de92:	6839      	ldr	r1, [r7, #0]
 800de94:	6938      	ldr	r0, [r7, #16]
 800de96:	f7ff fe10 	bl	800daba <put_fat>
 800de9a:	4603      	mov	r3, r0
 800de9c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800de9e:	7dfb      	ldrb	r3, [r7, #23]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d116      	bne.n	800ded2 <create_chain+0x116>
		fs->last_clst = ncl;
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	69fa      	ldr	r2, [r7, #28]
 800dea8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800deaa:	693b      	ldr	r3, [r7, #16]
 800deac:	695a      	ldr	r2, [r3, #20]
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	699b      	ldr	r3, [r3, #24]
 800deb2:	3b02      	subs	r3, #2
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d804      	bhi.n	800dec2 <create_chain+0x106>
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	695b      	ldr	r3, [r3, #20]
 800debc:	1e5a      	subs	r2, r3, #1
 800debe:	693b      	ldr	r3, [r7, #16]
 800dec0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	791b      	ldrb	r3, [r3, #4]
 800dec6:	f043 0301 	orr.w	r3, r3, #1
 800deca:	b2da      	uxtb	r2, r3
 800decc:	693b      	ldr	r3, [r7, #16]
 800dece:	711a      	strb	r2, [r3, #4]
 800ded0:	e007      	b.n	800dee2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ded2:	7dfb      	ldrb	r3, [r7, #23]
 800ded4:	2b01      	cmp	r3, #1
 800ded6:	d102      	bne.n	800dede <create_chain+0x122>
 800ded8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dedc:	e000      	b.n	800dee0 <create_chain+0x124>
 800dede:	2301      	movs	r3, #1
 800dee0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800dee2:	69fb      	ldr	r3, [r7, #28]
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3720      	adds	r7, #32
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800deec:	b480      	push	{r7}
 800deee:	b087      	sub	sp, #28
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df00:	3304      	adds	r3, #4
 800df02:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	899b      	ldrh	r3, [r3, #12]
 800df08:	461a      	mov	r2, r3
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800df10:	68fa      	ldr	r2, [r7, #12]
 800df12:	8952      	ldrh	r2, [r2, #10]
 800df14:	fbb3 f3f2 	udiv	r3, r3, r2
 800df18:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	1d1a      	adds	r2, r3, #4
 800df1e:	613a      	str	r2, [r7, #16]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d101      	bne.n	800df2e <clmt_clust+0x42>
 800df2a:	2300      	movs	r3, #0
 800df2c:	e010      	b.n	800df50 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800df2e:	697a      	ldr	r2, [r7, #20]
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	429a      	cmp	r2, r3
 800df34:	d307      	bcc.n	800df46 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800df36:	697a      	ldr	r2, [r7, #20]
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	1ad3      	subs	r3, r2, r3
 800df3c:	617b      	str	r3, [r7, #20]
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	3304      	adds	r3, #4
 800df42:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800df44:	e7e9      	b.n	800df1a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800df46:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800df48:	693b      	ldr	r3, [r7, #16]
 800df4a:	681a      	ldr	r2, [r3, #0]
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	4413      	add	r3, r2
}
 800df50:	4618      	mov	r0, r3
 800df52:	371c      	adds	r7, #28
 800df54:	46bd      	mov	sp, r7
 800df56:	bc80      	pop	{r7}
 800df58:	4770      	bx	lr

0800df5a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800df5a:	b580      	push	{r7, lr}
 800df5c:	b086      	sub	sp, #24
 800df5e:	af00      	add	r7, sp, #0
 800df60:	6078      	str	r0, [r7, #4]
 800df62:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800df70:	d204      	bcs.n	800df7c <dir_sdi+0x22>
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	f003 031f 	and.w	r3, r3, #31
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d001      	beq.n	800df80 <dir_sdi+0x26>
		return FR_INT_ERR;
 800df7c:	2302      	movs	r3, #2
 800df7e:	e071      	b.n	800e064 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	683a      	ldr	r2, [r7, #0]
 800df84:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	689b      	ldr	r3, [r3, #8]
 800df8a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d106      	bne.n	800dfa0 <dir_sdi+0x46>
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	2b02      	cmp	r3, #2
 800df98:	d902      	bls.n	800dfa0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df9e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d10c      	bne.n	800dfc0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	095b      	lsrs	r3, r3, #5
 800dfaa:	693a      	ldr	r2, [r7, #16]
 800dfac:	8912      	ldrh	r2, [r2, #8]
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	d301      	bcc.n	800dfb6 <dir_sdi+0x5c>
 800dfb2:	2302      	movs	r3, #2
 800dfb4:	e056      	b.n	800e064 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800dfb6:	693b      	ldr	r3, [r7, #16]
 800dfb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	61da      	str	r2, [r3, #28]
 800dfbe:	e02d      	b.n	800e01c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	895b      	ldrh	r3, [r3, #10]
 800dfc4:	461a      	mov	r2, r3
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	899b      	ldrh	r3, [r3, #12]
 800dfca:	fb03 f302 	mul.w	r3, r3, r2
 800dfce:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dfd0:	e019      	b.n	800e006 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6979      	ldr	r1, [r7, #20]
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f7ff fc9b 	bl	800d912 <get_fat>
 800dfdc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfe4:	d101      	bne.n	800dfea <dir_sdi+0x90>
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	e03c      	b.n	800e064 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	2b01      	cmp	r3, #1
 800dfee:	d904      	bls.n	800dffa <dir_sdi+0xa0>
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	699b      	ldr	r3, [r3, #24]
 800dff4:	697a      	ldr	r2, [r7, #20]
 800dff6:	429a      	cmp	r2, r3
 800dff8:	d301      	bcc.n	800dffe <dir_sdi+0xa4>
 800dffa:	2302      	movs	r3, #2
 800dffc:	e032      	b.n	800e064 <dir_sdi+0x10a>
			ofs -= csz;
 800dffe:	683a      	ldr	r2, [r7, #0]
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	1ad3      	subs	r3, r2, r3
 800e004:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e006:	683a      	ldr	r2, [r7, #0]
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d2e1      	bcs.n	800dfd2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e00e:	6979      	ldr	r1, [r7, #20]
 800e010:	6938      	ldr	r0, [r7, #16]
 800e012:	f7ff fc60 	bl	800d8d6 <clust2sect>
 800e016:	4602      	mov	r2, r0
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	697a      	ldr	r2, [r7, #20]
 800e020:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	69db      	ldr	r3, [r3, #28]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d101      	bne.n	800e02e <dir_sdi+0xd4>
 800e02a:	2302      	movs	r3, #2
 800e02c:	e01a      	b.n	800e064 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	69da      	ldr	r2, [r3, #28]
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	899b      	ldrh	r3, [r3, #12]
 800e036:	4619      	mov	r1, r3
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e03e:	441a      	add	r2, r3
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	899b      	ldrh	r3, [r3, #12]
 800e04e:	461a      	mov	r2, r3
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	fbb3 f0f2 	udiv	r0, r3, r2
 800e056:	fb02 f200 	mul.w	r2, r2, r0
 800e05a:	1a9b      	subs	r3, r3, r2
 800e05c:	18ca      	adds	r2, r1, r3
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e062:	2300      	movs	r3, #0
}
 800e064:	4618      	mov	r0, r3
 800e066:	3718      	adds	r7, #24
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}

0800e06c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b086      	sub	sp, #24
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	695b      	ldr	r3, [r3, #20]
 800e080:	3320      	adds	r3, #32
 800e082:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	69db      	ldr	r3, [r3, #28]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d003      	beq.n	800e094 <dir_next+0x28>
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e092:	d301      	bcc.n	800e098 <dir_next+0x2c>
 800e094:	2304      	movs	r3, #4
 800e096:	e0bb      	b.n	800e210 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	899b      	ldrh	r3, [r3, #12]
 800e09c:	461a      	mov	r2, r3
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800e0a4:	fb02 f201 	mul.w	r2, r2, r1
 800e0a8:	1a9b      	subs	r3, r3, r2
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	f040 809d 	bne.w	800e1ea <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	69db      	ldr	r3, [r3, #28]
 800e0b4:	1c5a      	adds	r2, r3, #1
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	699b      	ldr	r3, [r3, #24]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d10b      	bne.n	800e0da <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	095b      	lsrs	r3, r3, #5
 800e0c6:	68fa      	ldr	r2, [r7, #12]
 800e0c8:	8912      	ldrh	r2, [r2, #8]
 800e0ca:	4293      	cmp	r3, r2
 800e0cc:	f0c0 808d 	bcc.w	800e1ea <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	61da      	str	r2, [r3, #28]
 800e0d6:	2304      	movs	r3, #4
 800e0d8:	e09a      	b.n	800e210 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	899b      	ldrh	r3, [r3, #12]
 800e0de:	461a      	mov	r2, r3
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0e6:	68fa      	ldr	r2, [r7, #12]
 800e0e8:	8952      	ldrh	r2, [r2, #10]
 800e0ea:	3a01      	subs	r2, #1
 800e0ec:	4013      	ands	r3, r2
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d17b      	bne.n	800e1ea <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e0f2:	687a      	ldr	r2, [r7, #4]
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	699b      	ldr	r3, [r3, #24]
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	4610      	mov	r0, r2
 800e0fc:	f7ff fc09 	bl	800d912 <get_fat>
 800e100:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	2b01      	cmp	r3, #1
 800e106:	d801      	bhi.n	800e10c <dir_next+0xa0>
 800e108:	2302      	movs	r3, #2
 800e10a:	e081      	b.n	800e210 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e112:	d101      	bne.n	800e118 <dir_next+0xac>
 800e114:	2301      	movs	r3, #1
 800e116:	e07b      	b.n	800e210 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	699b      	ldr	r3, [r3, #24]
 800e11c:	697a      	ldr	r2, [r7, #20]
 800e11e:	429a      	cmp	r2, r3
 800e120:	d359      	bcc.n	800e1d6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d104      	bne.n	800e132 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2200      	movs	r2, #0
 800e12c:	61da      	str	r2, [r3, #28]
 800e12e:	2304      	movs	r3, #4
 800e130:	e06e      	b.n	800e210 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e132:	687a      	ldr	r2, [r7, #4]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	699b      	ldr	r3, [r3, #24]
 800e138:	4619      	mov	r1, r3
 800e13a:	4610      	mov	r0, r2
 800e13c:	f7ff fe3e 	bl	800ddbc <create_chain>
 800e140:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d101      	bne.n	800e14c <dir_next+0xe0>
 800e148:	2307      	movs	r3, #7
 800e14a:	e061      	b.n	800e210 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	2b01      	cmp	r3, #1
 800e150:	d101      	bne.n	800e156 <dir_next+0xea>
 800e152:	2302      	movs	r3, #2
 800e154:	e05c      	b.n	800e210 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e15c:	d101      	bne.n	800e162 <dir_next+0xf6>
 800e15e:	2301      	movs	r3, #1
 800e160:	e056      	b.n	800e210 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e162:	68f8      	ldr	r0, [r7, #12]
 800e164:	f7ff fb46 	bl	800d7f4 <sync_window>
 800e168:	4603      	mov	r3, r0
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d001      	beq.n	800e172 <dir_next+0x106>
 800e16e:	2301      	movs	r3, #1
 800e170:	e04e      	b.n	800e210 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	899b      	ldrh	r3, [r3, #12]
 800e17c:	461a      	mov	r2, r3
 800e17e:	2100      	movs	r1, #0
 800e180:	f7ff f9b2 	bl	800d4e8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e184:	2300      	movs	r3, #0
 800e186:	613b      	str	r3, [r7, #16]
 800e188:	6979      	ldr	r1, [r7, #20]
 800e18a:	68f8      	ldr	r0, [r7, #12]
 800e18c:	f7ff fba3 	bl	800d8d6 <clust2sect>
 800e190:	4602      	mov	r2, r0
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	631a      	str	r2, [r3, #48]	; 0x30
 800e196:	e012      	b.n	800e1be <dir_next+0x152>
						fs->wflag = 1;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	2201      	movs	r2, #1
 800e19c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e19e:	68f8      	ldr	r0, [r7, #12]
 800e1a0:	f7ff fb28 	bl	800d7f4 <sync_window>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d001      	beq.n	800e1ae <dir_next+0x142>
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	e030      	b.n	800e210 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e1ae:	693b      	ldr	r3, [r7, #16]
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	613b      	str	r3, [r7, #16]
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1b8:	1c5a      	adds	r2, r3, #1
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	631a      	str	r2, [r3, #48]	; 0x30
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	895b      	ldrh	r3, [r3, #10]
 800e1c2:	461a      	mov	r2, r3
 800e1c4:	693b      	ldr	r3, [r7, #16]
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	d3e6      	bcc.n	800e198 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	1ad2      	subs	r2, r2, r3
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	697a      	ldr	r2, [r7, #20]
 800e1da:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e1dc:	6979      	ldr	r1, [r7, #20]
 800e1de:	68f8      	ldr	r0, [r7, #12]
 800e1e0:	f7ff fb79 	bl	800d8d6 <clust2sect>
 800e1e4:	4602      	mov	r2, r0
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	68ba      	ldr	r2, [r7, #8]
 800e1ee:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	899b      	ldrh	r3, [r3, #12]
 800e1fa:	461a      	mov	r2, r3
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	fbb3 f0f2 	udiv	r0, r3, r2
 800e202:	fb02 f200 	mul.w	r2, r2, r0
 800e206:	1a9b      	subs	r3, r3, r2
 800e208:	18ca      	adds	r2, r1, r3
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e20e:	2300      	movs	r3, #0
}
 800e210:	4618      	mov	r0, r3
 800e212:	3718      	adds	r7, #24
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}

0800e218 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b086      	sub	sp, #24
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e228:	2100      	movs	r1, #0
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f7ff fe95 	bl	800df5a <dir_sdi>
 800e230:	4603      	mov	r3, r0
 800e232:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e234:	7dfb      	ldrb	r3, [r7, #23]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d12b      	bne.n	800e292 <dir_alloc+0x7a>
		n = 0;
 800e23a:	2300      	movs	r3, #0
 800e23c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	69db      	ldr	r3, [r3, #28]
 800e242:	4619      	mov	r1, r3
 800e244:	68f8      	ldr	r0, [r7, #12]
 800e246:	f7ff fb19 	bl	800d87c <move_window>
 800e24a:	4603      	mov	r3, r0
 800e24c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e24e:	7dfb      	ldrb	r3, [r7, #23]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d11d      	bne.n	800e290 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6a1b      	ldr	r3, [r3, #32]
 800e258:	781b      	ldrb	r3, [r3, #0]
 800e25a:	2be5      	cmp	r3, #229	; 0xe5
 800e25c:	d004      	beq.n	800e268 <dir_alloc+0x50>
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6a1b      	ldr	r3, [r3, #32]
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d107      	bne.n	800e278 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	3301      	adds	r3, #1
 800e26c:	613b      	str	r3, [r7, #16]
 800e26e:	693a      	ldr	r2, [r7, #16]
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	429a      	cmp	r2, r3
 800e274:	d102      	bne.n	800e27c <dir_alloc+0x64>
 800e276:	e00c      	b.n	800e292 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e278:	2300      	movs	r3, #0
 800e27a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e27c:	2101      	movs	r1, #1
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f7ff fef4 	bl	800e06c <dir_next>
 800e284:	4603      	mov	r3, r0
 800e286:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e288:	7dfb      	ldrb	r3, [r7, #23]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d0d7      	beq.n	800e23e <dir_alloc+0x26>
 800e28e:	e000      	b.n	800e292 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e290:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e292:	7dfb      	ldrb	r3, [r7, #23]
 800e294:	2b04      	cmp	r3, #4
 800e296:	d101      	bne.n	800e29c <dir_alloc+0x84>
 800e298:	2307      	movs	r3, #7
 800e29a:	75fb      	strb	r3, [r7, #23]
	return res;
 800e29c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3718      	adds	r7, #24
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}

0800e2a6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e2a6:	b580      	push	{r7, lr}
 800e2a8:	b084      	sub	sp, #16
 800e2aa:	af00      	add	r7, sp, #0
 800e2ac:	6078      	str	r0, [r7, #4]
 800e2ae:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	331a      	adds	r3, #26
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f7ff f879 	bl	800d3ac <ld_word>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	2b03      	cmp	r3, #3
 800e2c4:	d109      	bne.n	800e2da <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	3314      	adds	r3, #20
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f7ff f86e 	bl	800d3ac <ld_word>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	041b      	lsls	r3, r3, #16
 800e2d4:	68fa      	ldr	r2, [r7, #12]
 800e2d6:	4313      	orrs	r3, r2
 800e2d8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e2da:	68fb      	ldr	r3, [r7, #12]
}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3710      	adds	r7, #16
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}

0800e2e4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b084      	sub	sp, #16
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	60f8      	str	r0, [r7, #12]
 800e2ec:	60b9      	str	r1, [r7, #8]
 800e2ee:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	331a      	adds	r3, #26
 800e2f4:	687a      	ldr	r2, [r7, #4]
 800e2f6:	b292      	uxth	r2, r2
 800e2f8:	4611      	mov	r1, r2
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f7ff f88f 	bl	800d41e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	2b03      	cmp	r3, #3
 800e306:	d109      	bne.n	800e31c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	f103 0214 	add.w	r2, r3, #20
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	0c1b      	lsrs	r3, r3, #16
 800e312:	b29b      	uxth	r3, r3
 800e314:	4619      	mov	r1, r3
 800e316:	4610      	mov	r0, r2
 800e318:	f7ff f881 	bl	800d41e <st_word>
	}
}
 800e31c:	bf00      	nop
 800e31e:	3710      	adds	r7, #16
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}

0800e324 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b086      	sub	sp, #24
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e332:	2100      	movs	r1, #0
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f7ff fe10 	bl	800df5a <dir_sdi>
 800e33a:	4603      	mov	r3, r0
 800e33c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e33e:	7dfb      	ldrb	r3, [r7, #23]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d001      	beq.n	800e348 <dir_find+0x24>
 800e344:	7dfb      	ldrb	r3, [r7, #23]
 800e346:	e03e      	b.n	800e3c6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	69db      	ldr	r3, [r3, #28]
 800e34c:	4619      	mov	r1, r3
 800e34e:	6938      	ldr	r0, [r7, #16]
 800e350:	f7ff fa94 	bl	800d87c <move_window>
 800e354:	4603      	mov	r3, r0
 800e356:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e358:	7dfb      	ldrb	r3, [r7, #23]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d12f      	bne.n	800e3be <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6a1b      	ldr	r3, [r3, #32]
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e366:	7bfb      	ldrb	r3, [r7, #15]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d102      	bne.n	800e372 <dir_find+0x4e>
 800e36c:	2304      	movs	r3, #4
 800e36e:	75fb      	strb	r3, [r7, #23]
 800e370:	e028      	b.n	800e3c4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6a1b      	ldr	r3, [r3, #32]
 800e376:	330b      	adds	r3, #11
 800e378:	781b      	ldrb	r3, [r3, #0]
 800e37a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e37e:	b2da      	uxtb	r2, r3
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	6a1b      	ldr	r3, [r3, #32]
 800e388:	330b      	adds	r3, #11
 800e38a:	781b      	ldrb	r3, [r3, #0]
 800e38c:	f003 0308 	and.w	r3, r3, #8
 800e390:	2b00      	cmp	r3, #0
 800e392:	d10a      	bne.n	800e3aa <dir_find+0x86>
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6a18      	ldr	r0, [r3, #32]
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	3324      	adds	r3, #36	; 0x24
 800e39c:	220b      	movs	r2, #11
 800e39e:	4619      	mov	r1, r3
 800e3a0:	f7ff f8bc 	bl	800d51c <mem_cmp>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d00b      	beq.n	800e3c2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e3aa:	2100      	movs	r1, #0
 800e3ac:	6878      	ldr	r0, [r7, #4]
 800e3ae:	f7ff fe5d 	bl	800e06c <dir_next>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e3b6:	7dfb      	ldrb	r3, [r7, #23]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d0c5      	beq.n	800e348 <dir_find+0x24>
 800e3bc:	e002      	b.n	800e3c4 <dir_find+0xa0>
		if (res != FR_OK) break;
 800e3be:	bf00      	nop
 800e3c0:	e000      	b.n	800e3c4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e3c2:	bf00      	nop

	return res;
 800e3c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3718      	adds	r7, #24
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}

0800e3ce <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e3ce:	b580      	push	{r7, lr}
 800e3d0:	b084      	sub	sp, #16
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e3dc:	2101      	movs	r1, #1
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	f7ff ff1a 	bl	800e218 <dir_alloc>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e3e8:	7bfb      	ldrb	r3, [r7, #15]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d11c      	bne.n	800e428 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	69db      	ldr	r3, [r3, #28]
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	68b8      	ldr	r0, [r7, #8]
 800e3f6:	f7ff fa41 	bl	800d87c <move_window>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e3fe:	7bfb      	ldrb	r3, [r7, #15]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d111      	bne.n	800e428 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6a1b      	ldr	r3, [r3, #32]
 800e408:	2220      	movs	r2, #32
 800e40a:	2100      	movs	r1, #0
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7ff f86b 	bl	800d4e8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6a18      	ldr	r0, [r3, #32]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	3324      	adds	r3, #36	; 0x24
 800e41a:	220b      	movs	r2, #11
 800e41c:	4619      	mov	r1, r3
 800e41e:	f7ff f843 	bl	800d4a8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	2201      	movs	r2, #1
 800e426:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e428:	7bfb      	ldrb	r3, [r7, #15]
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3710      	adds	r7, #16
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
	...

0800e434 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b088      	sub	sp, #32
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
 800e43c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	60fb      	str	r3, [r7, #12]
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	3324      	adds	r3, #36	; 0x24
 800e448:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e44a:	220b      	movs	r2, #11
 800e44c:	2120      	movs	r1, #32
 800e44e:	68b8      	ldr	r0, [r7, #8]
 800e450:	f7ff f84a 	bl	800d4e8 <mem_set>
	si = i = 0; ni = 8;
 800e454:	2300      	movs	r3, #0
 800e456:	613b      	str	r3, [r7, #16]
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	61fb      	str	r3, [r7, #28]
 800e45c:	2308      	movs	r3, #8
 800e45e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e460:	69fb      	ldr	r3, [r7, #28]
 800e462:	1c5a      	adds	r2, r3, #1
 800e464:	61fa      	str	r2, [r7, #28]
 800e466:	68fa      	ldr	r2, [r7, #12]
 800e468:	4413      	add	r3, r2
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e46e:	7efb      	ldrb	r3, [r7, #27]
 800e470:	2b20      	cmp	r3, #32
 800e472:	d94e      	bls.n	800e512 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e474:	7efb      	ldrb	r3, [r7, #27]
 800e476:	2b2f      	cmp	r3, #47	; 0x2f
 800e478:	d006      	beq.n	800e488 <create_name+0x54>
 800e47a:	7efb      	ldrb	r3, [r7, #27]
 800e47c:	2b5c      	cmp	r3, #92	; 0x5c
 800e47e:	d110      	bne.n	800e4a2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e480:	e002      	b.n	800e488 <create_name+0x54>
 800e482:	69fb      	ldr	r3, [r7, #28]
 800e484:	3301      	adds	r3, #1
 800e486:	61fb      	str	r3, [r7, #28]
 800e488:	68fa      	ldr	r2, [r7, #12]
 800e48a:	69fb      	ldr	r3, [r7, #28]
 800e48c:	4413      	add	r3, r2
 800e48e:	781b      	ldrb	r3, [r3, #0]
 800e490:	2b2f      	cmp	r3, #47	; 0x2f
 800e492:	d0f6      	beq.n	800e482 <create_name+0x4e>
 800e494:	68fa      	ldr	r2, [r7, #12]
 800e496:	69fb      	ldr	r3, [r7, #28]
 800e498:	4413      	add	r3, r2
 800e49a:	781b      	ldrb	r3, [r3, #0]
 800e49c:	2b5c      	cmp	r3, #92	; 0x5c
 800e49e:	d0f0      	beq.n	800e482 <create_name+0x4e>
			break;
 800e4a0:	e038      	b.n	800e514 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e4a2:	7efb      	ldrb	r3, [r7, #27]
 800e4a4:	2b2e      	cmp	r3, #46	; 0x2e
 800e4a6:	d003      	beq.n	800e4b0 <create_name+0x7c>
 800e4a8:	693a      	ldr	r2, [r7, #16]
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	d30c      	bcc.n	800e4ca <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e4b0:	697b      	ldr	r3, [r7, #20]
 800e4b2:	2b0b      	cmp	r3, #11
 800e4b4:	d002      	beq.n	800e4bc <create_name+0x88>
 800e4b6:	7efb      	ldrb	r3, [r7, #27]
 800e4b8:	2b2e      	cmp	r3, #46	; 0x2e
 800e4ba:	d001      	beq.n	800e4c0 <create_name+0x8c>
 800e4bc:	2306      	movs	r3, #6
 800e4be:	e044      	b.n	800e54a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e4c0:	2308      	movs	r3, #8
 800e4c2:	613b      	str	r3, [r7, #16]
 800e4c4:	230b      	movs	r3, #11
 800e4c6:	617b      	str	r3, [r7, #20]
			continue;
 800e4c8:	e022      	b.n	800e510 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e4ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	da04      	bge.n	800e4dc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e4d2:	7efb      	ldrb	r3, [r7, #27]
 800e4d4:	3b80      	subs	r3, #128	; 0x80
 800e4d6:	4a1f      	ldr	r2, [pc, #124]	; (800e554 <create_name+0x120>)
 800e4d8:	5cd3      	ldrb	r3, [r2, r3]
 800e4da:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e4dc:	7efb      	ldrb	r3, [r7, #27]
 800e4de:	4619      	mov	r1, r3
 800e4e0:	481d      	ldr	r0, [pc, #116]	; (800e558 <create_name+0x124>)
 800e4e2:	f7ff f841 	bl	800d568 <chk_chr>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d001      	beq.n	800e4f0 <create_name+0xbc>
 800e4ec:	2306      	movs	r3, #6
 800e4ee:	e02c      	b.n	800e54a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e4f0:	7efb      	ldrb	r3, [r7, #27]
 800e4f2:	2b60      	cmp	r3, #96	; 0x60
 800e4f4:	d905      	bls.n	800e502 <create_name+0xce>
 800e4f6:	7efb      	ldrb	r3, [r7, #27]
 800e4f8:	2b7a      	cmp	r3, #122	; 0x7a
 800e4fa:	d802      	bhi.n	800e502 <create_name+0xce>
 800e4fc:	7efb      	ldrb	r3, [r7, #27]
 800e4fe:	3b20      	subs	r3, #32
 800e500:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	1c5a      	adds	r2, r3, #1
 800e506:	613a      	str	r2, [r7, #16]
 800e508:	68ba      	ldr	r2, [r7, #8]
 800e50a:	4413      	add	r3, r2
 800e50c:	7efa      	ldrb	r2, [r7, #27]
 800e50e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e510:	e7a6      	b.n	800e460 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e512:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800e514:	68fa      	ldr	r2, [r7, #12]
 800e516:	69fb      	ldr	r3, [r7, #28]
 800e518:	441a      	add	r2, r3
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e51e:	693b      	ldr	r3, [r7, #16]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d101      	bne.n	800e528 <create_name+0xf4>
 800e524:	2306      	movs	r3, #6
 800e526:	e010      	b.n	800e54a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	781b      	ldrb	r3, [r3, #0]
 800e52c:	2be5      	cmp	r3, #229	; 0xe5
 800e52e:	d102      	bne.n	800e536 <create_name+0x102>
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	2205      	movs	r2, #5
 800e534:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e536:	7efb      	ldrb	r3, [r7, #27]
 800e538:	2b20      	cmp	r3, #32
 800e53a:	d801      	bhi.n	800e540 <create_name+0x10c>
 800e53c:	2204      	movs	r2, #4
 800e53e:	e000      	b.n	800e542 <create_name+0x10e>
 800e540:	2200      	movs	r2, #0
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	330b      	adds	r3, #11
 800e546:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e548:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3720      	adds	r7, #32
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}
 800e552:	bf00      	nop
 800e554:	08010204 	.word	0x08010204
 800e558:	0801018c 	.word	0x0801018c

0800e55c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b086      	sub	sp, #24
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
 800e564:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e56a:	693b      	ldr	r3, [r7, #16]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e570:	e002      	b.n	800e578 <follow_path+0x1c>
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	3301      	adds	r3, #1
 800e576:	603b      	str	r3, [r7, #0]
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	781b      	ldrb	r3, [r3, #0]
 800e57c:	2b2f      	cmp	r3, #47	; 0x2f
 800e57e:	d0f8      	beq.n	800e572 <follow_path+0x16>
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	781b      	ldrb	r3, [r3, #0]
 800e584:	2b5c      	cmp	r3, #92	; 0x5c
 800e586:	d0f4      	beq.n	800e572 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	2200      	movs	r2, #0
 800e58c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	781b      	ldrb	r3, [r3, #0]
 800e592:	2b1f      	cmp	r3, #31
 800e594:	d80a      	bhi.n	800e5ac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2280      	movs	r2, #128	; 0x80
 800e59a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e59e:	2100      	movs	r1, #0
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f7ff fcda 	bl	800df5a <dir_sdi>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	75fb      	strb	r3, [r7, #23]
 800e5aa:	e048      	b.n	800e63e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e5ac:	463b      	mov	r3, r7
 800e5ae:	4619      	mov	r1, r3
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f7ff ff3f 	bl	800e434 <create_name>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e5ba:	7dfb      	ldrb	r3, [r7, #23]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d139      	bne.n	800e634 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f7ff feaf 	bl	800e324 <dir_find>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e5d0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e5d2:	7dfb      	ldrb	r3, [r7, #23]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d00a      	beq.n	800e5ee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e5d8:	7dfb      	ldrb	r3, [r7, #23]
 800e5da:	2b04      	cmp	r3, #4
 800e5dc:	d12c      	bne.n	800e638 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e5de:	7afb      	ldrb	r3, [r7, #11]
 800e5e0:	f003 0304 	and.w	r3, r3, #4
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d127      	bne.n	800e638 <follow_path+0xdc>
 800e5e8:	2305      	movs	r3, #5
 800e5ea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e5ec:	e024      	b.n	800e638 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e5ee:	7afb      	ldrb	r3, [r7, #11]
 800e5f0:	f003 0304 	and.w	r3, r3, #4
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d121      	bne.n	800e63c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	799b      	ldrb	r3, [r3, #6]
 800e5fc:	f003 0310 	and.w	r3, r3, #16
 800e600:	2b00      	cmp	r3, #0
 800e602:	d102      	bne.n	800e60a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e604:	2305      	movs	r3, #5
 800e606:	75fb      	strb	r3, [r7, #23]
 800e608:	e019      	b.n	800e63e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	695b      	ldr	r3, [r3, #20]
 800e614:	68fa      	ldr	r2, [r7, #12]
 800e616:	8992      	ldrh	r2, [r2, #12]
 800e618:	fbb3 f0f2 	udiv	r0, r3, r2
 800e61c:	fb02 f200 	mul.w	r2, r2, r0
 800e620:	1a9b      	subs	r3, r3, r2
 800e622:	440b      	add	r3, r1
 800e624:	4619      	mov	r1, r3
 800e626:	68f8      	ldr	r0, [r7, #12]
 800e628:	f7ff fe3d 	bl	800e2a6 <ld_clust>
 800e62c:	4602      	mov	r2, r0
 800e62e:	693b      	ldr	r3, [r7, #16]
 800e630:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e632:	e7bb      	b.n	800e5ac <follow_path+0x50>
			if (res != FR_OK) break;
 800e634:	bf00      	nop
 800e636:	e002      	b.n	800e63e <follow_path+0xe2>
				break;
 800e638:	bf00      	nop
 800e63a:	e000      	b.n	800e63e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e63c:	bf00      	nop
			}
		}
	}

	return res;
 800e63e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e640:	4618      	mov	r0, r3
 800e642:	3718      	adds	r7, #24
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}

0800e648 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e648:	b480      	push	{r7}
 800e64a:	b087      	sub	sp, #28
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e654:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d031      	beq.n	800e6c2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	617b      	str	r3, [r7, #20]
 800e664:	e002      	b.n	800e66c <get_ldnumber+0x24>
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	3301      	adds	r3, #1
 800e66a:	617b      	str	r3, [r7, #20]
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	2b20      	cmp	r3, #32
 800e672:	d903      	bls.n	800e67c <get_ldnumber+0x34>
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	2b3a      	cmp	r3, #58	; 0x3a
 800e67a:	d1f4      	bne.n	800e666 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	2b3a      	cmp	r3, #58	; 0x3a
 800e682:	d11c      	bne.n	800e6be <get_ldnumber+0x76>
			tp = *path;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	1c5a      	adds	r2, r3, #1
 800e68e:	60fa      	str	r2, [r7, #12]
 800e690:	781b      	ldrb	r3, [r3, #0]
 800e692:	3b30      	subs	r3, #48	; 0x30
 800e694:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	2b09      	cmp	r3, #9
 800e69a:	d80e      	bhi.n	800e6ba <get_ldnumber+0x72>
 800e69c:	68fa      	ldr	r2, [r7, #12]
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d10a      	bne.n	800e6ba <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d107      	bne.n	800e6ba <get_ldnumber+0x72>
					vol = (int)i;
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	617b      	str	r3, [r7, #20]
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	697a      	ldr	r2, [r7, #20]
 800e6b8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	e002      	b.n	800e6c4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e6be:	2300      	movs	r3, #0
 800e6c0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e6c2:	693b      	ldr	r3, [r7, #16]
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	371c      	adds	r7, #28
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bc80      	pop	{r7}
 800e6cc:	4770      	bx	lr
	...

0800e6d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b082      	sub	sp, #8
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
 800e6d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2200      	movs	r2, #0
 800e6de:	70da      	strb	r2, [r3, #3]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e6e6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e6e8:	6839      	ldr	r1, [r7, #0]
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f7ff f8c6 	bl	800d87c <move_window>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d001      	beq.n	800e6fa <check_fs+0x2a>
 800e6f6:	2304      	movs	r3, #4
 800e6f8:	e038      	b.n	800e76c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	3334      	adds	r3, #52	; 0x34
 800e6fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e702:	4618      	mov	r0, r3
 800e704:	f7fe fe52 	bl	800d3ac <ld_word>
 800e708:	4603      	mov	r3, r0
 800e70a:	461a      	mov	r2, r3
 800e70c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e710:	429a      	cmp	r2, r3
 800e712:	d001      	beq.n	800e718 <check_fs+0x48>
 800e714:	2303      	movs	r3, #3
 800e716:	e029      	b.n	800e76c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e71e:	2be9      	cmp	r3, #233	; 0xe9
 800e720:	d009      	beq.n	800e736 <check_fs+0x66>
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e728:	2beb      	cmp	r3, #235	; 0xeb
 800e72a:	d11e      	bne.n	800e76a <check_fs+0x9a>
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e732:	2b90      	cmp	r3, #144	; 0x90
 800e734:	d119      	bne.n	800e76a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	3334      	adds	r3, #52	; 0x34
 800e73a:	3336      	adds	r3, #54	; 0x36
 800e73c:	4618      	mov	r0, r3
 800e73e:	f7fe fe4c 	bl	800d3da <ld_dword>
 800e742:	4603      	mov	r3, r0
 800e744:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e748:	4a0a      	ldr	r2, [pc, #40]	; (800e774 <check_fs+0xa4>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d101      	bne.n	800e752 <check_fs+0x82>
 800e74e:	2300      	movs	r3, #0
 800e750:	e00c      	b.n	800e76c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	3334      	adds	r3, #52	; 0x34
 800e756:	3352      	adds	r3, #82	; 0x52
 800e758:	4618      	mov	r0, r3
 800e75a:	f7fe fe3e 	bl	800d3da <ld_dword>
 800e75e:	4603      	mov	r3, r0
 800e760:	4a05      	ldr	r2, [pc, #20]	; (800e778 <check_fs+0xa8>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d101      	bne.n	800e76a <check_fs+0x9a>
 800e766:	2300      	movs	r3, #0
 800e768:	e000      	b.n	800e76c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e76a:	2302      	movs	r3, #2
}
 800e76c:	4618      	mov	r0, r3
 800e76e:	3708      	adds	r7, #8
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}
 800e774:	00544146 	.word	0x00544146
 800e778:	33544146 	.word	0x33544146

0800e77c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b096      	sub	sp, #88	; 0x58
 800e780:	af00      	add	r7, sp, #0
 800e782:	60f8      	str	r0, [r7, #12]
 800e784:	60b9      	str	r1, [r7, #8]
 800e786:	4613      	mov	r3, r2
 800e788:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	2200      	movs	r2, #0
 800e78e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e790:	68f8      	ldr	r0, [r7, #12]
 800e792:	f7ff ff59 	bl	800e648 <get_ldnumber>
 800e796:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	da01      	bge.n	800e7a2 <find_volume+0x26>
 800e79e:	230b      	movs	r3, #11
 800e7a0:	e265      	b.n	800ec6e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e7a2:	4ab0      	ldr	r2, [pc, #704]	; (800ea64 <find_volume+0x2e8>)
 800e7a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7aa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d101      	bne.n	800e7b6 <find_volume+0x3a>
 800e7b2:	230c      	movs	r3, #12
 800e7b4:	e25b      	b.n	800ec6e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7ba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e7bc:	79fb      	ldrb	r3, [r7, #7]
 800e7be:	f023 0301 	bic.w	r3, r3, #1
 800e7c2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7c6:	781b      	ldrb	r3, [r3, #0]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d01a      	beq.n	800e802 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ce:	785b      	ldrb	r3, [r3, #1]
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f7fe fd4d 	bl	800d270 <disk_status>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e7dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e7e0:	f003 0301 	and.w	r3, r3, #1
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d10c      	bne.n	800e802 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e7e8:	79fb      	ldrb	r3, [r7, #7]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d007      	beq.n	800e7fe <find_volume+0x82>
 800e7ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e7f2:	f003 0304 	and.w	r3, r3, #4
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d001      	beq.n	800e7fe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e7fa:	230a      	movs	r3, #10
 800e7fc:	e237      	b.n	800ec6e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800e7fe:	2300      	movs	r3, #0
 800e800:	e235      	b.n	800ec6e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e804:	2200      	movs	r2, #0
 800e806:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e80a:	b2da      	uxtb	r2, r3
 800e80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e80e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e812:	785b      	ldrb	r3, [r3, #1]
 800e814:	4618      	mov	r0, r3
 800e816:	f7fe fd45 	bl	800d2a4 <disk_initialize>
 800e81a:	4603      	mov	r3, r0
 800e81c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e820:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e824:	f003 0301 	and.w	r3, r3, #1
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d001      	beq.n	800e830 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e82c:	2303      	movs	r3, #3
 800e82e:	e21e      	b.n	800ec6e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e830:	79fb      	ldrb	r3, [r7, #7]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d007      	beq.n	800e846 <find_volume+0xca>
 800e836:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e83a:	f003 0304 	and.w	r3, r3, #4
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d001      	beq.n	800e846 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e842:	230a      	movs	r3, #10
 800e844:	e213      	b.n	800ec6e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800e846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e848:	7858      	ldrb	r0, [r3, #1]
 800e84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e84c:	330c      	adds	r3, #12
 800e84e:	461a      	mov	r2, r3
 800e850:	2102      	movs	r1, #2
 800e852:	f7fe fd8d 	bl	800d370 <disk_ioctl>
 800e856:	4603      	mov	r3, r0
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d001      	beq.n	800e860 <find_volume+0xe4>
 800e85c:	2301      	movs	r3, #1
 800e85e:	e206      	b.n	800ec6e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800e860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e862:	899b      	ldrh	r3, [r3, #12]
 800e864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e868:	d80d      	bhi.n	800e886 <find_volume+0x10a>
 800e86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e86c:	899b      	ldrh	r3, [r3, #12]
 800e86e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e872:	d308      	bcc.n	800e886 <find_volume+0x10a>
 800e874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e876:	899b      	ldrh	r3, [r3, #12]
 800e878:	461a      	mov	r2, r3
 800e87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e87c:	899b      	ldrh	r3, [r3, #12]
 800e87e:	3b01      	subs	r3, #1
 800e880:	4013      	ands	r3, r2
 800e882:	2b00      	cmp	r3, #0
 800e884:	d001      	beq.n	800e88a <find_volume+0x10e>
 800e886:	2301      	movs	r3, #1
 800e888:	e1f1      	b.n	800ec6e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e88a:	2300      	movs	r3, #0
 800e88c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e88e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e890:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e892:	f7ff ff1d 	bl	800e6d0 <check_fs>
 800e896:	4603      	mov	r3, r0
 800e898:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e89c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e8a0:	2b02      	cmp	r3, #2
 800e8a2:	d14b      	bne.n	800e93c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	643b      	str	r3, [r7, #64]	; 0x40
 800e8a8:	e01f      	b.n	800e8ea <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e8b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8b2:	011b      	lsls	r3, r3, #4
 800e8b4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e8b8:	4413      	add	r3, r2
 800e8ba:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8be:	3304      	adds	r3, #4
 800e8c0:	781b      	ldrb	r3, [r3, #0]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d006      	beq.n	800e8d4 <find_volume+0x158>
 800e8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c8:	3308      	adds	r3, #8
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f7fe fd85 	bl	800d3da <ld_dword>
 800e8d0:	4602      	mov	r2, r0
 800e8d2:	e000      	b.n	800e8d6 <find_volume+0x15a>
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800e8de:	440b      	add	r3, r1
 800e8e0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e8e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8e6:	3301      	adds	r3, #1
 800e8e8:	643b      	str	r3, [r7, #64]	; 0x40
 800e8ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8ec:	2b03      	cmp	r3, #3
 800e8ee:	d9dc      	bls.n	800e8aa <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e8f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d002      	beq.n	800e900 <find_volume+0x184>
 800e8fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8fc:	3b01      	subs	r3, #1
 800e8fe:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e902:	009b      	lsls	r3, r3, #2
 800e904:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e908:	4413      	add	r3, r2
 800e90a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e90e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e912:	2b00      	cmp	r3, #0
 800e914:	d005      	beq.n	800e922 <find_volume+0x1a6>
 800e916:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e918:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e91a:	f7ff fed9 	bl	800e6d0 <check_fs>
 800e91e:	4603      	mov	r3, r0
 800e920:	e000      	b.n	800e924 <find_volume+0x1a8>
 800e922:	2303      	movs	r3, #3
 800e924:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e928:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	d905      	bls.n	800e93c <find_volume+0x1c0>
 800e930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e932:	3301      	adds	r3, #1
 800e934:	643b      	str	r3, [r7, #64]	; 0x40
 800e936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e938:	2b03      	cmp	r3, #3
 800e93a:	d9e1      	bls.n	800e900 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e93c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e940:	2b04      	cmp	r3, #4
 800e942:	d101      	bne.n	800e948 <find_volume+0x1cc>
 800e944:	2301      	movs	r3, #1
 800e946:	e192      	b.n	800ec6e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e948:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e94c:	2b01      	cmp	r3, #1
 800e94e:	d901      	bls.n	800e954 <find_volume+0x1d8>
 800e950:	230d      	movs	r3, #13
 800e952:	e18c      	b.n	800ec6e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e956:	3334      	adds	r3, #52	; 0x34
 800e958:	330b      	adds	r3, #11
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7fe fd26 	bl	800d3ac <ld_word>
 800e960:	4603      	mov	r3, r0
 800e962:	461a      	mov	r2, r3
 800e964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e966:	899b      	ldrh	r3, [r3, #12]
 800e968:	429a      	cmp	r2, r3
 800e96a:	d001      	beq.n	800e970 <find_volume+0x1f4>
 800e96c:	230d      	movs	r3, #13
 800e96e:	e17e      	b.n	800ec6e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e972:	3334      	adds	r3, #52	; 0x34
 800e974:	3316      	adds	r3, #22
 800e976:	4618      	mov	r0, r3
 800e978:	f7fe fd18 	bl	800d3ac <ld_word>
 800e97c:	4603      	mov	r3, r0
 800e97e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e982:	2b00      	cmp	r3, #0
 800e984:	d106      	bne.n	800e994 <find_volume+0x218>
 800e986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e988:	3334      	adds	r3, #52	; 0x34
 800e98a:	3324      	adds	r3, #36	; 0x24
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7fe fd24 	bl	800d3da <ld_dword>
 800e992:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e996:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e998:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e99c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9a2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9a6:	789b      	ldrb	r3, [r3, #2]
 800e9a8:	2b01      	cmp	r3, #1
 800e9aa:	d005      	beq.n	800e9b8 <find_volume+0x23c>
 800e9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ae:	789b      	ldrb	r3, [r3, #2]
 800e9b0:	2b02      	cmp	r3, #2
 800e9b2:	d001      	beq.n	800e9b8 <find_volume+0x23c>
 800e9b4:	230d      	movs	r3, #13
 800e9b6:	e15a      	b.n	800ec6e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ba:	789b      	ldrb	r3, [r3, #2]
 800e9bc:	461a      	mov	r2, r3
 800e9be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9c0:	fb02 f303 	mul.w	r3, r2, r3
 800e9c4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e9cc:	b29a      	uxth	r2, r3
 800e9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d4:	895b      	ldrh	r3, [r3, #10]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d008      	beq.n	800e9ec <find_volume+0x270>
 800e9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9dc:	895b      	ldrh	r3, [r3, #10]
 800e9de:	461a      	mov	r2, r3
 800e9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e2:	895b      	ldrh	r3, [r3, #10]
 800e9e4:	3b01      	subs	r3, #1
 800e9e6:	4013      	ands	r3, r2
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d001      	beq.n	800e9f0 <find_volume+0x274>
 800e9ec:	230d      	movs	r3, #13
 800e9ee:	e13e      	b.n	800ec6e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f2:	3334      	adds	r3, #52	; 0x34
 800e9f4:	3311      	adds	r3, #17
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f7fe fcd8 	bl	800d3ac <ld_word>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	461a      	mov	r2, r3
 800ea00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea02:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ea04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea06:	891b      	ldrh	r3, [r3, #8]
 800ea08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea0a:	8992      	ldrh	r2, [r2, #12]
 800ea0c:	0952      	lsrs	r2, r2, #5
 800ea0e:	b292      	uxth	r2, r2
 800ea10:	fbb3 f1f2 	udiv	r1, r3, r2
 800ea14:	fb02 f201 	mul.w	r2, r2, r1
 800ea18:	1a9b      	subs	r3, r3, r2
 800ea1a:	b29b      	uxth	r3, r3
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d001      	beq.n	800ea24 <find_volume+0x2a8>
 800ea20:	230d      	movs	r3, #13
 800ea22:	e124      	b.n	800ec6e <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ea24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea26:	3334      	adds	r3, #52	; 0x34
 800ea28:	3313      	adds	r3, #19
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7fe fcbe 	bl	800d3ac <ld_word>
 800ea30:	4603      	mov	r3, r0
 800ea32:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ea34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d106      	bne.n	800ea48 <find_volume+0x2cc>
 800ea3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea3c:	3334      	adds	r3, #52	; 0x34
 800ea3e:	3320      	adds	r3, #32
 800ea40:	4618      	mov	r0, r3
 800ea42:	f7fe fcca 	bl	800d3da <ld_dword>
 800ea46:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ea48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea4a:	3334      	adds	r3, #52	; 0x34
 800ea4c:	330e      	adds	r3, #14
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f7fe fcac 	bl	800d3ac <ld_word>
 800ea54:	4603      	mov	r3, r0
 800ea56:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ea58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d104      	bne.n	800ea68 <find_volume+0x2ec>
 800ea5e:	230d      	movs	r3, #13
 800ea60:	e105      	b.n	800ec6e <find_volume+0x4f2>
 800ea62:	bf00      	nop
 800ea64:	2000010c 	.word	0x2000010c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ea68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ea6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea6c:	4413      	add	r3, r2
 800ea6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea70:	8911      	ldrh	r1, [r2, #8]
 800ea72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea74:	8992      	ldrh	r2, [r2, #12]
 800ea76:	0952      	lsrs	r2, r2, #5
 800ea78:	b292      	uxth	r2, r2
 800ea7a:	fbb1 f2f2 	udiv	r2, r1, r2
 800ea7e:	b292      	uxth	r2, r2
 800ea80:	4413      	add	r3, r2
 800ea82:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ea84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d201      	bcs.n	800ea90 <find_volume+0x314>
 800ea8c:	230d      	movs	r3, #13
 800ea8e:	e0ee      	b.n	800ec6e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ea90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea94:	1ad3      	subs	r3, r2, r3
 800ea96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea98:	8952      	ldrh	r2, [r2, #10]
 800ea9a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea9e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800eaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d101      	bne.n	800eaaa <find_volume+0x32e>
 800eaa6:	230d      	movs	r3, #13
 800eaa8:	e0e1      	b.n	800ec6e <find_volume+0x4f2>
		fmt = FS_FAT32;
 800eaaa:	2303      	movs	r3, #3
 800eaac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800eab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800eab6:	4293      	cmp	r3, r2
 800eab8:	d802      	bhi.n	800eac0 <find_volume+0x344>
 800eaba:	2302      	movs	r3, #2
 800eabc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800eac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800eac6:	4293      	cmp	r3, r2
 800eac8:	d802      	bhi.n	800ead0 <find_volume+0x354>
 800eaca:	2301      	movs	r3, #1
 800eacc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ead0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead2:	1c9a      	adds	r2, r3, #2
 800ead4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ead6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ead8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eada:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eadc:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800eade:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800eae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eae2:	441a      	add	r2, r3
 800eae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eae6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800eae8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eaea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaec:	441a      	add	r2, r3
 800eaee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf0:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800eaf2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eaf6:	2b03      	cmp	r3, #3
 800eaf8:	d11e      	bne.n	800eb38 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800eafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eafc:	3334      	adds	r3, #52	; 0x34
 800eafe:	332a      	adds	r3, #42	; 0x2a
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7fe fc53 	bl	800d3ac <ld_word>
 800eb06:	4603      	mov	r3, r0
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d001      	beq.n	800eb10 <find_volume+0x394>
 800eb0c:	230d      	movs	r3, #13
 800eb0e:	e0ae      	b.n	800ec6e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800eb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb12:	891b      	ldrh	r3, [r3, #8]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d001      	beq.n	800eb1c <find_volume+0x3a0>
 800eb18:	230d      	movs	r3, #13
 800eb1a:	e0a8      	b.n	800ec6e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800eb1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb1e:	3334      	adds	r3, #52	; 0x34
 800eb20:	332c      	adds	r3, #44	; 0x2c
 800eb22:	4618      	mov	r0, r3
 800eb24:	f7fe fc59 	bl	800d3da <ld_dword>
 800eb28:	4602      	mov	r2, r0
 800eb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb2c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800eb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb30:	699b      	ldr	r3, [r3, #24]
 800eb32:	009b      	lsls	r3, r3, #2
 800eb34:	647b      	str	r3, [r7, #68]	; 0x44
 800eb36:	e01f      	b.n	800eb78 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800eb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb3a:	891b      	ldrh	r3, [r3, #8]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d101      	bne.n	800eb44 <find_volume+0x3c8>
 800eb40:	230d      	movs	r3, #13
 800eb42:	e094      	b.n	800ec6e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800eb44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb4a:	441a      	add	r2, r3
 800eb4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb4e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800eb50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eb54:	2b02      	cmp	r3, #2
 800eb56:	d103      	bne.n	800eb60 <find_volume+0x3e4>
 800eb58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb5a:	699b      	ldr	r3, [r3, #24]
 800eb5c:	005b      	lsls	r3, r3, #1
 800eb5e:	e00a      	b.n	800eb76 <find_volume+0x3fa>
 800eb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb62:	699a      	ldr	r2, [r3, #24]
 800eb64:	4613      	mov	r3, r2
 800eb66:	005b      	lsls	r3, r3, #1
 800eb68:	4413      	add	r3, r2
 800eb6a:	085a      	lsrs	r2, r3, #1
 800eb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb6e:	699b      	ldr	r3, [r3, #24]
 800eb70:	f003 0301 	and.w	r3, r3, #1
 800eb74:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800eb76:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800eb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb7a:	69da      	ldr	r2, [r3, #28]
 800eb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb7e:	899b      	ldrh	r3, [r3, #12]
 800eb80:	4619      	mov	r1, r3
 800eb82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb84:	440b      	add	r3, r1
 800eb86:	3b01      	subs	r3, #1
 800eb88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eb8a:	8989      	ldrh	r1, [r1, #12]
 800eb8c:	fbb3 f3f1 	udiv	r3, r3, r1
 800eb90:	429a      	cmp	r2, r3
 800eb92:	d201      	bcs.n	800eb98 <find_volume+0x41c>
 800eb94:	230d      	movs	r3, #13
 800eb96:	e06a      	b.n	800ec6e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800eb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb9e:	615a      	str	r2, [r3, #20]
 800eba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba2:	695a      	ldr	r2, [r3, #20]
 800eba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800eba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebaa:	2280      	movs	r2, #128	; 0x80
 800ebac:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ebae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ebb2:	2b03      	cmp	r3, #3
 800ebb4:	d149      	bne.n	800ec4a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ebb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb8:	3334      	adds	r3, #52	; 0x34
 800ebba:	3330      	adds	r3, #48	; 0x30
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f7fe fbf5 	bl	800d3ac <ld_word>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d140      	bne.n	800ec4a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ebc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebca:	3301      	adds	r3, #1
 800ebcc:	4619      	mov	r1, r3
 800ebce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ebd0:	f7fe fe54 	bl	800d87c <move_window>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d137      	bne.n	800ec4a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800ebda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebdc:	2200      	movs	r2, #0
 800ebde:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ebe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe2:	3334      	adds	r3, #52	; 0x34
 800ebe4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f7fe fbdf 	bl	800d3ac <ld_word>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	461a      	mov	r2, r3
 800ebf2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ebf6:	429a      	cmp	r2, r3
 800ebf8:	d127      	bne.n	800ec4a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ebfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebfc:	3334      	adds	r3, #52	; 0x34
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7fe fbeb 	bl	800d3da <ld_dword>
 800ec04:	4603      	mov	r3, r0
 800ec06:	4a1c      	ldr	r2, [pc, #112]	; (800ec78 <find_volume+0x4fc>)
 800ec08:	4293      	cmp	r3, r2
 800ec0a:	d11e      	bne.n	800ec4a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ec0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec0e:	3334      	adds	r3, #52	; 0x34
 800ec10:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ec14:	4618      	mov	r0, r3
 800ec16:	f7fe fbe0 	bl	800d3da <ld_dword>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	4a17      	ldr	r2, [pc, #92]	; (800ec7c <find_volume+0x500>)
 800ec1e:	4293      	cmp	r3, r2
 800ec20:	d113      	bne.n	800ec4a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ec22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec24:	3334      	adds	r3, #52	; 0x34
 800ec26:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f7fe fbd5 	bl	800d3da <ld_dword>
 800ec30:	4602      	mov	r2, r0
 800ec32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec34:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ec36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec38:	3334      	adds	r3, #52	; 0x34
 800ec3a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f7fe fbcb 	bl	800d3da <ld_dword>
 800ec44:	4602      	mov	r2, r0
 800ec46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec48:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ec4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec4c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ec50:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ec52:	4b0b      	ldr	r3, [pc, #44]	; (800ec80 <find_volume+0x504>)
 800ec54:	881b      	ldrh	r3, [r3, #0]
 800ec56:	3301      	adds	r3, #1
 800ec58:	b29a      	uxth	r2, r3
 800ec5a:	4b09      	ldr	r3, [pc, #36]	; (800ec80 <find_volume+0x504>)
 800ec5c:	801a      	strh	r2, [r3, #0]
 800ec5e:	4b08      	ldr	r3, [pc, #32]	; (800ec80 <find_volume+0x504>)
 800ec60:	881a      	ldrh	r2, [r3, #0]
 800ec62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec64:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ec66:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ec68:	f7fe fda0 	bl	800d7ac <clear_lock>
#endif
	return FR_OK;
 800ec6c:	2300      	movs	r3, #0
}
 800ec6e:	4618      	mov	r0, r3
 800ec70:	3758      	adds	r7, #88	; 0x58
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}
 800ec76:	bf00      	nop
 800ec78:	41615252 	.word	0x41615252
 800ec7c:	61417272 	.word	0x61417272
 800ec80:	20000110 	.word	0x20000110

0800ec84 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b084      	sub	sp, #16
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
 800ec8c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ec8e:	2309      	movs	r3, #9
 800ec90:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d01c      	beq.n	800ecd2 <validate+0x4e>
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d018      	beq.n	800ecd2 <validate+0x4e>
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	781b      	ldrb	r3, [r3, #0]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d013      	beq.n	800ecd2 <validate+0x4e>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	889a      	ldrh	r2, [r3, #4]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	88db      	ldrh	r3, [r3, #6]
 800ecb4:	429a      	cmp	r2, r3
 800ecb6:	d10c      	bne.n	800ecd2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	785b      	ldrb	r3, [r3, #1]
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7fe fad6 	bl	800d270 <disk_status>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	f003 0301 	and.w	r3, r3, #1
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d101      	bne.n	800ecd2 <validate+0x4e>
			res = FR_OK;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ecd2:	7bfb      	ldrb	r3, [r7, #15]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d102      	bne.n	800ecde <validate+0x5a>
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	e000      	b.n	800ece0 <validate+0x5c>
 800ecde:	2300      	movs	r3, #0
 800ece0:	683a      	ldr	r2, [r7, #0]
 800ece2:	6013      	str	r3, [r2, #0]
	return res;
 800ece4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	3710      	adds	r7, #16
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}
	...

0800ecf0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b088      	sub	sp, #32
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	60f8      	str	r0, [r7, #12]
 800ecf8:	60b9      	str	r1, [r7, #8]
 800ecfa:	4613      	mov	r3, r2
 800ecfc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ed02:	f107 0310 	add.w	r3, r7, #16
 800ed06:	4618      	mov	r0, r3
 800ed08:	f7ff fc9e 	bl	800e648 <get_ldnumber>
 800ed0c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ed0e:	69fb      	ldr	r3, [r7, #28]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	da01      	bge.n	800ed18 <f_mount+0x28>
 800ed14:	230b      	movs	r3, #11
 800ed16:	e02b      	b.n	800ed70 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ed18:	4a17      	ldr	r2, [pc, #92]	; (800ed78 <f_mount+0x88>)
 800ed1a:	69fb      	ldr	r3, [r7, #28]
 800ed1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed20:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ed22:	69bb      	ldr	r3, [r7, #24]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d005      	beq.n	800ed34 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ed28:	69b8      	ldr	r0, [r7, #24]
 800ed2a:	f7fe fd3f 	bl	800d7ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ed2e:	69bb      	ldr	r3, [r7, #24]
 800ed30:	2200      	movs	r2, #0
 800ed32:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d002      	beq.n	800ed40 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ed40:	68fa      	ldr	r2, [r7, #12]
 800ed42:	490d      	ldr	r1, [pc, #52]	; (800ed78 <f_mount+0x88>)
 800ed44:	69fb      	ldr	r3, [r7, #28]
 800ed46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d002      	beq.n	800ed56 <f_mount+0x66>
 800ed50:	79fb      	ldrb	r3, [r7, #7]
 800ed52:	2b01      	cmp	r3, #1
 800ed54:	d001      	beq.n	800ed5a <f_mount+0x6a>
 800ed56:	2300      	movs	r3, #0
 800ed58:	e00a      	b.n	800ed70 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ed5a:	f107 010c 	add.w	r1, r7, #12
 800ed5e:	f107 0308 	add.w	r3, r7, #8
 800ed62:	2200      	movs	r2, #0
 800ed64:	4618      	mov	r0, r3
 800ed66:	f7ff fd09 	bl	800e77c <find_volume>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ed6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3720      	adds	r7, #32
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}
 800ed78:	2000010c 	.word	0x2000010c

0800ed7c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b098      	sub	sp, #96	; 0x60
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	60f8      	str	r0, [r7, #12]
 800ed84:	60b9      	str	r1, [r7, #8]
 800ed86:	4613      	mov	r3, r2
 800ed88:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d101      	bne.n	800ed94 <f_open+0x18>
 800ed90:	2309      	movs	r3, #9
 800ed92:	e1bb      	b.n	800f10c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ed94:	79fb      	ldrb	r3, [r7, #7]
 800ed96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed9a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ed9c:	79fa      	ldrb	r2, [r7, #7]
 800ed9e:	f107 0110 	add.w	r1, r7, #16
 800eda2:	f107 0308 	add.w	r3, r7, #8
 800eda6:	4618      	mov	r0, r3
 800eda8:	f7ff fce8 	bl	800e77c <find_volume>
 800edac:	4603      	mov	r3, r0
 800edae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800edb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	f040 819f 	bne.w	800f0fa <f_open+0x37e>
		dj.obj.fs = fs;
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800edc0:	68ba      	ldr	r2, [r7, #8]
 800edc2:	f107 0314 	add.w	r3, r7, #20
 800edc6:	4611      	mov	r1, r2
 800edc8:	4618      	mov	r0, r3
 800edca:	f7ff fbc7 	bl	800e55c <follow_path>
 800edce:	4603      	mov	r3, r0
 800edd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800edd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d11a      	bne.n	800ee12 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800eddc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ede0:	b25b      	sxtb	r3, r3
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	da03      	bge.n	800edee <f_open+0x72>
				res = FR_INVALID_NAME;
 800ede6:	2306      	movs	r3, #6
 800ede8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800edec:	e011      	b.n	800ee12 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800edee:	79fb      	ldrb	r3, [r7, #7]
 800edf0:	f023 0301 	bic.w	r3, r3, #1
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	bf14      	ite	ne
 800edf8:	2301      	movne	r3, #1
 800edfa:	2300      	moveq	r3, #0
 800edfc:	b2db      	uxtb	r3, r3
 800edfe:	461a      	mov	r2, r3
 800ee00:	f107 0314 	add.w	r3, r7, #20
 800ee04:	4611      	mov	r1, r2
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7fe fbc8 	bl	800d59c <chk_lock>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ee12:	79fb      	ldrb	r3, [r7, #7]
 800ee14:	f003 031c 	and.w	r3, r3, #28
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d07f      	beq.n	800ef1c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ee1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d017      	beq.n	800ee54 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ee24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ee28:	2b04      	cmp	r3, #4
 800ee2a:	d10e      	bne.n	800ee4a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ee2c:	f7fe fc10 	bl	800d650 <enq_lock>
 800ee30:	4603      	mov	r3, r0
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d006      	beq.n	800ee44 <f_open+0xc8>
 800ee36:	f107 0314 	add.w	r3, r7, #20
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7ff fac7 	bl	800e3ce <dir_register>
 800ee40:	4603      	mov	r3, r0
 800ee42:	e000      	b.n	800ee46 <f_open+0xca>
 800ee44:	2312      	movs	r3, #18
 800ee46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ee4a:	79fb      	ldrb	r3, [r7, #7]
 800ee4c:	f043 0308 	orr.w	r3, r3, #8
 800ee50:	71fb      	strb	r3, [r7, #7]
 800ee52:	e010      	b.n	800ee76 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ee54:	7ebb      	ldrb	r3, [r7, #26]
 800ee56:	f003 0311 	and.w	r3, r3, #17
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d003      	beq.n	800ee66 <f_open+0xea>
					res = FR_DENIED;
 800ee5e:	2307      	movs	r3, #7
 800ee60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ee64:	e007      	b.n	800ee76 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ee66:	79fb      	ldrb	r3, [r7, #7]
 800ee68:	f003 0304 	and.w	r3, r3, #4
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d002      	beq.n	800ee76 <f_open+0xfa>
 800ee70:	2308      	movs	r3, #8
 800ee72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ee76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d168      	bne.n	800ef50 <f_open+0x1d4>
 800ee7e:	79fb      	ldrb	r3, [r7, #7]
 800ee80:	f003 0308 	and.w	r3, r3, #8
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d063      	beq.n	800ef50 <f_open+0x1d4>
				dw = GET_FATTIME();
 800ee88:	f7fb fa00 	bl	800a28c <get_fattime>
 800ee8c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ee8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee90:	330e      	adds	r3, #14
 800ee92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7fe fadc 	bl	800d452 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ee9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee9c:	3316      	adds	r3, #22
 800ee9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eea0:	4618      	mov	r0, r3
 800eea2:	f7fe fad6 	bl	800d452 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800eea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eea8:	330b      	adds	r3, #11
 800eeaa:	2220      	movs	r2, #32
 800eeac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800eeae:	693b      	ldr	r3, [r7, #16]
 800eeb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eeb2:	4611      	mov	r1, r2
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f7ff f9f6 	bl	800e2a6 <ld_clust>
 800eeba:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800eebc:	693b      	ldr	r3, [r7, #16]
 800eebe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800eec0:	2200      	movs	r2, #0
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7ff fa0e 	bl	800e2e4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800eec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eeca:	331c      	adds	r3, #28
 800eecc:	2100      	movs	r1, #0
 800eece:	4618      	mov	r0, r3
 800eed0:	f7fe fabf 	bl	800d452 <st_dword>
					fs->wflag = 1;
 800eed4:	693b      	ldr	r3, [r7, #16]
 800eed6:	2201      	movs	r2, #1
 800eed8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800eeda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d037      	beq.n	800ef50 <f_open+0x1d4>
						dw = fs->winsect;
 800eee0:	693b      	ldr	r3, [r7, #16]
 800eee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eee4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800eee6:	f107 0314 	add.w	r3, r7, #20
 800eeea:	2200      	movs	r2, #0
 800eeec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7fe feff 	bl	800dcf2 <remove_chain>
 800eef4:	4603      	mov	r3, r0
 800eef6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800eefa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d126      	bne.n	800ef50 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ef02:	693b      	ldr	r3, [r7, #16]
 800ef04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7fe fcb8 	bl	800d87c <move_window>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ef12:	693b      	ldr	r3, [r7, #16]
 800ef14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ef16:	3a01      	subs	r2, #1
 800ef18:	611a      	str	r2, [r3, #16]
 800ef1a:	e019      	b.n	800ef50 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ef1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d115      	bne.n	800ef50 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ef24:	7ebb      	ldrb	r3, [r7, #26]
 800ef26:	f003 0310 	and.w	r3, r3, #16
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d003      	beq.n	800ef36 <f_open+0x1ba>
					res = FR_NO_FILE;
 800ef2e:	2304      	movs	r3, #4
 800ef30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ef34:	e00c      	b.n	800ef50 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ef36:	79fb      	ldrb	r3, [r7, #7]
 800ef38:	f003 0302 	and.w	r3, r3, #2
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d007      	beq.n	800ef50 <f_open+0x1d4>
 800ef40:	7ebb      	ldrb	r3, [r7, #26]
 800ef42:	f003 0301 	and.w	r3, r3, #1
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d002      	beq.n	800ef50 <f_open+0x1d4>
						res = FR_DENIED;
 800ef4a:	2307      	movs	r3, #7
 800ef4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ef50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d128      	bne.n	800efaa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ef58:	79fb      	ldrb	r3, [r7, #7]
 800ef5a:	f003 0308 	and.w	r3, r3, #8
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d003      	beq.n	800ef6a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ef62:	79fb      	ldrb	r3, [r7, #7]
 800ef64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef68:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ef6a:	693b      	ldr	r3, [r7, #16]
 800ef6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ef72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ef78:	79fb      	ldrb	r3, [r7, #7]
 800ef7a:	f023 0301 	bic.w	r3, r3, #1
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	bf14      	ite	ne
 800ef82:	2301      	movne	r3, #1
 800ef84:	2300      	moveq	r3, #0
 800ef86:	b2db      	uxtb	r3, r3
 800ef88:	461a      	mov	r2, r3
 800ef8a:	f107 0314 	add.w	r3, r7, #20
 800ef8e:	4611      	mov	r1, r2
 800ef90:	4618      	mov	r0, r3
 800ef92:	f7fe fb7d 	bl	800d690 <inc_lock>
 800ef96:	4602      	mov	r2, r0
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	691b      	ldr	r3, [r3, #16]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d102      	bne.n	800efaa <f_open+0x22e>
 800efa4:	2302      	movs	r3, #2
 800efa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800efaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800efae:	2b00      	cmp	r3, #0
 800efb0:	f040 80a3 	bne.w	800f0fa <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800efb4:	693b      	ldr	r3, [r7, #16]
 800efb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800efb8:	4611      	mov	r1, r2
 800efba:	4618      	mov	r0, r3
 800efbc:	f7ff f973 	bl	800e2a6 <ld_clust>
 800efc0:	4602      	mov	r2, r0
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800efc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efc8:	331c      	adds	r3, #28
 800efca:	4618      	mov	r0, r3
 800efcc:	f7fe fa05 	bl	800d3da <ld_dword>
 800efd0:	4602      	mov	r2, r0
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	2200      	movs	r2, #0
 800efda:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800efdc:	693a      	ldr	r2, [r7, #16]
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	88da      	ldrh	r2, [r3, #6]
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	79fa      	ldrb	r2, [r7, #7]
 800efee:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	2200      	movs	r2, #0
 800eff4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	2200      	movs	r2, #0
 800effa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	2200      	movs	r2, #0
 800f000:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	3330      	adds	r3, #48	; 0x30
 800f006:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f00a:	2100      	movs	r1, #0
 800f00c:	4618      	mov	r0, r3
 800f00e:	f7fe fa6b 	bl	800d4e8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f012:	79fb      	ldrb	r3, [r7, #7]
 800f014:	f003 0320 	and.w	r3, r3, #32
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d06e      	beq.n	800f0fa <f_open+0x37e>
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	68db      	ldr	r3, [r3, #12]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d06a      	beq.n	800f0fa <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	68da      	ldr	r2, [r3, #12]
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f02c:	693b      	ldr	r3, [r7, #16]
 800f02e:	895b      	ldrh	r3, [r3, #10]
 800f030:	461a      	mov	r2, r3
 800f032:	693b      	ldr	r3, [r7, #16]
 800f034:	899b      	ldrh	r3, [r3, #12]
 800f036:	fb03 f302 	mul.w	r3, r3, r2
 800f03a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	689b      	ldr	r3, [r3, #8]
 800f040:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	68db      	ldr	r3, [r3, #12]
 800f046:	657b      	str	r3, [r7, #84]	; 0x54
 800f048:	e016      	b.n	800f078 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f04e:	4618      	mov	r0, r3
 800f050:	f7fe fc5f 	bl	800d912 <get_fat>
 800f054:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800f056:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f058:	2b01      	cmp	r3, #1
 800f05a:	d802      	bhi.n	800f062 <f_open+0x2e6>
 800f05c:	2302      	movs	r3, #2
 800f05e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f062:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f068:	d102      	bne.n	800f070 <f_open+0x2f4>
 800f06a:	2301      	movs	r3, #1
 800f06c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f070:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f074:	1ad3      	subs	r3, r2, r3
 800f076:	657b      	str	r3, [r7, #84]	; 0x54
 800f078:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d103      	bne.n	800f088 <f_open+0x30c>
 800f080:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f084:	429a      	cmp	r2, r3
 800f086:	d8e0      	bhi.n	800f04a <f_open+0x2ce>
				}
				fp->clust = clst;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f08c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f08e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f092:	2b00      	cmp	r3, #0
 800f094:	d131      	bne.n	800f0fa <f_open+0x37e>
 800f096:	693b      	ldr	r3, [r7, #16]
 800f098:	899b      	ldrh	r3, [r3, #12]
 800f09a:	461a      	mov	r2, r3
 800f09c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f09e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f0a2:	fb02 f201 	mul.w	r2, r2, r1
 800f0a6:	1a9b      	subs	r3, r3, r2
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d026      	beq.n	800f0fa <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f0ac:	693b      	ldr	r3, [r7, #16]
 800f0ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f7fe fc10 	bl	800d8d6 <clust2sect>
 800f0b6:	6478      	str	r0, [r7, #68]	; 0x44
 800f0b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d103      	bne.n	800f0c6 <f_open+0x34a>
						res = FR_INT_ERR;
 800f0be:	2302      	movs	r3, #2
 800f0c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f0c4:	e019      	b.n	800f0fa <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f0c6:	693b      	ldr	r3, [r7, #16]
 800f0c8:	899b      	ldrh	r3, [r3, #12]
 800f0ca:	461a      	mov	r2, r3
 800f0cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0ce:	fbb3 f2f2 	udiv	r2, r3, r2
 800f0d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0d4:	441a      	add	r2, r3
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f0da:	693b      	ldr	r3, [r7, #16]
 800f0dc:	7858      	ldrb	r0, [r3, #1]
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	6a1a      	ldr	r2, [r3, #32]
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	f7fe f901 	bl	800d2f0 <disk_read>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d002      	beq.n	800f0fa <f_open+0x37e>
 800f0f4:	2301      	movs	r3, #1
 800f0f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f0fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d002      	beq.n	800f108 <f_open+0x38c>
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	2200      	movs	r2, #0
 800f106:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f108:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800f10c:	4618      	mov	r0, r3
 800f10e:	3760      	adds	r7, #96	; 0x60
 800f110:	46bd      	mov	sp, r7
 800f112:	bd80      	pop	{r7, pc}

0800f114 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b08e      	sub	sp, #56	; 0x38
 800f118:	af00      	add	r7, sp, #0
 800f11a:	60f8      	str	r0, [r7, #12]
 800f11c:	60b9      	str	r1, [r7, #8]
 800f11e:	607a      	str	r2, [r7, #4]
 800f120:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	2200      	movs	r2, #0
 800f12a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	f107 0214 	add.w	r2, r7, #20
 800f132:	4611      	mov	r1, r2
 800f134:	4618      	mov	r0, r3
 800f136:	f7ff fda5 	bl	800ec84 <validate>
 800f13a:	4603      	mov	r3, r0
 800f13c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f140:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f144:	2b00      	cmp	r3, #0
 800f146:	d107      	bne.n	800f158 <f_read+0x44>
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	7d5b      	ldrb	r3, [r3, #21]
 800f14c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f150:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f154:	2b00      	cmp	r3, #0
 800f156:	d002      	beq.n	800f15e <f_read+0x4a>
 800f158:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f15c:	e135      	b.n	800f3ca <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	7d1b      	ldrb	r3, [r3, #20]
 800f162:	f003 0301 	and.w	r3, r3, #1
 800f166:	2b00      	cmp	r3, #0
 800f168:	d101      	bne.n	800f16e <f_read+0x5a>
 800f16a:	2307      	movs	r3, #7
 800f16c:	e12d      	b.n	800f3ca <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	68da      	ldr	r2, [r3, #12]
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	699b      	ldr	r3, [r3, #24]
 800f176:	1ad3      	subs	r3, r2, r3
 800f178:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800f17a:	687a      	ldr	r2, [r7, #4]
 800f17c:	6a3b      	ldr	r3, [r7, #32]
 800f17e:	429a      	cmp	r2, r3
 800f180:	f240 811e 	bls.w	800f3c0 <f_read+0x2ac>
 800f184:	6a3b      	ldr	r3, [r7, #32]
 800f186:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800f188:	e11a      	b.n	800f3c0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	699b      	ldr	r3, [r3, #24]
 800f18e:	697a      	ldr	r2, [r7, #20]
 800f190:	8992      	ldrh	r2, [r2, #12]
 800f192:	fbb3 f1f2 	udiv	r1, r3, r2
 800f196:	fb02 f201 	mul.w	r2, r2, r1
 800f19a:	1a9b      	subs	r3, r3, r2
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	f040 80d5 	bne.w	800f34c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	699b      	ldr	r3, [r3, #24]
 800f1a6:	697a      	ldr	r2, [r7, #20]
 800f1a8:	8992      	ldrh	r2, [r2, #12]
 800f1aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800f1ae:	697a      	ldr	r2, [r7, #20]
 800f1b0:	8952      	ldrh	r2, [r2, #10]
 800f1b2:	3a01      	subs	r2, #1
 800f1b4:	4013      	ands	r3, r2
 800f1b6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800f1b8:	69fb      	ldr	r3, [r7, #28]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d12f      	bne.n	800f21e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	699b      	ldr	r3, [r3, #24]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d103      	bne.n	800f1ce <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	689b      	ldr	r3, [r3, #8]
 800f1ca:	633b      	str	r3, [r7, #48]	; 0x30
 800f1cc:	e013      	b.n	800f1f6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d007      	beq.n	800f1e6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	699b      	ldr	r3, [r3, #24]
 800f1da:	4619      	mov	r1, r3
 800f1dc:	68f8      	ldr	r0, [r7, #12]
 800f1de:	f7fe fe85 	bl	800deec <clmt_clust>
 800f1e2:	6338      	str	r0, [r7, #48]	; 0x30
 800f1e4:	e007      	b.n	800f1f6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f1e6:	68fa      	ldr	r2, [r7, #12]
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	69db      	ldr	r3, [r3, #28]
 800f1ec:	4619      	mov	r1, r3
 800f1ee:	4610      	mov	r0, r2
 800f1f0:	f7fe fb8f 	bl	800d912 <get_fat>
 800f1f4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f8:	2b01      	cmp	r3, #1
 800f1fa:	d804      	bhi.n	800f206 <f_read+0xf2>
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	2202      	movs	r2, #2
 800f200:	755a      	strb	r2, [r3, #21]
 800f202:	2302      	movs	r3, #2
 800f204:	e0e1      	b.n	800f3ca <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f20c:	d104      	bne.n	800f218 <f_read+0x104>
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	2201      	movs	r2, #1
 800f212:	755a      	strb	r2, [r3, #21]
 800f214:	2301      	movs	r3, #1
 800f216:	e0d8      	b.n	800f3ca <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f21c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f21e:	697a      	ldr	r2, [r7, #20]
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	69db      	ldr	r3, [r3, #28]
 800f224:	4619      	mov	r1, r3
 800f226:	4610      	mov	r0, r2
 800f228:	f7fe fb55 	bl	800d8d6 <clust2sect>
 800f22c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f22e:	69bb      	ldr	r3, [r7, #24]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d104      	bne.n	800f23e <f_read+0x12a>
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	2202      	movs	r2, #2
 800f238:	755a      	strb	r2, [r3, #21]
 800f23a:	2302      	movs	r3, #2
 800f23c:	e0c5      	b.n	800f3ca <f_read+0x2b6>
			sect += csect;
 800f23e:	69ba      	ldr	r2, [r7, #24]
 800f240:	69fb      	ldr	r3, [r7, #28]
 800f242:	4413      	add	r3, r2
 800f244:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	899b      	ldrh	r3, [r3, #12]
 800f24a:	461a      	mov	r2, r3
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f252:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f256:	2b00      	cmp	r3, #0
 800f258:	d041      	beq.n	800f2de <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f25a:	69fa      	ldr	r2, [r7, #28]
 800f25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f25e:	4413      	add	r3, r2
 800f260:	697a      	ldr	r2, [r7, #20]
 800f262:	8952      	ldrh	r2, [r2, #10]
 800f264:	4293      	cmp	r3, r2
 800f266:	d905      	bls.n	800f274 <f_read+0x160>
					cc = fs->csize - csect;
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	895b      	ldrh	r3, [r3, #10]
 800f26c:	461a      	mov	r2, r3
 800f26e:	69fb      	ldr	r3, [r7, #28]
 800f270:	1ad3      	subs	r3, r2, r3
 800f272:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	7858      	ldrb	r0, [r3, #1]
 800f278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27a:	69ba      	ldr	r2, [r7, #24]
 800f27c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f27e:	f7fe f837 	bl	800d2f0 <disk_read>
 800f282:	4603      	mov	r3, r0
 800f284:	2b00      	cmp	r3, #0
 800f286:	d004      	beq.n	800f292 <f_read+0x17e>
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	2201      	movs	r2, #1
 800f28c:	755a      	strb	r2, [r3, #21]
 800f28e:	2301      	movs	r3, #1
 800f290:	e09b      	b.n	800f3ca <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	7d1b      	ldrb	r3, [r3, #20]
 800f296:	b25b      	sxtb	r3, r3
 800f298:	2b00      	cmp	r3, #0
 800f29a:	da18      	bge.n	800f2ce <f_read+0x1ba>
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	6a1a      	ldr	r2, [r3, #32]
 800f2a0:	69bb      	ldr	r3, [r7, #24]
 800f2a2:	1ad3      	subs	r3, r2, r3
 800f2a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d911      	bls.n	800f2ce <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	6a1a      	ldr	r2, [r3, #32]
 800f2ae:	69bb      	ldr	r3, [r7, #24]
 800f2b0:	1ad3      	subs	r3, r2, r3
 800f2b2:	697a      	ldr	r2, [r7, #20]
 800f2b4:	8992      	ldrh	r2, [r2, #12]
 800f2b6:	fb02 f303 	mul.w	r3, r2, r3
 800f2ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2bc:	18d0      	adds	r0, r2, r3
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f2c4:	697b      	ldr	r3, [r7, #20]
 800f2c6:	899b      	ldrh	r3, [r3, #12]
 800f2c8:	461a      	mov	r2, r3
 800f2ca:	f7fe f8ed 	bl	800d4a8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	899b      	ldrh	r3, [r3, #12]
 800f2d2:	461a      	mov	r2, r3
 800f2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d6:	fb02 f303 	mul.w	r3, r2, r3
 800f2da:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800f2dc:	e05c      	b.n	800f398 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	6a1b      	ldr	r3, [r3, #32]
 800f2e2:	69ba      	ldr	r2, [r7, #24]
 800f2e4:	429a      	cmp	r2, r3
 800f2e6:	d02e      	beq.n	800f346 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	7d1b      	ldrb	r3, [r3, #20]
 800f2ec:	b25b      	sxtb	r3, r3
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	da18      	bge.n	800f324 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	7858      	ldrb	r0, [r3, #1]
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	6a1a      	ldr	r2, [r3, #32]
 800f300:	2301      	movs	r3, #1
 800f302:	f7fe f815 	bl	800d330 <disk_write>
 800f306:	4603      	mov	r3, r0
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d004      	beq.n	800f316 <f_read+0x202>
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	2201      	movs	r2, #1
 800f310:	755a      	strb	r2, [r3, #21]
 800f312:	2301      	movs	r3, #1
 800f314:	e059      	b.n	800f3ca <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	7d1b      	ldrb	r3, [r3, #20]
 800f31a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f31e:	b2da      	uxtb	r2, r3
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	7858      	ldrb	r0, [r3, #1]
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f32e:	2301      	movs	r3, #1
 800f330:	69ba      	ldr	r2, [r7, #24]
 800f332:	f7fd ffdd 	bl	800d2f0 <disk_read>
 800f336:	4603      	mov	r3, r0
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d004      	beq.n	800f346 <f_read+0x232>
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	2201      	movs	r2, #1
 800f340:	755a      	strb	r2, [r3, #21]
 800f342:	2301      	movs	r3, #1
 800f344:	e041      	b.n	800f3ca <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	69ba      	ldr	r2, [r7, #24]
 800f34a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	899b      	ldrh	r3, [r3, #12]
 800f350:	4618      	mov	r0, r3
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	699b      	ldr	r3, [r3, #24]
 800f356:	697a      	ldr	r2, [r7, #20]
 800f358:	8992      	ldrh	r2, [r2, #12]
 800f35a:	fbb3 f1f2 	udiv	r1, r3, r2
 800f35e:	fb02 f201 	mul.w	r2, r2, r1
 800f362:	1a9b      	subs	r3, r3, r2
 800f364:	1ac3      	subs	r3, r0, r3
 800f366:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d901      	bls.n	800f374 <f_read+0x260>
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	699b      	ldr	r3, [r3, #24]
 800f37e:	697a      	ldr	r2, [r7, #20]
 800f380:	8992      	ldrh	r2, [r2, #12]
 800f382:	fbb3 f0f2 	udiv	r0, r3, r2
 800f386:	fb02 f200 	mul.w	r2, r2, r0
 800f38a:	1a9b      	subs	r3, r3, r2
 800f38c:	440b      	add	r3, r1
 800f38e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f390:	4619      	mov	r1, r3
 800f392:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f394:	f7fe f888 	bl	800d4a8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f39c:	4413      	add	r3, r2
 800f39e:	627b      	str	r3, [r7, #36]	; 0x24
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	699a      	ldr	r2, [r3, #24]
 800f3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a6:	441a      	add	r2, r3
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	619a      	str	r2, [r3, #24]
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	681a      	ldr	r2, [r3, #0]
 800f3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b2:	441a      	add	r2, r3
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	601a      	str	r2, [r3, #0]
 800f3b8:	687a      	ldr	r2, [r7, #4]
 800f3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3bc:	1ad3      	subs	r3, r2, r3
 800f3be:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	f47f aee1 	bne.w	800f18a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f3c8:	2300      	movs	r3, #0
}
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	3738      	adds	r7, #56	; 0x38
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}

0800f3d2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f3d2:	b580      	push	{r7, lr}
 800f3d4:	b090      	sub	sp, #64	; 0x40
 800f3d6:	af00      	add	r7, sp, #0
 800f3d8:	6078      	str	r0, [r7, #4]
 800f3da:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f107 0208 	add.w	r2, r7, #8
 800f3e2:	4611      	mov	r1, r2
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f7ff fc4d 	bl	800ec84 <validate>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f3f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d103      	bne.n	800f400 <f_lseek+0x2e>
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	7d5b      	ldrb	r3, [r3, #21]
 800f3fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f400:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f404:	2b00      	cmp	r3, #0
 800f406:	d002      	beq.n	800f40e <f_lseek+0x3c>
 800f408:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f40c:	e201      	b.n	800f812 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f412:	2b00      	cmp	r3, #0
 800f414:	f000 80d9 	beq.w	800f5ca <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f41e:	d15a      	bne.n	800f4d6 <f_lseek+0x104>
			tbl = fp->cltbl;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f424:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f428:	1d1a      	adds	r2, r3, #4
 800f42a:	627a      	str	r2, [r7, #36]	; 0x24
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	617b      	str	r3, [r7, #20]
 800f430:	2302      	movs	r3, #2
 800f432:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	689b      	ldr	r3, [r3, #8]
 800f438:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800f43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d03a      	beq.n	800f4b6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f442:	613b      	str	r3, [r7, #16]
 800f444:	2300      	movs	r3, #0
 800f446:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f44a:	3302      	adds	r3, #2
 800f44c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800f44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f450:	60fb      	str	r3, [r7, #12]
 800f452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f454:	3301      	adds	r3, #1
 800f456:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f45c:	4618      	mov	r0, r3
 800f45e:	f7fe fa58 	bl	800d912 <get_fat>
 800f462:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f466:	2b01      	cmp	r3, #1
 800f468:	d804      	bhi.n	800f474 <f_lseek+0xa2>
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2202      	movs	r2, #2
 800f46e:	755a      	strb	r2, [r3, #21]
 800f470:	2302      	movs	r3, #2
 800f472:	e1ce      	b.n	800f812 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f476:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f47a:	d104      	bne.n	800f486 <f_lseek+0xb4>
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2201      	movs	r2, #1
 800f480:	755a      	strb	r2, [r3, #21]
 800f482:	2301      	movs	r3, #1
 800f484:	e1c5      	b.n	800f812 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	3301      	adds	r3, #1
 800f48a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f48c:	429a      	cmp	r2, r3
 800f48e:	d0de      	beq.n	800f44e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f492:	697b      	ldr	r3, [r7, #20]
 800f494:	429a      	cmp	r2, r3
 800f496:	d809      	bhi.n	800f4ac <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800f498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f49a:	1d1a      	adds	r2, r3, #4
 800f49c:	627a      	str	r2, [r7, #36]	; 0x24
 800f49e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4a0:	601a      	str	r2, [r3, #0]
 800f4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a4:	1d1a      	adds	r2, r3, #4
 800f4a6:	627a      	str	r2, [r7, #36]	; 0x24
 800f4a8:	693a      	ldr	r2, [r7, #16]
 800f4aa:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	699b      	ldr	r3, [r3, #24]
 800f4b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	d3c4      	bcc.n	800f440 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f4bc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f4be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d803      	bhi.n	800f4ce <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800f4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	601a      	str	r2, [r3, #0]
 800f4cc:	e19f      	b.n	800f80e <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f4ce:	2311      	movs	r3, #17
 800f4d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f4d4:	e19b      	b.n	800f80e <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	68db      	ldr	r3, [r3, #12]
 800f4da:	683a      	ldr	r2, [r7, #0]
 800f4dc:	429a      	cmp	r2, r3
 800f4de:	d902      	bls.n	800f4e6 <f_lseek+0x114>
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	68db      	ldr	r3, [r3, #12]
 800f4e4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	683a      	ldr	r2, [r7, #0]
 800f4ea:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	f000 818d 	beq.w	800f80e <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	3b01      	subs	r3, #1
 800f4f8:	4619      	mov	r1, r3
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	f7fe fcf6 	bl	800deec <clmt_clust>
 800f500:	4602      	mov	r2, r0
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f506:	68ba      	ldr	r2, [r7, #8]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	69db      	ldr	r3, [r3, #28]
 800f50c:	4619      	mov	r1, r3
 800f50e:	4610      	mov	r0, r2
 800f510:	f7fe f9e1 	bl	800d8d6 <clust2sect>
 800f514:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f516:	69bb      	ldr	r3, [r7, #24]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d104      	bne.n	800f526 <f_lseek+0x154>
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2202      	movs	r2, #2
 800f520:	755a      	strb	r2, [r3, #21]
 800f522:	2302      	movs	r3, #2
 800f524:	e175      	b.n	800f812 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f526:	683b      	ldr	r3, [r7, #0]
 800f528:	3b01      	subs	r3, #1
 800f52a:	68ba      	ldr	r2, [r7, #8]
 800f52c:	8992      	ldrh	r2, [r2, #12]
 800f52e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f532:	68ba      	ldr	r2, [r7, #8]
 800f534:	8952      	ldrh	r2, [r2, #10]
 800f536:	3a01      	subs	r2, #1
 800f538:	4013      	ands	r3, r2
 800f53a:	69ba      	ldr	r2, [r7, #24]
 800f53c:	4413      	add	r3, r2
 800f53e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	699b      	ldr	r3, [r3, #24]
 800f544:	68ba      	ldr	r2, [r7, #8]
 800f546:	8992      	ldrh	r2, [r2, #12]
 800f548:	fbb3 f1f2 	udiv	r1, r3, r2
 800f54c:	fb02 f201 	mul.w	r2, r2, r1
 800f550:	1a9b      	subs	r3, r3, r2
 800f552:	2b00      	cmp	r3, #0
 800f554:	f000 815b 	beq.w	800f80e <f_lseek+0x43c>
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	6a1b      	ldr	r3, [r3, #32]
 800f55c:	69ba      	ldr	r2, [r7, #24]
 800f55e:	429a      	cmp	r2, r3
 800f560:	f000 8155 	beq.w	800f80e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	7d1b      	ldrb	r3, [r3, #20]
 800f568:	b25b      	sxtb	r3, r3
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	da18      	bge.n	800f5a0 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	7858      	ldrb	r0, [r3, #1]
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6a1a      	ldr	r2, [r3, #32]
 800f57c:	2301      	movs	r3, #1
 800f57e:	f7fd fed7 	bl	800d330 <disk_write>
 800f582:	4603      	mov	r3, r0
 800f584:	2b00      	cmp	r3, #0
 800f586:	d004      	beq.n	800f592 <f_lseek+0x1c0>
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2201      	movs	r2, #1
 800f58c:	755a      	strb	r2, [r3, #21]
 800f58e:	2301      	movs	r3, #1
 800f590:	e13f      	b.n	800f812 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	7d1b      	ldrb	r3, [r3, #20]
 800f596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f59a:	b2da      	uxtb	r2, r3
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	7858      	ldrb	r0, [r3, #1]
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	69ba      	ldr	r2, [r7, #24]
 800f5ae:	f7fd fe9f 	bl	800d2f0 <disk_read>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d004      	beq.n	800f5c2 <f_lseek+0x1f0>
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2201      	movs	r2, #1
 800f5bc:	755a      	strb	r2, [r3, #21]
 800f5be:	2301      	movs	r3, #1
 800f5c0:	e127      	b.n	800f812 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	69ba      	ldr	r2, [r7, #24]
 800f5c6:	621a      	str	r2, [r3, #32]
 800f5c8:	e121      	b.n	800f80e <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	68db      	ldr	r3, [r3, #12]
 800f5ce:	683a      	ldr	r2, [r7, #0]
 800f5d0:	429a      	cmp	r2, r3
 800f5d2:	d908      	bls.n	800f5e6 <f_lseek+0x214>
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	7d1b      	ldrb	r3, [r3, #20]
 800f5d8:	f003 0302 	and.w	r3, r3, #2
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d102      	bne.n	800f5e6 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	68db      	ldr	r3, [r3, #12]
 800f5e4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	699b      	ldr	r3, [r3, #24]
 800f5ea:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	637b      	str	r3, [r7, #52]	; 0x34
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f5f4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	f000 80b5 	beq.w	800f768 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	895b      	ldrh	r3, [r3, #10]
 800f602:	461a      	mov	r2, r3
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	899b      	ldrh	r3, [r3, #12]
 800f608:	fb03 f302 	mul.w	r3, r3, r2
 800f60c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f60e:	6a3b      	ldr	r3, [r7, #32]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d01b      	beq.n	800f64c <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	1e5a      	subs	r2, r3, #1
 800f618:	69fb      	ldr	r3, [r7, #28]
 800f61a:	fbb2 f2f3 	udiv	r2, r2, r3
 800f61e:	6a3b      	ldr	r3, [r7, #32]
 800f620:	1e59      	subs	r1, r3, #1
 800f622:	69fb      	ldr	r3, [r7, #28]
 800f624:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f628:	429a      	cmp	r2, r3
 800f62a:	d30f      	bcc.n	800f64c <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f62c:	6a3b      	ldr	r3, [r7, #32]
 800f62e:	1e5a      	subs	r2, r3, #1
 800f630:	69fb      	ldr	r3, [r7, #28]
 800f632:	425b      	negs	r3, r3
 800f634:	401a      	ands	r2, r3
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	699b      	ldr	r3, [r3, #24]
 800f63e:	683a      	ldr	r2, [r7, #0]
 800f640:	1ad3      	subs	r3, r2, r3
 800f642:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	69db      	ldr	r3, [r3, #28]
 800f648:	63bb      	str	r3, [r7, #56]	; 0x38
 800f64a:	e022      	b.n	800f692 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	689b      	ldr	r3, [r3, #8]
 800f650:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f654:	2b00      	cmp	r3, #0
 800f656:	d119      	bne.n	800f68c <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2100      	movs	r1, #0
 800f65c:	4618      	mov	r0, r3
 800f65e:	f7fe fbad 	bl	800ddbc <create_chain>
 800f662:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f666:	2b01      	cmp	r3, #1
 800f668:	d104      	bne.n	800f674 <f_lseek+0x2a2>
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	2202      	movs	r2, #2
 800f66e:	755a      	strb	r2, [r3, #21]
 800f670:	2302      	movs	r3, #2
 800f672:	e0ce      	b.n	800f812 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f67a:	d104      	bne.n	800f686 <f_lseek+0x2b4>
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2201      	movs	r2, #1
 800f680:	755a      	strb	r2, [r3, #21]
 800f682:	2301      	movs	r3, #1
 800f684:	e0c5      	b.n	800f812 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f68a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f690:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f694:	2b00      	cmp	r3, #0
 800f696:	d067      	beq.n	800f768 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800f698:	e03a      	b.n	800f710 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800f69a:	683a      	ldr	r2, [r7, #0]
 800f69c:	69fb      	ldr	r3, [r7, #28]
 800f69e:	1ad3      	subs	r3, r2, r3
 800f6a0:	603b      	str	r3, [r7, #0]
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	699a      	ldr	r2, [r3, #24]
 800f6a6:	69fb      	ldr	r3, [r7, #28]
 800f6a8:	441a      	add	r2, r3
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	7d1b      	ldrb	r3, [r3, #20]
 800f6b2:	f003 0302 	and.w	r3, r3, #2
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d00b      	beq.n	800f6d2 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f7fe fb7c 	bl	800ddbc <create_chain>
 800f6c4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d108      	bne.n	800f6de <f_lseek+0x30c>
							ofs = 0; break;
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	603b      	str	r3, [r7, #0]
 800f6d0:	e022      	b.n	800f718 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f7fe f91b 	bl	800d912 <get_fat>
 800f6dc:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f6e4:	d104      	bne.n	800f6f0 <f_lseek+0x31e>
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	2201      	movs	r2, #1
 800f6ea:	755a      	strb	r2, [r3, #21]
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	e090      	b.n	800f812 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6f2:	2b01      	cmp	r3, #1
 800f6f4:	d904      	bls.n	800f700 <f_lseek+0x32e>
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	699b      	ldr	r3, [r3, #24]
 800f6fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f6fc:	429a      	cmp	r2, r3
 800f6fe:	d304      	bcc.n	800f70a <f_lseek+0x338>
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2202      	movs	r2, #2
 800f704:	755a      	strb	r2, [r3, #21]
 800f706:	2302      	movs	r3, #2
 800f708:	e083      	b.n	800f812 <f_lseek+0x440>
					fp->clust = clst;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f70e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f710:	683a      	ldr	r2, [r7, #0]
 800f712:	69fb      	ldr	r3, [r7, #28]
 800f714:	429a      	cmp	r2, r3
 800f716:	d8c0      	bhi.n	800f69a <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	699a      	ldr	r2, [r3, #24]
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	441a      	add	r2, r3
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	899b      	ldrh	r3, [r3, #12]
 800f728:	461a      	mov	r2, r3
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	fbb3 f1f2 	udiv	r1, r3, r2
 800f730:	fb02 f201 	mul.w	r2, r2, r1
 800f734:	1a9b      	subs	r3, r3, r2
 800f736:	2b00      	cmp	r3, #0
 800f738:	d016      	beq.n	800f768 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f73e:	4618      	mov	r0, r3
 800f740:	f7fe f8c9 	bl	800d8d6 <clust2sect>
 800f744:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d104      	bne.n	800f756 <f_lseek+0x384>
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2202      	movs	r2, #2
 800f750:	755a      	strb	r2, [r3, #21]
 800f752:	2302      	movs	r3, #2
 800f754:	e05d      	b.n	800f812 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800f756:	68bb      	ldr	r3, [r7, #8]
 800f758:	899b      	ldrh	r3, [r3, #12]
 800f75a:	461a      	mov	r2, r3
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f764:	4413      	add	r3, r2
 800f766:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	699a      	ldr	r2, [r3, #24]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	68db      	ldr	r3, [r3, #12]
 800f770:	429a      	cmp	r2, r3
 800f772:	d90a      	bls.n	800f78a <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	699a      	ldr	r2, [r3, #24]
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	7d1b      	ldrb	r3, [r3, #20]
 800f780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f784:	b2da      	uxtb	r2, r3
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	699b      	ldr	r3, [r3, #24]
 800f78e:	68ba      	ldr	r2, [r7, #8]
 800f790:	8992      	ldrh	r2, [r2, #12]
 800f792:	fbb3 f1f2 	udiv	r1, r3, r2
 800f796:	fb02 f201 	mul.w	r2, r2, r1
 800f79a:	1a9b      	subs	r3, r3, r2
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d036      	beq.n	800f80e <f_lseek+0x43c>
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6a1b      	ldr	r3, [r3, #32]
 800f7a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f7a6:	429a      	cmp	r2, r3
 800f7a8:	d031      	beq.n	800f80e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	7d1b      	ldrb	r3, [r3, #20]
 800f7ae:	b25b      	sxtb	r3, r3
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	da18      	bge.n	800f7e6 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	7858      	ldrb	r0, [r3, #1]
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6a1a      	ldr	r2, [r3, #32]
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	f7fd fdb4 	bl	800d330 <disk_write>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d004      	beq.n	800f7d8 <f_lseek+0x406>
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	2201      	movs	r2, #1
 800f7d2:	755a      	strb	r2, [r3, #21]
 800f7d4:	2301      	movs	r3, #1
 800f7d6:	e01c      	b.n	800f812 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	7d1b      	ldrb	r3, [r3, #20]
 800f7dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7e0:	b2da      	uxtb	r2, r3
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f7e6:	68bb      	ldr	r3, [r7, #8]
 800f7e8:	7858      	ldrb	r0, [r3, #1]
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f7f0:	2301      	movs	r3, #1
 800f7f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f7f4:	f7fd fd7c 	bl	800d2f0 <disk_read>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d004      	beq.n	800f808 <f_lseek+0x436>
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2201      	movs	r2, #1
 800f802:	755a      	strb	r2, [r3, #21]
 800f804:	2301      	movs	r3, #1
 800f806:	e004      	b.n	800f812 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f80c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f80e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f812:	4618      	mov	r0, r3
 800f814:	3740      	adds	r7, #64	; 0x40
 800f816:	46bd      	mov	sp, r7
 800f818:	bd80      	pop	{r7, pc}
	...

0800f81c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f81c:	b480      	push	{r7}
 800f81e:	b087      	sub	sp, #28
 800f820:	af00      	add	r7, sp, #0
 800f822:	60f8      	str	r0, [r7, #12]
 800f824:	60b9      	str	r1, [r7, #8]
 800f826:	4613      	mov	r3, r2
 800f828:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f82a:	2301      	movs	r3, #1
 800f82c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f82e:	2300      	movs	r3, #0
 800f830:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f832:	4b1e      	ldr	r3, [pc, #120]	; (800f8ac <FATFS_LinkDriverEx+0x90>)
 800f834:	7a5b      	ldrb	r3, [r3, #9]
 800f836:	b2db      	uxtb	r3, r3
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d131      	bne.n	800f8a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f83c:	4b1b      	ldr	r3, [pc, #108]	; (800f8ac <FATFS_LinkDriverEx+0x90>)
 800f83e:	7a5b      	ldrb	r3, [r3, #9]
 800f840:	b2db      	uxtb	r3, r3
 800f842:	461a      	mov	r2, r3
 800f844:	4b19      	ldr	r3, [pc, #100]	; (800f8ac <FATFS_LinkDriverEx+0x90>)
 800f846:	2100      	movs	r1, #0
 800f848:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f84a:	4b18      	ldr	r3, [pc, #96]	; (800f8ac <FATFS_LinkDriverEx+0x90>)
 800f84c:	7a5b      	ldrb	r3, [r3, #9]
 800f84e:	b2db      	uxtb	r3, r3
 800f850:	4a16      	ldr	r2, [pc, #88]	; (800f8ac <FATFS_LinkDriverEx+0x90>)
 800f852:	009b      	lsls	r3, r3, #2
 800f854:	4413      	add	r3, r2
 800f856:	68fa      	ldr	r2, [r7, #12]
 800f858:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f85a:	4b14      	ldr	r3, [pc, #80]	; (800f8ac <FATFS_LinkDriverEx+0x90>)
 800f85c:	7a5b      	ldrb	r3, [r3, #9]
 800f85e:	b2db      	uxtb	r3, r3
 800f860:	461a      	mov	r2, r3
 800f862:	4b12      	ldr	r3, [pc, #72]	; (800f8ac <FATFS_LinkDriverEx+0x90>)
 800f864:	4413      	add	r3, r2
 800f866:	79fa      	ldrb	r2, [r7, #7]
 800f868:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f86a:	4b10      	ldr	r3, [pc, #64]	; (800f8ac <FATFS_LinkDriverEx+0x90>)
 800f86c:	7a5b      	ldrb	r3, [r3, #9]
 800f86e:	b2db      	uxtb	r3, r3
 800f870:	1c5a      	adds	r2, r3, #1
 800f872:	b2d1      	uxtb	r1, r2
 800f874:	4a0d      	ldr	r2, [pc, #52]	; (800f8ac <FATFS_LinkDriverEx+0x90>)
 800f876:	7251      	strb	r1, [r2, #9]
 800f878:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f87a:	7dbb      	ldrb	r3, [r7, #22]
 800f87c:	3330      	adds	r3, #48	; 0x30
 800f87e:	b2da      	uxtb	r2, r3
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	3301      	adds	r3, #1
 800f888:	223a      	movs	r2, #58	; 0x3a
 800f88a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f88c:	68bb      	ldr	r3, [r7, #8]
 800f88e:	3302      	adds	r3, #2
 800f890:	222f      	movs	r2, #47	; 0x2f
 800f892:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	3303      	adds	r3, #3
 800f898:	2200      	movs	r2, #0
 800f89a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f89c:	2300      	movs	r3, #0
 800f89e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f8a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	371c      	adds	r7, #28
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bc80      	pop	{r7}
 800f8aa:	4770      	bx	lr
 800f8ac:	20000134 	.word	0x20000134

0800f8b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b082      	sub	sp, #8
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
 800f8b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	6839      	ldr	r1, [r7, #0]
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f7ff ffac 	bl	800f81c <FATFS_LinkDriverEx>
 800f8c4:	4603      	mov	r3, r0
}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	3708      	adds	r7, #8
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
	...

0800f8d0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800f8d4:	2201      	movs	r2, #1
 800f8d6:	490e      	ldr	r1, [pc, #56]	; (800f910 <MX_USB_HOST_Init+0x40>)
 800f8d8:	480e      	ldr	r0, [pc, #56]	; (800f914 <MX_USB_HOST_Init+0x44>)
 800f8da:	f7fc f977 	bl	800bbcc <USBH_Init>
 800f8de:	4603      	mov	r3, r0
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d001      	beq.n	800f8e8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f8e4:	f7f4 fc20 	bl	8004128 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800f8e8:	490b      	ldr	r1, [pc, #44]	; (800f918 <MX_USB_HOST_Init+0x48>)
 800f8ea:	480a      	ldr	r0, [pc, #40]	; (800f914 <MX_USB_HOST_Init+0x44>)
 800f8ec:	f7fc f9fc 	bl	800bce8 <USBH_RegisterClass>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d001      	beq.n	800f8fa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f8f6:	f7f4 fc17 	bl	8004128 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800f8fa:	4806      	ldr	r0, [pc, #24]	; (800f914 <MX_USB_HOST_Init+0x44>)
 800f8fc:	f7fc fa7e 	bl	800bdfc <USBH_Start>
 800f900:	4603      	mov	r3, r0
 800f902:	2b00      	cmp	r3, #0
 800f904:	d001      	beq.n	800f90a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f906:	f7f4 fc0f 	bl	8004128 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f90a:	bf00      	nop
 800f90c:	bd80      	pop	{r7, pc}
 800f90e:	bf00      	nop
 800f910:	0800f931 	.word	0x0800f931
 800f914:	2000532c 	.word	0x2000532c
 800f918:	2000000c 	.word	0x2000000c

0800f91c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800f920:	4802      	ldr	r0, [pc, #8]	; (800f92c <MX_USB_HOST_Process+0x10>)
 800f922:	f7fc fa7b 	bl	800be1c <USBH_Process>
}
 800f926:	bf00      	nop
 800f928:	bd80      	pop	{r7, pc}
 800f92a:	bf00      	nop
 800f92c:	2000532c 	.word	0x2000532c

0800f930 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f930:	b480      	push	{r7}
 800f932:	b083      	sub	sp, #12
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
 800f938:	460b      	mov	r3, r1
 800f93a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f93c:	78fb      	ldrb	r3, [r7, #3]
 800f93e:	3b01      	subs	r3, #1
 800f940:	2b04      	cmp	r3, #4
 800f942:	d819      	bhi.n	800f978 <USBH_UserProcess+0x48>
 800f944:	a201      	add	r2, pc, #4	; (adr r2, 800f94c <USBH_UserProcess+0x1c>)
 800f946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f94a:	bf00      	nop
 800f94c:	0800f979 	.word	0x0800f979
 800f950:	0800f969 	.word	0x0800f969
 800f954:	0800f979 	.word	0x0800f979
 800f958:	0800f971 	.word	0x0800f971
 800f95c:	0800f961 	.word	0x0800f961
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f960:	4b08      	ldr	r3, [pc, #32]	; (800f984 <USBH_UserProcess+0x54>)
 800f962:	2203      	movs	r2, #3
 800f964:	701a      	strb	r2, [r3, #0]
  break;
 800f966:	e008      	b.n	800f97a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f968:	4b06      	ldr	r3, [pc, #24]	; (800f984 <USBH_UserProcess+0x54>)
 800f96a:	2202      	movs	r2, #2
 800f96c:	701a      	strb	r2, [r3, #0]
  break;
 800f96e:	e004      	b.n	800f97a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f970:	4b04      	ldr	r3, [pc, #16]	; (800f984 <USBH_UserProcess+0x54>)
 800f972:	2201      	movs	r2, #1
 800f974:	701a      	strb	r2, [r3, #0]
  break;
 800f976:	e000      	b.n	800f97a <USBH_UserProcess+0x4a>

  default:
  break;
 800f978:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f97a:	bf00      	nop
 800f97c:	370c      	adds	r7, #12
 800f97e:	46bd      	mov	sp, r7
 800f980:	bc80      	pop	{r7}
 800f982:	4770      	bx	lr
 800f984:	20000140 	.word	0x20000140

0800f988 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b08a      	sub	sp, #40	; 0x28
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f990:	f107 0314 	add.w	r3, r7, #20
 800f994:	2200      	movs	r2, #0
 800f996:	601a      	str	r2, [r3, #0]
 800f998:	605a      	str	r2, [r3, #4]
 800f99a:	609a      	str	r2, [r3, #8]
 800f99c:	60da      	str	r2, [r3, #12]
 800f99e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f9a8:	d147      	bne.n	800fa3a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	613b      	str	r3, [r7, #16]
 800f9ae:	4b25      	ldr	r3, [pc, #148]	; (800fa44 <HAL_HCD_MspInit+0xbc>)
 800f9b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9b2:	4a24      	ldr	r2, [pc, #144]	; (800fa44 <HAL_HCD_MspInit+0xbc>)
 800f9b4:	f043 0301 	orr.w	r3, r3, #1
 800f9b8:	6313      	str	r3, [r2, #48]	; 0x30
 800f9ba:	4b22      	ldr	r3, [pc, #136]	; (800fa44 <HAL_HCD_MspInit+0xbc>)
 800f9bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9be:	f003 0301 	and.w	r3, r3, #1
 800f9c2:	613b      	str	r3, [r7, #16]
 800f9c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f9c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f9ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f9d4:	f107 0314 	add.w	r3, r7, #20
 800f9d8:	4619      	mov	r1, r3
 800f9da:	481b      	ldr	r0, [pc, #108]	; (800fa48 <HAL_HCD_MspInit+0xc0>)
 800f9dc:	f7f5 fab2 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f9e0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f9e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f9e6:	2302      	movs	r3, #2
 800f9e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f9ee:	2303      	movs	r3, #3
 800f9f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f9f2:	230a      	movs	r3, #10
 800f9f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f9f6:	f107 0314 	add.w	r3, r7, #20
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	4812      	ldr	r0, [pc, #72]	; (800fa48 <HAL_HCD_MspInit+0xc0>)
 800f9fe:	f7f5 faa1 	bl	8004f44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fa02:	4b10      	ldr	r3, [pc, #64]	; (800fa44 <HAL_HCD_MspInit+0xbc>)
 800fa04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa06:	4a0f      	ldr	r2, [pc, #60]	; (800fa44 <HAL_HCD_MspInit+0xbc>)
 800fa08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa0c:	6353      	str	r3, [r2, #52]	; 0x34
 800fa0e:	2300      	movs	r3, #0
 800fa10:	60fb      	str	r3, [r7, #12]
 800fa12:	4b0c      	ldr	r3, [pc, #48]	; (800fa44 <HAL_HCD_MspInit+0xbc>)
 800fa14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa16:	4a0b      	ldr	r2, [pc, #44]	; (800fa44 <HAL_HCD_MspInit+0xbc>)
 800fa18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fa1c:	6453      	str	r3, [r2, #68]	; 0x44
 800fa1e:	4b09      	ldr	r3, [pc, #36]	; (800fa44 <HAL_HCD_MspInit+0xbc>)
 800fa20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fa26:	60fb      	str	r3, [r7, #12]
 800fa28:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	2100      	movs	r1, #0
 800fa2e:	2043      	movs	r0, #67	; 0x43
 800fa30:	f7f4 fec9 	bl	80047c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fa34:	2043      	movs	r0, #67	; 0x43
 800fa36:	f7f4 fee2 	bl	80047fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fa3a:	bf00      	nop
 800fa3c:	3728      	adds	r7, #40	; 0x28
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd80      	pop	{r7, pc}
 800fa42:	bf00      	nop
 800fa44:	40023800 	.word	0x40023800
 800fa48:	40020000 	.word	0x40020000

0800fa4c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b082      	sub	sp, #8
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f7fc fdb2 	bl	800c5c4 <USBH_LL_IncTimer>
}
 800fa60:	bf00      	nop
 800fa62:	3708      	adds	r7, #8
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}

0800fa68 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b082      	sub	sp, #8
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fa76:	4618      	mov	r0, r3
 800fa78:	f7fc fde8 	bl	800c64c <USBH_LL_Connect>
}
 800fa7c:	bf00      	nop
 800fa7e:	3708      	adds	r7, #8
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}

0800fa84 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b082      	sub	sp, #8
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7fc fdf0 	bl	800c678 <USBH_LL_Disconnect>
}
 800fa98:	bf00      	nop
 800fa9a:	3708      	adds	r7, #8
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}

0800faa0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800faa0:	b480      	push	{r7}
 800faa2:	b083      	sub	sp, #12
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	460b      	mov	r3, r1
 800faaa:	70fb      	strb	r3, [r7, #3]
 800faac:	4613      	mov	r3, r2
 800faae:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800fab0:	bf00      	nop
 800fab2:	370c      	adds	r7, #12
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bc80      	pop	{r7}
 800fab8:	4770      	bx	lr

0800faba <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800faba:	b580      	push	{r7, lr}
 800fabc:	b082      	sub	sp, #8
 800fabe:	af00      	add	r7, sp, #0
 800fac0:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fac8:	4618      	mov	r0, r3
 800faca:	f7fc fda5 	bl	800c618 <USBH_LL_PortEnabled>
}
 800face:	bf00      	nop
 800fad0:	3708      	adds	r7, #8
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}

0800fad6 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800fad6:	b580      	push	{r7, lr}
 800fad8:	b082      	sub	sp, #8
 800fada:	af00      	add	r7, sp, #0
 800fadc:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fae4:	4618      	mov	r0, r3
 800fae6:	f7fc fda4 	bl	800c632 <USBH_LL_PortDisabled>
}
 800faea:	bf00      	nop
 800faec:	3708      	adds	r7, #8
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}
	...

0800faf4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b082      	sub	sp, #8
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800fb02:	2b01      	cmp	r3, #1
 800fb04:	d12a      	bne.n	800fb5c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800fb06:	4a18      	ldr	r2, [pc, #96]	; (800fb68 <USBH_LL_Init+0x74>)
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	4a15      	ldr	r2, [pc, #84]	; (800fb68 <USBH_LL_Init+0x74>)
 800fb12:	f8c3 25d0 	str.w	r2, [r3, #1488]	; 0x5d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fb16:	4b14      	ldr	r3, [pc, #80]	; (800fb68 <USBH_LL_Init+0x74>)
 800fb18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fb1c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800fb1e:	4b12      	ldr	r3, [pc, #72]	; (800fb68 <USBH_LL_Init+0x74>)
 800fb20:	2208      	movs	r2, #8
 800fb22:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800fb24:	4b10      	ldr	r3, [pc, #64]	; (800fb68 <USBH_LL_Init+0x74>)
 800fb26:	2201      	movs	r2, #1
 800fb28:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fb2a:	4b0f      	ldr	r3, [pc, #60]	; (800fb68 <USBH_LL_Init+0x74>)
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800fb30:	4b0d      	ldr	r3, [pc, #52]	; (800fb68 <USBH_LL_Init+0x74>)
 800fb32:	2202      	movs	r2, #2
 800fb34:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fb36:	4b0c      	ldr	r3, [pc, #48]	; (800fb68 <USBH_LL_Init+0x74>)
 800fb38:	2200      	movs	r2, #0
 800fb3a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800fb3c:	480a      	ldr	r0, [pc, #40]	; (800fb68 <USBH_LL_Init+0x74>)
 800fb3e:	f7f5 fbb3 	bl	80052a8 <HAL_HCD_Init>
 800fb42:	4603      	mov	r3, r0
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d001      	beq.n	800fb4c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800fb48:	f7f4 faee 	bl	8004128 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800fb4c:	4806      	ldr	r0, [pc, #24]	; (800fb68 <USBH_LL_Init+0x74>)
 800fb4e:	f7f5 ff94 	bl	8005a7a <HAL_HCD_GetCurrentFrame>
 800fb52:	4603      	mov	r3, r0
 800fb54:	4619      	mov	r1, r3
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f7fc fd26 	bl	800c5a8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800fb5c:	2300      	movs	r3, #0
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3708      	adds	r7, #8
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}
 800fb66:	bf00      	nop
 800fb68:	20005904 	.word	0x20005904

0800fb6c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b084      	sub	sp, #16
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb74:	2300      	movs	r3, #0
 800fb76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fb78:	2300      	movs	r3, #0
 800fb7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f8d3 35d0 	ldr.w	r3, [r3, #1488]	; 0x5d0
 800fb82:	4618      	mov	r0, r3
 800fb84:	f7f5 ff05 	bl	8005992 <HAL_HCD_Start>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fb8c:	7bfb      	ldrb	r3, [r7, #15]
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f000 f98a 	bl	800fea8 <USBH_Get_USB_Status>
 800fb94:	4603      	mov	r3, r0
 800fb96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb98:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	3710      	adds	r7, #16
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}

0800fba2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800fba2:	b580      	push	{r7, lr}
 800fba4:	b084      	sub	sp, #16
 800fba6:	af00      	add	r7, sp, #0
 800fba8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f8d3 35d0 	ldr.w	r3, [r3, #1488]	; 0x5d0
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f7f5 ff0d 	bl	80059d8 <HAL_HCD_Stop>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fbc2:	7bfb      	ldrb	r3, [r7, #15]
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f000 f96f 	bl	800fea8 <USBH_Get_USB_Status>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbce:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	3710      	adds	r7, #16
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}

0800fbd8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b084      	sub	sp, #16
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f8d3 35d0 	ldr.w	r3, [r3, #1488]	; 0x5d0
 800fbea:	4618      	mov	r0, r3
 800fbec:	f7f5 ff53 	bl	8005a96 <HAL_HCD_GetCurrentSpeed>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	2b02      	cmp	r3, #2
 800fbf4:	d00c      	beq.n	800fc10 <USBH_LL_GetSpeed+0x38>
 800fbf6:	2b02      	cmp	r3, #2
 800fbf8:	d80d      	bhi.n	800fc16 <USBH_LL_GetSpeed+0x3e>
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d002      	beq.n	800fc04 <USBH_LL_GetSpeed+0x2c>
 800fbfe:	2b01      	cmp	r3, #1
 800fc00:	d003      	beq.n	800fc0a <USBH_LL_GetSpeed+0x32>
 800fc02:	e008      	b.n	800fc16 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800fc04:	2300      	movs	r3, #0
 800fc06:	73fb      	strb	r3, [r7, #15]
    break;
 800fc08:	e008      	b.n	800fc1c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800fc0a:	2301      	movs	r3, #1
 800fc0c:	73fb      	strb	r3, [r7, #15]
    break;
 800fc0e:	e005      	b.n	800fc1c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800fc10:	2302      	movs	r3, #2
 800fc12:	73fb      	strb	r3, [r7, #15]
    break;
 800fc14:	e002      	b.n	800fc1c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800fc16:	2301      	movs	r3, #1
 800fc18:	73fb      	strb	r3, [r7, #15]
    break;
 800fc1a:	bf00      	nop
  }
  return  speed;
 800fc1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3710      	adds	r7, #16
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}

0800fc26 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800fc26:	b580      	push	{r7, lr}
 800fc28:	b084      	sub	sp, #16
 800fc2a:	af00      	add	r7, sp, #0
 800fc2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fc32:	2300      	movs	r3, #0
 800fc34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	f8d3 35d0 	ldr.w	r3, [r3, #1488]	; 0x5d0
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f7f5 fee8 	bl	8005a12 <HAL_HCD_ResetPort>
 800fc42:	4603      	mov	r3, r0
 800fc44:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fc46:	7bfb      	ldrb	r3, [r7, #15]
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f000 f92d 	bl	800fea8 <USBH_Get_USB_Status>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc52:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc54:	4618      	mov	r0, r3
 800fc56:	3710      	adds	r7, #16
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}

0800fc5c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b082      	sub	sp, #8
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	460b      	mov	r3, r1
 800fc66:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f8d3 35d0 	ldr.w	r3, [r3, #1488]	; 0x5d0
 800fc6e:	78fa      	ldrb	r2, [r7, #3]
 800fc70:	4611      	mov	r1, r2
 800fc72:	4618      	mov	r0, r3
 800fc74:	f7f5 feee 	bl	8005a54 <HAL_HCD_HC_GetXferCount>
 800fc78:	4603      	mov	r3, r0
}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	3708      	adds	r7, #8
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}

0800fc82 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800fc82:	b590      	push	{r4, r7, lr}
 800fc84:	b089      	sub	sp, #36	; 0x24
 800fc86:	af04      	add	r7, sp, #16
 800fc88:	6078      	str	r0, [r7, #4]
 800fc8a:	4608      	mov	r0, r1
 800fc8c:	4611      	mov	r1, r2
 800fc8e:	461a      	mov	r2, r3
 800fc90:	4603      	mov	r3, r0
 800fc92:	70fb      	strb	r3, [r7, #3]
 800fc94:	460b      	mov	r3, r1
 800fc96:	70bb      	strb	r3, [r7, #2]
 800fc98:	4613      	mov	r3, r2
 800fc9a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fca0:	2300      	movs	r3, #0
 800fca2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f8d3 05d0 	ldr.w	r0, [r3, #1488]	; 0x5d0
 800fcaa:	787c      	ldrb	r4, [r7, #1]
 800fcac:	78ba      	ldrb	r2, [r7, #2]
 800fcae:	78f9      	ldrb	r1, [r7, #3]
 800fcb0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fcb2:	9302      	str	r3, [sp, #8]
 800fcb4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fcb8:	9301      	str	r3, [sp, #4]
 800fcba:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fcbe:	9300      	str	r3, [sp, #0]
 800fcc0:	4623      	mov	r3, r4
 800fcc2:	f7f5 fb53 	bl	800536c <HAL_HCD_HC_Init>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800fcca:	7bfb      	ldrb	r3, [r7, #15]
 800fccc:	4618      	mov	r0, r3
 800fcce:	f000 f8eb 	bl	800fea8 <USBH_Get_USB_Status>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fcd6:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcd8:	4618      	mov	r0, r3
 800fcda:	3714      	adds	r7, #20
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd90      	pop	{r4, r7, pc}

0800fce0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b084      	sub	sp, #16
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
 800fce8:	460b      	mov	r3, r1
 800fcea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcec:	2300      	movs	r3, #0
 800fcee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f8d3 35d0 	ldr.w	r3, [r3, #1488]	; 0x5d0
 800fcfa:	78fa      	ldrb	r2, [r7, #3]
 800fcfc:	4611      	mov	r1, r2
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f7f5 fbc3 	bl	800548a <HAL_HCD_HC_Halt>
 800fd04:	4603      	mov	r3, r0
 800fd06:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fd08:	7bfb      	ldrb	r3, [r7, #15]
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f000 f8cc 	bl	800fea8 <USBH_Get_USB_Status>
 800fd10:	4603      	mov	r3, r0
 800fd12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd14:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	3710      	adds	r7, #16
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}

0800fd1e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800fd1e:	b590      	push	{r4, r7, lr}
 800fd20:	b089      	sub	sp, #36	; 0x24
 800fd22:	af04      	add	r7, sp, #16
 800fd24:	6078      	str	r0, [r7, #4]
 800fd26:	4608      	mov	r0, r1
 800fd28:	4611      	mov	r1, r2
 800fd2a:	461a      	mov	r2, r3
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	70fb      	strb	r3, [r7, #3]
 800fd30:	460b      	mov	r3, r1
 800fd32:	70bb      	strb	r3, [r7, #2]
 800fd34:	4613      	mov	r3, r2
 800fd36:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd38:	2300      	movs	r3, #0
 800fd3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	f8d3 05d0 	ldr.w	r0, [r3, #1488]	; 0x5d0
 800fd46:	787c      	ldrb	r4, [r7, #1]
 800fd48:	78ba      	ldrb	r2, [r7, #2]
 800fd4a:	78f9      	ldrb	r1, [r7, #3]
 800fd4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fd50:	9303      	str	r3, [sp, #12]
 800fd52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fd54:	9302      	str	r3, [sp, #8]
 800fd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd58:	9301      	str	r3, [sp, #4]
 800fd5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fd5e:	9300      	str	r3, [sp, #0]
 800fd60:	4623      	mov	r3, r4
 800fd62:	f7f5 fbb5 	bl	80054d0 <HAL_HCD_HC_SubmitRequest>
 800fd66:	4603      	mov	r3, r0
 800fd68:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800fd6a:	7bfb      	ldrb	r3, [r7, #15]
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	f000 f89b 	bl	800fea8 <USBH_Get_USB_Status>
 800fd72:	4603      	mov	r3, r0
 800fd74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd76:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd78:	4618      	mov	r0, r3
 800fd7a:	3714      	adds	r7, #20
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd90      	pop	{r4, r7, pc}

0800fd80 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b082      	sub	sp, #8
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
 800fd88:	460b      	mov	r3, r1
 800fd8a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	f8d3 35d0 	ldr.w	r3, [r3, #1488]	; 0x5d0
 800fd92:	78fa      	ldrb	r2, [r7, #3]
 800fd94:	4611      	mov	r1, r2
 800fd96:	4618      	mov	r0, r3
 800fd98:	f7f5 fe49 	bl	8005a2e <HAL_HCD_HC_GetURBState>
 800fd9c:	4603      	mov	r3, r0
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3708      	adds	r7, #8
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}

0800fda6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800fda6:	b580      	push	{r7, lr}
 800fda8:	b082      	sub	sp, #8
 800fdaa:	af00      	add	r7, sp, #0
 800fdac:	6078      	str	r0, [r7, #4]
 800fdae:	460b      	mov	r3, r1
 800fdb0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800fdb8:	2b01      	cmp	r3, #1
 800fdba:	d103      	bne.n	800fdc4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800fdbc:	78fb      	ldrb	r3, [r7, #3]
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f000 f89e 	bl	800ff00 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800fdc4:	20c8      	movs	r0, #200	; 0xc8
 800fdc6:	f7f4 fc03 	bl	80045d0 <HAL_Delay>
  return USBH_OK;
 800fdca:	2300      	movs	r3, #0
}
 800fdcc:	4618      	mov	r0, r3
 800fdce:	3708      	adds	r7, #8
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd80      	pop	{r7, pc}

0800fdd4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800fdd4:	b480      	push	{r7}
 800fdd6:	b085      	sub	sp, #20
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
 800fddc:	460b      	mov	r3, r1
 800fdde:	70fb      	strb	r3, [r7, #3]
 800fde0:	4613      	mov	r3, r2
 800fde2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	f8d3 35d0 	ldr.w	r3, [r3, #1488]	; 0x5d0
 800fdea:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800fdec:	78fb      	ldrb	r3, [r7, #3]
 800fdee:	68fa      	ldr	r2, [r7, #12]
 800fdf0:	212c      	movs	r1, #44	; 0x2c
 800fdf2:	fb01 f303 	mul.w	r3, r1, r3
 800fdf6:	4413      	add	r3, r2
 800fdf8:	333b      	adds	r3, #59	; 0x3b
 800fdfa:	781b      	ldrb	r3, [r3, #0]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d009      	beq.n	800fe14 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800fe00:	78fb      	ldrb	r3, [r7, #3]
 800fe02:	68fa      	ldr	r2, [r7, #12]
 800fe04:	212c      	movs	r1, #44	; 0x2c
 800fe06:	fb01 f303 	mul.w	r3, r1, r3
 800fe0a:	4413      	add	r3, r2
 800fe0c:	3354      	adds	r3, #84	; 0x54
 800fe0e:	78ba      	ldrb	r2, [r7, #2]
 800fe10:	701a      	strb	r2, [r3, #0]
 800fe12:	e008      	b.n	800fe26 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800fe14:	78fb      	ldrb	r3, [r7, #3]
 800fe16:	68fa      	ldr	r2, [r7, #12]
 800fe18:	212c      	movs	r1, #44	; 0x2c
 800fe1a:	fb01 f303 	mul.w	r3, r1, r3
 800fe1e:	4413      	add	r3, r2
 800fe20:	3355      	adds	r3, #85	; 0x55
 800fe22:	78ba      	ldrb	r2, [r7, #2]
 800fe24:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800fe26:	2300      	movs	r3, #0
}
 800fe28:	4618      	mov	r0, r3
 800fe2a:	3714      	adds	r7, #20
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bc80      	pop	{r7}
 800fe30:	4770      	bx	lr

0800fe32 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fe32:	b480      	push	{r7}
 800fe34:	b085      	sub	sp, #20
 800fe36:	af00      	add	r7, sp, #0
 800fe38:	6078      	str	r0, [r7, #4]
 800fe3a:	460b      	mov	r3, r1
 800fe3c:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	f8d3 35d0 	ldr.w	r3, [r3, #1488]	; 0x5d0
 800fe48:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800fe4a:	78fb      	ldrb	r3, [r7, #3]
 800fe4c:	68ba      	ldr	r2, [r7, #8]
 800fe4e:	212c      	movs	r1, #44	; 0x2c
 800fe50:	fb01 f303 	mul.w	r3, r1, r3
 800fe54:	4413      	add	r3, r2
 800fe56:	333b      	adds	r3, #59	; 0x3b
 800fe58:	781b      	ldrb	r3, [r3, #0]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d009      	beq.n	800fe72 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800fe5e:	78fb      	ldrb	r3, [r7, #3]
 800fe60:	68ba      	ldr	r2, [r7, #8]
 800fe62:	212c      	movs	r1, #44	; 0x2c
 800fe64:	fb01 f303 	mul.w	r3, r1, r3
 800fe68:	4413      	add	r3, r2
 800fe6a:	3354      	adds	r3, #84	; 0x54
 800fe6c:	781b      	ldrb	r3, [r3, #0]
 800fe6e:	73fb      	strb	r3, [r7, #15]
 800fe70:	e008      	b.n	800fe84 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800fe72:	78fb      	ldrb	r3, [r7, #3]
 800fe74:	68ba      	ldr	r2, [r7, #8]
 800fe76:	212c      	movs	r1, #44	; 0x2c
 800fe78:	fb01 f303 	mul.w	r3, r1, r3
 800fe7c:	4413      	add	r3, r2
 800fe7e:	3355      	adds	r3, #85	; 0x55
 800fe80:	781b      	ldrb	r3, [r3, #0]
 800fe82:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800fe84:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	3714      	adds	r7, #20
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bc80      	pop	{r7}
 800fe8e:	4770      	bx	lr

0800fe90 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b082      	sub	sp, #8
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f7f4 fb99 	bl	80045d0 <HAL_Delay>
}
 800fe9e:	bf00      	nop
 800fea0:	3708      	adds	r7, #8
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bd80      	pop	{r7, pc}
	...

0800fea8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fea8:	b480      	push	{r7}
 800feaa:	b085      	sub	sp, #20
 800feac:	af00      	add	r7, sp, #0
 800feae:	4603      	mov	r3, r0
 800feb0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800feb2:	2300      	movs	r3, #0
 800feb4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800feb6:	79fb      	ldrb	r3, [r7, #7]
 800feb8:	2b03      	cmp	r3, #3
 800feba:	d817      	bhi.n	800feec <USBH_Get_USB_Status+0x44>
 800febc:	a201      	add	r2, pc, #4	; (adr r2, 800fec4 <USBH_Get_USB_Status+0x1c>)
 800febe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fec2:	bf00      	nop
 800fec4:	0800fed5 	.word	0x0800fed5
 800fec8:	0800fedb 	.word	0x0800fedb
 800fecc:	0800fee1 	.word	0x0800fee1
 800fed0:	0800fee7 	.word	0x0800fee7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800fed4:	2300      	movs	r3, #0
 800fed6:	73fb      	strb	r3, [r7, #15]
    break;
 800fed8:	e00b      	b.n	800fef2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800feda:	2302      	movs	r3, #2
 800fedc:	73fb      	strb	r3, [r7, #15]
    break;
 800fede:	e008      	b.n	800fef2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800fee0:	2301      	movs	r3, #1
 800fee2:	73fb      	strb	r3, [r7, #15]
    break;
 800fee4:	e005      	b.n	800fef2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800fee6:	2302      	movs	r3, #2
 800fee8:	73fb      	strb	r3, [r7, #15]
    break;
 800feea:	e002      	b.n	800fef2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800feec:	2302      	movs	r3, #2
 800feee:	73fb      	strb	r3, [r7, #15]
    break;
 800fef0:	bf00      	nop
  }
  return usb_status;
 800fef2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fef4:	4618      	mov	r0, r3
 800fef6:	3714      	adds	r7, #20
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bc80      	pop	{r7}
 800fefc:	4770      	bx	lr
 800fefe:	bf00      	nop

0800ff00 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b084      	sub	sp, #16
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	4603      	mov	r3, r0
 800ff08:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ff0a:	79fb      	ldrb	r3, [r7, #7]
 800ff0c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ff0e:	79fb      	ldrb	r3, [r7, #7]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d102      	bne.n	800ff1a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ff14:	2301      	movs	r3, #1
 800ff16:	73fb      	strb	r3, [r7, #15]
 800ff18:	e001      	b.n	800ff1e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ff1e:	7bfb      	ldrb	r3, [r7, #15]
 800ff20:	461a      	mov	r2, r3
 800ff22:	2101      	movs	r1, #1
 800ff24:	4803      	ldr	r0, [pc, #12]	; (800ff34 <MX_DriverVbusFS+0x34>)
 800ff26:	f7f5 f9a7 	bl	8005278 <HAL_GPIO_WritePin>
}
 800ff2a:	bf00      	nop
 800ff2c:	3710      	adds	r7, #16
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}
 800ff32:	bf00      	nop
 800ff34:	40020800 	.word	0x40020800

0800ff38 <__errno>:
 800ff38:	4b01      	ldr	r3, [pc, #4]	; (800ff40 <__errno+0x8>)
 800ff3a:	6818      	ldr	r0, [r3, #0]
 800ff3c:	4770      	bx	lr
 800ff3e:	bf00      	nop
 800ff40:	2000002c 	.word	0x2000002c

0800ff44 <__libc_init_array>:
 800ff44:	b570      	push	{r4, r5, r6, lr}
 800ff46:	4d0d      	ldr	r5, [pc, #52]	; (800ff7c <__libc_init_array+0x38>)
 800ff48:	4c0d      	ldr	r4, [pc, #52]	; (800ff80 <__libc_init_array+0x3c>)
 800ff4a:	1b64      	subs	r4, r4, r5
 800ff4c:	10a4      	asrs	r4, r4, #2
 800ff4e:	2600      	movs	r6, #0
 800ff50:	42a6      	cmp	r6, r4
 800ff52:	d109      	bne.n	800ff68 <__libc_init_array+0x24>
 800ff54:	4d0b      	ldr	r5, [pc, #44]	; (800ff84 <__libc_init_array+0x40>)
 800ff56:	4c0c      	ldr	r4, [pc, #48]	; (800ff88 <__libc_init_array+0x44>)
 800ff58:	f000 f904 	bl	8010164 <_init>
 800ff5c:	1b64      	subs	r4, r4, r5
 800ff5e:	10a4      	asrs	r4, r4, #2
 800ff60:	2600      	movs	r6, #0
 800ff62:	42a6      	cmp	r6, r4
 800ff64:	d105      	bne.n	800ff72 <__libc_init_array+0x2e>
 800ff66:	bd70      	pop	{r4, r5, r6, pc}
 800ff68:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff6c:	4798      	blx	r3
 800ff6e:	3601      	adds	r6, #1
 800ff70:	e7ee      	b.n	800ff50 <__libc_init_array+0xc>
 800ff72:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff76:	4798      	blx	r3
 800ff78:	3601      	adds	r6, #1
 800ff7a:	e7f2      	b.n	800ff62 <__libc_init_array+0x1e>
 800ff7c:	08011ce0 	.word	0x08011ce0
 800ff80:	08011ce0 	.word	0x08011ce0
 800ff84:	08011ce0 	.word	0x08011ce0
 800ff88:	08011ce4 	.word	0x08011ce4

0800ff8c <malloc>:
 800ff8c:	4b02      	ldr	r3, [pc, #8]	; (800ff98 <malloc+0xc>)
 800ff8e:	4601      	mov	r1, r0
 800ff90:	6818      	ldr	r0, [r3, #0]
 800ff92:	f000 b86f 	b.w	8010074 <_malloc_r>
 800ff96:	bf00      	nop
 800ff98:	2000002c 	.word	0x2000002c

0800ff9c <free>:
 800ff9c:	4b02      	ldr	r3, [pc, #8]	; (800ffa8 <free+0xc>)
 800ff9e:	4601      	mov	r1, r0
 800ffa0:	6818      	ldr	r0, [r3, #0]
 800ffa2:	f000 b819 	b.w	800ffd8 <_free_r>
 800ffa6:	bf00      	nop
 800ffa8:	2000002c 	.word	0x2000002c

0800ffac <memcpy>:
 800ffac:	440a      	add	r2, r1
 800ffae:	4291      	cmp	r1, r2
 800ffb0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ffb4:	d100      	bne.n	800ffb8 <memcpy+0xc>
 800ffb6:	4770      	bx	lr
 800ffb8:	b510      	push	{r4, lr}
 800ffba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ffc2:	4291      	cmp	r1, r2
 800ffc4:	d1f9      	bne.n	800ffba <memcpy+0xe>
 800ffc6:	bd10      	pop	{r4, pc}

0800ffc8 <memset>:
 800ffc8:	4402      	add	r2, r0
 800ffca:	4603      	mov	r3, r0
 800ffcc:	4293      	cmp	r3, r2
 800ffce:	d100      	bne.n	800ffd2 <memset+0xa>
 800ffd0:	4770      	bx	lr
 800ffd2:	f803 1b01 	strb.w	r1, [r3], #1
 800ffd6:	e7f9      	b.n	800ffcc <memset+0x4>

0800ffd8 <_free_r>:
 800ffd8:	b538      	push	{r3, r4, r5, lr}
 800ffda:	4605      	mov	r5, r0
 800ffdc:	2900      	cmp	r1, #0
 800ffde:	d045      	beq.n	801006c <_free_r+0x94>
 800ffe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ffe4:	1f0c      	subs	r4, r1, #4
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	bfb8      	it	lt
 800ffea:	18e4      	addlt	r4, r4, r3
 800ffec:	f000 f8ac 	bl	8010148 <__malloc_lock>
 800fff0:	4a1f      	ldr	r2, [pc, #124]	; (8010070 <_free_r+0x98>)
 800fff2:	6813      	ldr	r3, [r2, #0]
 800fff4:	4610      	mov	r0, r2
 800fff6:	b933      	cbnz	r3, 8010006 <_free_r+0x2e>
 800fff8:	6063      	str	r3, [r4, #4]
 800fffa:	6014      	str	r4, [r2, #0]
 800fffc:	4628      	mov	r0, r5
 800fffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010002:	f000 b8a7 	b.w	8010154 <__malloc_unlock>
 8010006:	42a3      	cmp	r3, r4
 8010008:	d90b      	bls.n	8010022 <_free_r+0x4a>
 801000a:	6821      	ldr	r1, [r4, #0]
 801000c:	1862      	adds	r2, r4, r1
 801000e:	4293      	cmp	r3, r2
 8010010:	bf04      	itt	eq
 8010012:	681a      	ldreq	r2, [r3, #0]
 8010014:	685b      	ldreq	r3, [r3, #4]
 8010016:	6063      	str	r3, [r4, #4]
 8010018:	bf04      	itt	eq
 801001a:	1852      	addeq	r2, r2, r1
 801001c:	6022      	streq	r2, [r4, #0]
 801001e:	6004      	str	r4, [r0, #0]
 8010020:	e7ec      	b.n	800fffc <_free_r+0x24>
 8010022:	461a      	mov	r2, r3
 8010024:	685b      	ldr	r3, [r3, #4]
 8010026:	b10b      	cbz	r3, 801002c <_free_r+0x54>
 8010028:	42a3      	cmp	r3, r4
 801002a:	d9fa      	bls.n	8010022 <_free_r+0x4a>
 801002c:	6811      	ldr	r1, [r2, #0]
 801002e:	1850      	adds	r0, r2, r1
 8010030:	42a0      	cmp	r0, r4
 8010032:	d10b      	bne.n	801004c <_free_r+0x74>
 8010034:	6820      	ldr	r0, [r4, #0]
 8010036:	4401      	add	r1, r0
 8010038:	1850      	adds	r0, r2, r1
 801003a:	4283      	cmp	r3, r0
 801003c:	6011      	str	r1, [r2, #0]
 801003e:	d1dd      	bne.n	800fffc <_free_r+0x24>
 8010040:	6818      	ldr	r0, [r3, #0]
 8010042:	685b      	ldr	r3, [r3, #4]
 8010044:	6053      	str	r3, [r2, #4]
 8010046:	4401      	add	r1, r0
 8010048:	6011      	str	r1, [r2, #0]
 801004a:	e7d7      	b.n	800fffc <_free_r+0x24>
 801004c:	d902      	bls.n	8010054 <_free_r+0x7c>
 801004e:	230c      	movs	r3, #12
 8010050:	602b      	str	r3, [r5, #0]
 8010052:	e7d3      	b.n	800fffc <_free_r+0x24>
 8010054:	6820      	ldr	r0, [r4, #0]
 8010056:	1821      	adds	r1, r4, r0
 8010058:	428b      	cmp	r3, r1
 801005a:	bf04      	itt	eq
 801005c:	6819      	ldreq	r1, [r3, #0]
 801005e:	685b      	ldreq	r3, [r3, #4]
 8010060:	6063      	str	r3, [r4, #4]
 8010062:	bf04      	itt	eq
 8010064:	1809      	addeq	r1, r1, r0
 8010066:	6021      	streq	r1, [r4, #0]
 8010068:	6054      	str	r4, [r2, #4]
 801006a:	e7c7      	b.n	800fffc <_free_r+0x24>
 801006c:	bd38      	pop	{r3, r4, r5, pc}
 801006e:	bf00      	nop
 8010070:	20000144 	.word	0x20000144

08010074 <_malloc_r>:
 8010074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010076:	1ccd      	adds	r5, r1, #3
 8010078:	f025 0503 	bic.w	r5, r5, #3
 801007c:	3508      	adds	r5, #8
 801007e:	2d0c      	cmp	r5, #12
 8010080:	bf38      	it	cc
 8010082:	250c      	movcc	r5, #12
 8010084:	2d00      	cmp	r5, #0
 8010086:	4606      	mov	r6, r0
 8010088:	db01      	blt.n	801008e <_malloc_r+0x1a>
 801008a:	42a9      	cmp	r1, r5
 801008c:	d903      	bls.n	8010096 <_malloc_r+0x22>
 801008e:	230c      	movs	r3, #12
 8010090:	6033      	str	r3, [r6, #0]
 8010092:	2000      	movs	r0, #0
 8010094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010096:	f000 f857 	bl	8010148 <__malloc_lock>
 801009a:	4921      	ldr	r1, [pc, #132]	; (8010120 <_malloc_r+0xac>)
 801009c:	680a      	ldr	r2, [r1, #0]
 801009e:	4614      	mov	r4, r2
 80100a0:	b99c      	cbnz	r4, 80100ca <_malloc_r+0x56>
 80100a2:	4f20      	ldr	r7, [pc, #128]	; (8010124 <_malloc_r+0xb0>)
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	b923      	cbnz	r3, 80100b2 <_malloc_r+0x3e>
 80100a8:	4621      	mov	r1, r4
 80100aa:	4630      	mov	r0, r6
 80100ac:	f000 f83c 	bl	8010128 <_sbrk_r>
 80100b0:	6038      	str	r0, [r7, #0]
 80100b2:	4629      	mov	r1, r5
 80100b4:	4630      	mov	r0, r6
 80100b6:	f000 f837 	bl	8010128 <_sbrk_r>
 80100ba:	1c43      	adds	r3, r0, #1
 80100bc:	d123      	bne.n	8010106 <_malloc_r+0x92>
 80100be:	230c      	movs	r3, #12
 80100c0:	6033      	str	r3, [r6, #0]
 80100c2:	4630      	mov	r0, r6
 80100c4:	f000 f846 	bl	8010154 <__malloc_unlock>
 80100c8:	e7e3      	b.n	8010092 <_malloc_r+0x1e>
 80100ca:	6823      	ldr	r3, [r4, #0]
 80100cc:	1b5b      	subs	r3, r3, r5
 80100ce:	d417      	bmi.n	8010100 <_malloc_r+0x8c>
 80100d0:	2b0b      	cmp	r3, #11
 80100d2:	d903      	bls.n	80100dc <_malloc_r+0x68>
 80100d4:	6023      	str	r3, [r4, #0]
 80100d6:	441c      	add	r4, r3
 80100d8:	6025      	str	r5, [r4, #0]
 80100da:	e004      	b.n	80100e6 <_malloc_r+0x72>
 80100dc:	6863      	ldr	r3, [r4, #4]
 80100de:	42a2      	cmp	r2, r4
 80100e0:	bf0c      	ite	eq
 80100e2:	600b      	streq	r3, [r1, #0]
 80100e4:	6053      	strne	r3, [r2, #4]
 80100e6:	4630      	mov	r0, r6
 80100e8:	f000 f834 	bl	8010154 <__malloc_unlock>
 80100ec:	f104 000b 	add.w	r0, r4, #11
 80100f0:	1d23      	adds	r3, r4, #4
 80100f2:	f020 0007 	bic.w	r0, r0, #7
 80100f6:	1ac2      	subs	r2, r0, r3
 80100f8:	d0cc      	beq.n	8010094 <_malloc_r+0x20>
 80100fa:	1a1b      	subs	r3, r3, r0
 80100fc:	50a3      	str	r3, [r4, r2]
 80100fe:	e7c9      	b.n	8010094 <_malloc_r+0x20>
 8010100:	4622      	mov	r2, r4
 8010102:	6864      	ldr	r4, [r4, #4]
 8010104:	e7cc      	b.n	80100a0 <_malloc_r+0x2c>
 8010106:	1cc4      	adds	r4, r0, #3
 8010108:	f024 0403 	bic.w	r4, r4, #3
 801010c:	42a0      	cmp	r0, r4
 801010e:	d0e3      	beq.n	80100d8 <_malloc_r+0x64>
 8010110:	1a21      	subs	r1, r4, r0
 8010112:	4630      	mov	r0, r6
 8010114:	f000 f808 	bl	8010128 <_sbrk_r>
 8010118:	3001      	adds	r0, #1
 801011a:	d1dd      	bne.n	80100d8 <_malloc_r+0x64>
 801011c:	e7cf      	b.n	80100be <_malloc_r+0x4a>
 801011e:	bf00      	nop
 8010120:	20000144 	.word	0x20000144
 8010124:	20000148 	.word	0x20000148

08010128 <_sbrk_r>:
 8010128:	b538      	push	{r3, r4, r5, lr}
 801012a:	4d06      	ldr	r5, [pc, #24]	; (8010144 <_sbrk_r+0x1c>)
 801012c:	2300      	movs	r3, #0
 801012e:	4604      	mov	r4, r0
 8010130:	4608      	mov	r0, r1
 8010132:	602b      	str	r3, [r5, #0]
 8010134:	f7f4 f978 	bl	8004428 <_sbrk>
 8010138:	1c43      	adds	r3, r0, #1
 801013a:	d102      	bne.n	8010142 <_sbrk_r+0x1a>
 801013c:	682b      	ldr	r3, [r5, #0]
 801013e:	b103      	cbz	r3, 8010142 <_sbrk_r+0x1a>
 8010140:	6023      	str	r3, [r4, #0]
 8010142:	bd38      	pop	{r3, r4, r5, pc}
 8010144:	20005c08 	.word	0x20005c08

08010148 <__malloc_lock>:
 8010148:	4801      	ldr	r0, [pc, #4]	; (8010150 <__malloc_lock+0x8>)
 801014a:	f000 b809 	b.w	8010160 <__retarget_lock_acquire_recursive>
 801014e:	bf00      	nop
 8010150:	20005c10 	.word	0x20005c10

08010154 <__malloc_unlock>:
 8010154:	4801      	ldr	r0, [pc, #4]	; (801015c <__malloc_unlock+0x8>)
 8010156:	f000 b804 	b.w	8010162 <__retarget_lock_release_recursive>
 801015a:	bf00      	nop
 801015c:	20005c10 	.word	0x20005c10

08010160 <__retarget_lock_acquire_recursive>:
 8010160:	4770      	bx	lr

08010162 <__retarget_lock_release_recursive>:
 8010162:	4770      	bx	lr

08010164 <_init>:
 8010164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010166:	bf00      	nop
 8010168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801016a:	bc08      	pop	{r3}
 801016c:	469e      	mov	lr, r3
 801016e:	4770      	bx	lr

08010170 <_fini>:
 8010170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010172:	bf00      	nop
 8010174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010176:	bc08      	pop	{r3}
 8010178:	469e      	mov	lr, r3
 801017a:	4770      	bx	lr
